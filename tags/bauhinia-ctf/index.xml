<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bauhinia-ctf on Black Bauhinia</title>
    <link>https://b6a.black/tags/bauhinia-ctf/</link>
    <description>Recent content in bauhinia-ctf on Black Bauhinia</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 Mar 2024 19:47:00 +0800</lastBuildDate><atom:link href="https://b6a.black/tags/bauhinia-ctf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bauhinia CTF 2023: Image Factory</title>
      <link>https://b6a.black/posts/2024-03-10-b6actf-image-factory/</link>
      <pubDate>Sun, 10 Mar 2024 19:47:00 +0800</pubDate>
      
      <guid>https://b6a.black/posts/2024-03-10-b6actf-image-factory/</guid>
      <description>Last year, I created a pwn challenge for the Bauhinia CTF competition. Personally, I consider it to be the most difficult pwn challenge I have ever created, and here I would like to share the challenge and its intended solution. At the same time, I will discuss common solving approaches you may find useful for this type of challenge.
 Overview  As a CTFer, we have the obligation to code any program in a secure manner, even if a university assignment, right?</description>
    </item>
    
  </channel>
</rss>
