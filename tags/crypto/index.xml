<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>crypto on Black Bauhinia</title>
    <link>https://b6a.black/tags/crypto/</link>
    <description>Black Bauhinia (crypto)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 03 Jan 2021 13:39:00 +0800</lastBuildDate>
    
    <atom:link href="https://b6a.black/tags/crypto/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TetCTF 2021: unevaluated</title>
      <link>https://b6a.black/posts/2021-01-03-tetctf-unevaluated/</link>
      <pubDate>Sun, 03 Jan 2021 13:39:00 +0800</pubDate>
      
      <guid>https://b6a.black/posts/2021-01-03-tetctf-unevaluated/</guid>
      <description>&lt;p&gt;TetCTF is the first CTF I have played in 2021. I recalled from last year that they have cool challenges. This year, there are three crypto challenges. In particular, &lt;em&gt;unevaluated&lt;/em&gt; is the hardest among them. Although I did not solve them, I dug into rabbit holes and had a lot of struggle, uh, fun.&lt;/p&gt;

&lt;h2 id=&#34;challenge-summary&#34;&gt;Challenge Summary&lt;/h2&gt;

&lt;p&gt;There is a 128-bit prime $p$. Define $\cdot: \mathbb{Z}_{p^2}^2\times\mathbb{Z}_{p^2}^2\rightarrow\mathbb{Z}_{p^2}^2$ by&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[(x_1, y_1)\cdot(x_2, y_2) := \left(\left(x_1x_2-y_1y_2\right)\ \text{mod}\ p^2, \left(x_1y_2+y_1x_2\right)\ \text{mod}\ p^2\right),\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;where $(x_1, y_1), (x_2, y_2) \in \mathbb{Z}_{p^2}^2$. Also, define for $k\in\mathbb{N}$ and $G \in \mathbb{Z}_{p^2}^2$, $G^k = G \cdot G \cdot ... \cdot G$. Given that $G, H \in \mathbb{Z}_{p^2}^2$, the objective is to find $k\in\mathbb{N}\cap\left[0, 2^{256}\right)$ such that $H = G^k$.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;div class=&#34;alert warning&#34;&gt;
  &lt;strong&gt;Clickbaited!&lt;/strong&gt; This writeup is not original and has referred (or stolen) to several sources (Thanks rkm0959 and CryptoHack!). I would like to write this up for my own reference. Anyway, this is more like a story than a solution.
&lt;/div&gt;
  

&lt;h3 id=&#34;part-i-what-is-the-order-composed-of&#34;&gt;Part I: What is the order composed of?&lt;/h3&gt;

&lt;p&gt;Since $p$ and $k$ are respectively 128 and 256 bits long, it is expected to recover two out of $k\ \text{mod}\ p$, $k\ \text{mod}\ q$ and $k\ \text{mod}\ r$ to compute $k$. It is interesting to see the order being a product of three primes $p, q, r$, with $q | (p-1)$ and $r | (p+1)$.&lt;/p&gt;

&lt;p&gt;I have defined $\text{norm}: \mathbb{Z}_{p^2}^2 \rightarrow \mathbb{Z}_{p^2}$ by $\text{norm}(x, y) = (x^2 + y^2)\ \text{mod}\ p^2$ and experimented a bit and discovered some of the properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The imaginary part of $G^{pr}$ is zero.&lt;/li&gt;
&lt;li&gt;$\text{norm}(G^{pq}) = 1$, and&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we are working on $\mathbb{Z}_p$ instead of $\mathbb{Z}_{p^2}^2$, then&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The imaginary part of $G^r$ is zero.&lt;/li&gt;
&lt;li&gt;$\text{norm}(G^q) = 1$, and&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following code snipped is used to verify the above properties.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Under mod n&lt;/span&gt;
P &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; complex_pow(G, p&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;r, n)           &lt;span style=&#34;color:#75715e&#34;&gt;# P.im == 0&lt;/span&gt;
dQ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; norm(complex_pow(G, p&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;q, n), n) &lt;span style=&#34;color:#75715e&#34;&gt;# dQ == 1&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Under mod p&lt;/span&gt;
P &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; complex_pow(G, r, p)             &lt;span style=&#34;color:#75715e&#34;&gt;# P.im == 0&lt;/span&gt;
dQ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; norm(complex_pow(G, q, p), p)   &lt;span style=&#34;color:#75715e&#34;&gt;# dQ == 1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This make me think: If we consider a &lt;em&gt;polar coordinate representation&lt;/em&gt; where $G = \rho e^{i\theta}$, with $\rho\in R$ and $\theta\in A$, then $R \cong \mathbb{Z}_{pq}$ and $A \cong \mathbb{Z}_{pr}$. Hence, we can imagine that the subgroup that $G$ generates is isomorphic to $\mathbb{Z}_{pq}\times\mathbb{Z}_{pr}$.&lt;/p&gt;

&lt;div class=&#34;alert warning&#34;&gt;
  Well, they are not important though. This is interesting however.
&lt;/div&gt;
  

&lt;h3 id=&#34;part-ii-stealing-the-ideas-from-an-existing-cryptosystem&#34;&gt;Part II: Stealing the ideas from an existing cryptosystem&lt;/h3&gt;

&lt;p&gt;Solving discrete log under modulo $n^2$ does not seem difficult. For example, we can see from Paillier cryptosystem that discrete logarithms under modulo $n^2$ can be computed easily. In this way, we can compute $x\ \text{mod}\ p$ with:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[x \equiv \frac{\mathcal{L}(h^{p-1}\ \text{mod}\ p^2)}{\mathcal{L}(g^{p-1}\ \text{mod}\ p^2)}\ (\text{mod}\ p),\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;where $\mathcal{L}(x) = \frac{x-1}{p}$, like how a ciphertext is decrypted with the Paillier cryptosystem. Hence we have $x\ \text{mod}\ p$.&lt;/p&gt;

&lt;div class=&#34;alert info&#34;&gt;
  &lt;strong&gt;Mini Checklist&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; $x\ \text{mod}\ p$&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; $x\ \text{mod}\ q$&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; $x\ \text{mod}\ r$&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  

&lt;h3 id=&#34;part-iii-solving-128bit-discrete-logarithm&#34;&gt;Part III: Solving 128-bit discrete logarithm&lt;/h3&gt;

&lt;p&gt;Let&#39;s try to work on $\mathbb{Z}_{p}^2$ instead of $\mathbb{Z}_{p^2}^2$. This reminded me the challenge &lt;em&gt;galiver&lt;/em&gt; in ASIS CTF Finals 2020. I searched the discussion on CryptoHack&#39;s Discord server, and found...&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://b6a.black/images/2021-01-03-tetctf/hellman-on-galiver.png&#34;
         alt=&#34;hellman&amp;amp;rsquo;s comment on galiver back then.&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;hellman&amp;rsquo;s comment on galiver back then.&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;Okay, &lt;em&gt;works for 128-bit $p$ rather fast&lt;/em&gt;. So this must be discrete logarithm. Let&#39;s try it? Since the imaginary part for $G^r, H^r$ are zero, I tried &lt;code&gt;discrete_log(H^r, G^r, q)&lt;/code&gt; on Sage. After five minutes, my PC crashed. I could not solve it during the CTF. After the game, rkm0959 publishes the &lt;a href=&#34;https://rkm0959.tistory.com/192&#34;&gt;writeup&lt;/a&gt; on the CTF and he used &lt;code&gt;h.log(g)&lt;/code&gt; and have got it working. In his writeup, he uses a &lt;em&gt;norm map&lt;/em&gt; which is isomorphic to the subgroup that $G^r$ generates.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;206109322179011817882783419945552366363&lt;/span&gt;
q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;103054661089505908941391709972776183181&lt;/span&gt;
r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17175776848250984823565284995462697197&lt;/span&gt;
G &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;20878314020629522511110696411629430299663617500650083274468525283663940214962&lt;/span&gt;,
     &lt;span style=&#34;color:#ae81ff&#34;&gt;16739915489749335460111660035712237713219278122190661324570170645550234520364&lt;/span&gt;)
H &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;11048898386036746197306883207419421777457078734258168057000593553461884996107&lt;/span&gt;,
     &lt;span style=&#34;color:#ae81ff&#34;&gt;34230477038891719323025391618998268890391645779869016241994899690290519616973&lt;/span&gt;)

Zp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GF(p)

g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Zp(G[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; G[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# equivalently, g = Zp(complex_pow(G, r, p).re)&lt;/span&gt;
h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Zp(H[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; H[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# and           h = Zp(complex_pow(H, r, p).re)&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; g&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;q &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
x_mod_q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log(g)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x % q =&amp;#39;&lt;/span&gt;, x_mod_q) &lt;span style=&#34;color:#75715e&#34;&gt;# 26176203815975575469683683780455489251&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;alert success&#34;&gt;
  &lt;strong&gt;Takeaway.&lt;/strong&gt; Sage is powerful. It tooks 3 minutes for my PC to compute the discrete log, where the time complexity should be $\mathcal{O}(\sqrt{q})$. Also, &lt;em&gt;do not use&lt;/em&gt; &lt;code&gt;discrete_log(h, g)&lt;/code&gt;. Use &lt;code&gt;h.log(g)&lt;/code&gt; instead.
&lt;/div&gt;
  

&lt;div class=&#34;alert info&#34;&gt;
  &lt;strong&gt;Mini Checklist&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; $x\ \text{mod}\ p$&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; $x\ \text{mod}\ q$&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; $x\ \text{mod}\ r$&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  

&lt;h3 id=&#34;part-iv-combining-the-building-blocks&#34;&gt;Part IV: Combining the building blocks&lt;/h3&gt;

&lt;p&gt;With Chinese remainder theorem, we are able to recover $x_0 := x\ \text{mod}\ pq$. It may not equal to $x$, but they are differ from a small multiple of $pq$. We can simply compute $x_0 + kpq$ for some small $k\in\mathbb{N}$ until $k$ is obtained. After that we have the flag - &lt;code&gt;TetCTF{h0m0m0rph1sm_1s_0ur_fr13nd-mobi:*100*231199111007#}&lt;/code&gt;. This challenge makes me think more about discrete logarithm, and I am amazed by the capability of Sage. I am still wondering why discrete logarithm of a 128-bit prime can be computed in just a few minutes...&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>hxp CTF 2020: Hyper</title>
      <link>https://b6a.black/posts/2020-12-20-hxpctf-hyper/</link>
      <pubDate>Sun, 20 Dec 2020 23:53:00 +0800</pubDate>
      
      <guid>https://b6a.black/posts/2020-12-20-hxpctf-hyper/</guid>
      <description>&lt;p&gt;I was teamed up to play &lt;em&gt;hxp CTF&lt;/em&gt; as @blackb6a last week. The &lt;em&gt;hxp&lt;/em&gt; team had come up with a collection of hard challenges. In particular, there are two series of crypto challenges with a total of five parts. I will be writing on the &lt;em&gt;hyper&lt;/em&gt; challenge and some follow-up and unanswered questions regarding to hyperelliptic curves.&lt;/p&gt;

&lt;div class=&#34;alert danger&#34;&gt;
  &lt;p&gt;ⓘ 𝗢𝗳𝗳𝗶𝗰𝗶𝗮𝗹 𝘀𝗼𝘂𝗿𝗰𝗲𝘀 𝘀𝘁𝗮𝘁𝗲𝗱 𝘁𝗵𝗮𝘁 𝘁𝗵𝗶𝘀 𝗶𝘀 𝗺𝗶𝘀𝗹𝗲𝗮𝗱𝗶𝗻𝗴&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Seriously.&lt;/strong&gt; I knew nothing on hyperelliptic curves prior to the CTF. The writeup is solely based on what I learnt during the game, and may not be accurate. If you found a mistake, please do not hesitate to contact me. Many thanks! :smile:&lt;/p&gt;

&lt;/div&gt;
  

&lt;h2 id=&#34;challenge-summary&#34;&gt;Challenge Summary&lt;/h2&gt;

&lt;p&gt;In this series of challenge, the message &lt;code&gt;Hello! The flag is: hxp{...}&lt;/code&gt; is &lt;em&gt;xorred&lt;/em&gt; with an bytestream generated by an PRNG. In particular, the only difference between &lt;em&gt;hyper&lt;/em&gt; (crypto, 294 points) and &lt;em&gt;hyperhyper&lt;/em&gt; (crypto, 714 points) is the message lengths, respectively 45 and 93.&lt;/p&gt;

&lt;p&gt;Without doubt, the most crucial element for this challenge is the PRNG, which is based on &lt;em&gt;Jacobian of hyperelliptic curves&lt;/em&gt;. In this challenge, the Jacobian $\mathcal{J}$ of a hyperelliptic curve $\mathcal{H}$ of genus 3 over $\mathbb{Z}_p$ is used. $\mathcal{H}$ is defined by:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\mathcal{H}: y^2 \equiv x^7 + x\ (\text{mod}\ p).\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Three constant points $G_1, G_2, G_3$ from $\mathcal{J}$ are picked and three integers $k_1, k_2, k_3$ are picked randomly as the seed. Finally, define $H_n \in \mathcal{J}$ by $H_n := k_1^nG_1 + k_2^nG_2 + k_3^nG_3$ for $n\in\mathbb{N}$. If we write $H_n = \left(u_n\left(x\right), v_n\left(x\right)\right)$, where&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\begin{cases}
u_n(x) := u_{n0} + u_{n1} x + u_{n2} x^2 + u_{n3} x^3 \\
v_n(x) := v_{n0} + v_{n1} x + v_{n2} x^2
\end{cases},\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;then the random stream would be $(u_{10}, u_{11}, u_{12}, v_{10}, v_{11}, v_{12}, u_{20}, u_{21}, ...)$, where each of $u_{ij}$ and $v_{ij}$&#39;s is of 8 bytes.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;h3 id=&#34;part-i-comparing-hyper-and-hyperhyper&#34;&gt;Part I: Comparing &lt;em&gt;hyper&lt;/em&gt; and &lt;em&gt;hyperhyper&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;One thing that made me very curious at first glance: We are given 24 bytes of the random bytestream from the known message in both &lt;em&gt;hyper&lt;/em&gt; and &lt;em&gt;hyperhyper&lt;/em&gt;, why is &lt;em&gt;hyperhyper&lt;/em&gt; an independent question? If we are able to recover internal state for the PRNG, wouldn&#39;t it be evident to solve the both parts?&lt;/p&gt;

&lt;p&gt;Of course, I would have not questions if I have understood the PRNG. Since the first 24 bytes are known, we have $u_1(x)$. For &lt;em&gt;hyper&lt;/em&gt;, we gotta recover the following 21 bytes, which is enough by recovering $v_1(x)$. After all, the points are given in &lt;em&gt;Mumford representation&lt;/em&gt;. With that said, if a point $P\left(u\left(x\right), v\left(x\right)\right)\in\mathcal{J}$, the below properties are satisfied&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:hyperelliptic-properties&#34;&gt;&lt;a class=&#34;footnote&#34; href=&#34;#fn:hyperelliptic-properties&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;$u(x)$ is monic,&lt;/li&gt;
&lt;li&gt;$f(x) \equiv [v(x)]^2\ \left(\text{mod}\ u\left(x\right)\right)$, and&lt;/li&gt;
&lt;li&gt;$\deg\left(v\left(x\right)\right) &amp;lt; \deg\left(u\left(x\right)\right) \leq 3$.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is hinted from the second property that the objective is to find a modular square root for $f(x)$ under modulo $u(x)$.&lt;/p&gt;

&lt;h3 id=&#34;part-ii-midnight-thoughts&#34;&gt;Part II: Midnight thoughts&lt;/h3&gt;

&lt;p&gt;It was midnight when I realize this and I could not immediately think of an appropriate approach. I was even once expanding everything:&lt;/p&gt;

&lt;p&gt;Suppose that we have $u(x) := x^3 + rx^2 + sx + t$ and $v(x) := ax^2 + bx + c$. Then the following modular congruences hold:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\begin{cases}
-r^5 + 4r^3s - 3r^2t - 3rs^2 + 2st - a^2r^2 + 2abr + a^2s - 2ac - b^2 \equiv 0 \\
-r^4s + 3r^2s^2 - 4rst - s^3 + r^3t + t^2 + 1 - a^2rs + 2abs + a^2t - 2bc \equiv 0 \\
-r^4t + 3r^2st - 2rt^2 - s^2t - a^2rt + 2abt - c^2 \equiv 0
\end{cases}(\text{mod}\ p).\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;I must be very sleepy back then.&lt;/p&gt;

&lt;h3 id=&#34;part-iii-wake-up-wake-up&#34;&gt;Part III: Wake up, wake up!&lt;/h3&gt;

&lt;p&gt;After [&lt;em&gt;enter an arbitrary number&lt;/em&gt;] hours of sleep, I woke up and immediately recalled Tonelli-Shanks algorithm. Basically we are able to apply the algorithm to compute modular square root, even with modulo $u(x)$. Since $u(x)$ is a degree 3 polynomial over $\mathbb{Z}_p$, the order for $\mathcal{G} := \text{GF}(p)[x]/u(x)$ would be a factor of $p^3 - 1$. Knowing the order, we can apply Tonelli-Shanks to compute a modular square root for $f(x)$. After all, $v(x)$ would be one of them.&lt;/p&gt;

&lt;p&gt;The rest is trivial after we have $v_1(x)$ computed. Xorring the output with the keystream, we have the message: &lt;code&gt;Hello! The flag is: hxp{ez_P4rT_i5_ez__tL0Cm}&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;part-iv-mysteries-of-hyperelliptic-curves&#34;&gt;Part IV: Mysteries of hyperelliptic curves&lt;/h3&gt;

&lt;div class=&#34;alert danger&#34;&gt;
  I am not going to talk about solutions anymore. This section contains a list of unproved properties which looked truthy for me. Those questions came to my mind while attempting &lt;em&gt;hyperhyper&lt;/em&gt;, while I have no proofs. The questions are no means useful for solving the questions, but I think they are helpful in pairing-based cryptography. They are very likely used somewhere anyway.
&lt;/div&gt;
  

&lt;p&gt;Let $\mathcal{J}$ be the Jacobian of a hyperelliptic curve of genus 3. Suppose that $\sigma$ is the order of $G_1, G_2, G_3\in\mathcal{J}$.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Question 1.&lt;/strong&gt; Is $a_1G_1 + a_2G_2 + a_3G_3$ also has an order $\sigma$ given that $gcd(a_i, \sigma)=1$?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Question 2.&lt;/strong&gt; Define $S := \{k_1G_1 + k_2G_2 + k_3G_3 \in \mathcal{J}: k_1, k_2, k_3\in\mathbb{Z}\}$. Is $\left|S\right| = \sigma^3$?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Question 3.&lt;/strong&gt; Let $(\mathbb{Z}_p^3, +)$ be a group and define $x = (x_1, x_2, x_3), y = (y_1, y_2, y_3) \in\mathbb{Z}_p^3$. Suppose $x+y = (x_1+y_1, x_2+y_2, x_3+y_3)$. Is $(\mathbb{Z}_p^3, +)$ isomorphic to $S$?&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:hyperelliptic-properties&#34;&gt;Jasper Scholten, Frederik Vercauteren (2003). &amp;quot;An Introduction to Elliptic and Hyperelliptic Curve Cryptography and the NTRU Cryptosystem&amp;quot;&lt;br&gt;&lt;a href=&#34;https://homes.esat.kuleuven.be/~fvercaut/papers/cc03.pdf&#34;&gt;https://homes.esat.kuleuven.be/~fvercaut/papers/cc03.pdf&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:hyperelliptic-properties&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Dragon CTF 2020 Writeup</title>
      <link>https://b6a.black/posts/2020-11-23-dragonctf/</link>
      <pubDate>Mon, 23 Nov 2020 04:33:50 +0800</pubDate>
      
      <guid>https://b6a.black/posts/2020-11-23-dragonctf/</guid>
      <description>&lt;p&gt;&lt;em&gt;Dragon CTF 2020&lt;/em&gt; is definitely had my best CTF moments. There are big brain moments and I have been mind-blown for multiple times during the game. This time we have teamed up with @blackb6a. I have solved all the crypto challenges and two challenges with my teammates.&lt;/p&gt;

&lt;p&gt;There are three challenges writeup in this post:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bit Flip (parts 2 and 3)&lt;/li&gt;
&lt;li&gt;Frying in motion&lt;/li&gt;
&lt;li&gt;babykok&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;bit-flip-crypto-155324343-points&#34;&gt;Bit Flip (Crypto, 155+324+343 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;Mystiz&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;challenge-summary&#34;&gt;Challenge Summary&lt;/h3&gt;

&lt;p&gt;At the beginning, a 128-bit &lt;code&gt;alice_secret&lt;/code&gt; (denoted as $a$) is generated. We are given an oracle that allows us to input a 256-bit value $v$. An PRNG $R$ uses $a\oplus v$ to derive:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;a 512-bit prime $p$ that is used for Diffie-Hellman, and&lt;/li&gt;
&lt;li&gt;a 64-bit secret $a$ that is Alice&#39;s secret key.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For each oracle call, the following will be printed&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The number of &lt;code&gt;rng.getbits(512)&lt;/code&gt; calls for $p$ to be a prime,&lt;/li&gt;
&lt;li&gt;Bob&#39;s public key (which is generated randomly in each call), $B$,&lt;/li&gt;
&lt;li&gt;The encrypted flag (with AES-CBC &amp;amp; key is derived from the DH shared key):&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Of course, &lt;em&gt;the devil is in the detail&lt;/em&gt;. The AES-CBC &lt;code&gt;key&lt;/code&gt; is derived as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;dh_shared_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1337&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; pow(B, a, p)
key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; long_to_bytes(dh_shared_key, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)[:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Furthermore, the PRNG is simple. It is maintaining a 256-bit state $s$. 512-bit and 64-bit numbers are generated respectively with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getbits&lt;/span&gt;(bits&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;512&lt;/span&gt;):
    output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sha256(long_to_bytes(s, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;digest() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sha256(long_to_bytes(s&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;digest()
    s &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; output

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getbits&lt;/span&gt;(bits&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;):
    output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sha256(long_to_bytes(s, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;digest()[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:]
    s &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; output&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;the-plot-twist&#34;&gt;The plot twist&lt;/h4&gt;

&lt;p&gt;This is the setting for part one. Parts two and three are pretty similar though.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Parts 2 and 3 are &lt;em&gt;not&lt;/em&gt; returning Bob&#39;s public key, and&lt;/li&gt;
&lt;li&gt;Part 3 uses the prime $p$ and check if $q := 2p+1$ is a prime. The prime $q$ (instead of $p$) is used for DH.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;

&lt;h4 id=&#34;part-i-the-real-bitflipping&#34;&gt;Part I: The real bit-flipping&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Bit Flip 1&lt;/em&gt; was solved in about 45 minutes. Basically we are able to recover $v$ from the number of &lt;code&gt;rng.getbits(512)&lt;/code&gt; calls. Since I am sure that there will be writeups on this part available online, I am skipping this part.&lt;/p&gt;

&lt;div class=&#34;alert warning&#34;&gt;
  I am just going to admit that I am lazy.
&lt;/div&gt;
  

&lt;h4 id=&#34;part-ii-a-nightmare-on-longtobytes&#34;&gt;Part II: A nightmare on &lt;code&gt;long_to_bytes&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Bit Flip 3&lt;/em&gt; was solved in 1 hour - and we were the first to solve. But wait, why isn&#39;t part II on &lt;em&gt;Bit Flip 2&lt;/em&gt;? The reason is simply because just I cannot solve it (yet).&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://b6a.black/images/2020-11-23-dragonctf/bit-flip-01.png&#34;
         alt=&#34;defund had the same question, too.&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;defund had the same question, too.&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;The prime used for Diffie-Hellman can be 513-bit long. This makes the AES key derivation interesting - as &lt;code&gt;long_to_bytes(x, 16)&lt;/code&gt; actually prepend null bytes until the output size is a multiple of 16. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; long_to_bytes(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;127&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hex()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;80000000000000000000000000000000&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; long_to_bytes(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hex()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0000000000000000000000000000000100000000000000000000000000000000&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Luckily (or unluckily) the shared key can be as large as 513 bits long. In that case, the first block would be &lt;code&gt;00 00 ... 00 00 01&lt;/code&gt; - and this is the AES key.&lt;/p&gt;

&lt;p&gt;We do not even need to know Alice&#39;s nor Bob&#39;s key. Basically there is around 25% chance for the DH shared key to be 513-bit. When it happens, the constant key is used and we are able to decrypt the flag - &lt;code&gt;DrgnS{C0nst_A3S_K3y_1111111111111!}&lt;/code&gt;. First blood 🩸!&lt;/p&gt;

&lt;h4 id=&#34;part-iii-playing-mindgames-on-bit-flip-2&#34;&gt;Part III: Playing mind-games on &lt;em&gt;Bit Flip 2&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Bit Flip 2&lt;/em&gt; was solved in about 12 hours. I was mind-blown when I know &lt;em&gt;da wae&lt;/em&gt;. Since the DH key could never be 513 bits long anymore, we can no longer exploit in the way as described in &lt;em&gt;Bit Flip 3&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&#34;alert warning&#34;&gt;
  &lt;strong&gt;Wait.&lt;/strong&gt; This made me &lt;em&gt;very&lt;/em&gt; puzzled: How do we find the shared key (or $g^{ab}\ (\text{mod}\ p)$) if Bob is not telling us anything?
&lt;/div&gt;
  

&lt;p&gt;Basically we have three options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make $a = 0$. This implies that $g^{ab} \equiv 1$, resulting in a constant key.&lt;/li&gt;
&lt;li&gt;Find $a$ and $p$ such that $g^a\in\mathbb{Z}_p^*$ has a small order. Hence $\{g^{ab}\in\mathbb{Z}_p^*\ |\ b\in\mathbb{Z}\}$ can be exhausted feasibly.&lt;/li&gt;
&lt;li&gt;Make $p$ 385-bit long (or 1-bit, 129-bit or 257-bit). Then we are able to reuse the exploit on &lt;em&gt;Bit Flip 3&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There is a point of time that over 10 teams have solved &lt;em&gt;Bit Flip 2&lt;/em&gt; while only &lt;em&gt;hxp&lt;/em&gt; and us have solved &lt;em&gt;Bit Flip 3&lt;/em&gt;. If option 3 is the way to go, the number of solves would not be the same. Moreover, option 2 is barely possible in a perspective of math. That said, unless there is a vulnerability that I am not awared of, we may need to make $a = 0$. That is equivalent to &lt;code&gt;rng.getbits(64) == 0&lt;/code&gt; and thus a 64-bit proof-of-work. Possible?&lt;/p&gt;

&lt;p&gt;During the research, I was wondering if there is a proof-of-work database that has a list of payloads with many trailing zeros as its hash. I was even wondering if there is someone ever able to solve a 64-bit proof-of-work (particularly on SHA256). Turns out I am too naive - &lt;em&gt;some&lt;/em&gt; are able to solve a 76-bit proof-of-work in around 10 minutes. Who? The bitcoin network.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://b6a.black/images/2020-11-23-dragonctf/bit-flip-02.png&#34;
         alt=&#34;Let&amp;amp;rsquo;s appreciate the number of zeros&amp;amp;hellip;&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;Let&amp;rsquo;s appreciate the number of zeros&amp;hellip;&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;The &lt;a href=&#34;https://en.bitcoin.it/wiki/Block_hashing_algorithm&#34;&gt;block hashing algorithm&lt;/a&gt; for Bitcoin is SHA256. This is how block 125552 (the smallest hash as of June 2011) is computed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bytes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fromhex(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0100000081cd02ab7e569e8bcd9317e2fe99f2de44d49ab2b8851ba4a30&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;8000000000000e320b6c2fffc8d750423db8b1eb942ae710e951ed797f7&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;affc8892b0f1fc122bc7f5d74df2b9441a42a14695&amp;#39;&lt;/span&gt;)
m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hashlib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sha256(d)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;digest()
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hex())
&lt;span style=&#34;color:#75715e&#34;&gt;# b9d751533593ac10cdfb7b8e03cad8babc67d8eaeac0a3699b82857dacac9390&lt;/span&gt;
h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hashlib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sha256(m)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;digest()
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(h&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hex())
&lt;span style=&#34;color:#75715e&#34;&gt;# 1dbd981fe6985776b644b173a4d0385ddc1aa2a829688d1e0000000000000000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above hash ends with 8 null bytes. If the below seed generates a prime in its first call of &lt;code&gt;rng.getbits(512)&lt;/code&gt;, then &lt;code&gt;a = 0&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;seed = 0xb9d751533593ac10cdfb7b8e03cad8babc67d8eaeac0a3699b82857dacac938c&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately it is not. Luckily there are many inputs (available on the Bitcoin network) that generates eight trailing null bytes as its hash. We can simply look at the blocks and find the one we need. For me, I was using the block API from &lt;em&gt;blockcypher.com&lt;/em&gt; to retrieve and compute the preimage of hashes. Eventually &lt;a href=&#34;https://live.blockcypher.com/btc/block/657972&#34;&gt;block 657972&lt;/a&gt; satisfies our needs and the Alice&#39;s secret key will be $a = 0$.&lt;/p&gt;

&lt;p&gt;That said, the AES key would be &lt;code&gt;00 00 ... 00 05 38&lt;/code&gt; when $a = 0$ - and we are able to decrypt the flag: &lt;code&gt;DrgnS{B1tc0in_p0w3r_crypt0_brut3}&lt;/code&gt;! :tada:&lt;/p&gt;

&lt;h2 id=&#34;frying-in-motion-crypto-324-points&#34;&gt;Frying in motion (Crypto, 324 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;Mystiz&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;challenge-summary-1&#34;&gt;Challenge Summary&lt;/h3&gt;

&lt;p&gt;The challenge is simple. Upon connecting to the challenge server,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;257 HEX characters are generated, &lt;code&gt;strfry&lt;/code&gt;-ed for &lt;code&gt;0x140000&lt;/code&gt; times. Nothing is returned. (&lt;em&gt;This took around 5 seconds&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Players are allowed to send up to 4096 bytes. The server returns the &lt;code&gt;strfry&lt;/code&gt;-ed input.&lt;/li&gt;
&lt;li&gt;64 HEX characters (denote as &lt;code&gt;fry_buf&lt;/code&gt;) &lt;code&gt;strfry&lt;/code&gt;-ed and returned.&lt;/li&gt;
&lt;li&gt;The player is expected to find &lt;code&gt;fry_buf&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More importantly, the challenge server has a timeout of 20 seconds. Hence, you have to compute from the &lt;code&gt;strfry&lt;/code&gt;-ed response in 15 seconds.&lt;/p&gt;

&lt;h3 id=&#34;solution-1&#34;&gt;Solution&lt;/h3&gt;

&lt;h4 id=&#34;part-i-the-first-encounter&#34;&gt;Part I: The first encounter&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;quot;WTF. Yet another &lt;code&gt;strfry&lt;/code&gt; question? It must be very boring.&amp;quot; ~ &lt;em&gt;Mystiz&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is the first comment I made to the challenge. It is actually much interesting than I thought and I have spent a good 5 hours for the challenge.&lt;/p&gt;

&lt;p&gt;The previous CTFs (for example, challenge from &lt;a href=&#34;https://ctftime.org/task/10764&#34;&gt;ångstromCTF 2020&lt;/a&gt; and &lt;a href=&#34;https://ctftime.org/task/11259&#34;&gt;DawgCTF 2020&lt;/a&gt;) exploited on the small seed space that can be exhausted. In the previous versions of libc, the seeds for &lt;code&gt;strfry&lt;/code&gt; is given by &lt;code&gt;time(NULL) ^ getpid()&lt;/code&gt;. I was trying to print &lt;code&gt;time(NULL)&lt;/code&gt; and &lt;code&gt;getpid()&lt;/code&gt; alongside with the  &lt;code&gt;strfry&lt;/code&gt; result, but the seed does not check out. What? Maybe the world is not peaceful anymore in &lt;em&gt;libc 2.31-0ubuntu9&lt;/em&gt;. Let&#39;s download the source code and have a read.&lt;/p&gt;

&lt;h4 id=&#34;part-ii-codereading-game&#34;&gt;Part II: Code-reading game&lt;/h4&gt;

&lt;p&gt;Let&#39;s verify the first point - is the implementation for &lt;code&gt;strfry&lt;/code&gt; changed?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// string/strfry.c
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;strfry&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;string)
{
  &lt;span style=&#34;color:#75715e&#34;&gt;// omitted...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;init)
    {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; state[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;];
      rdata.state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
      __initstate_r (random_bits (),
		     state, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt; (state), &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rdata);
      init &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    }
  &lt;span style=&#34;color:#75715e&#34;&gt;// omitted...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// include/random-bits.h
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; uint32_t
&lt;span style=&#34;color:#a6e22e&#34;&gt;random_bits&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; timespec tv;
  __clock_gettime (CLOCK_MONOTONIC, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;tv);
  &lt;span style=&#34;color:#75715e&#34;&gt;/* Shuffle the lower bits to minimize the clock bias.  */&lt;/span&gt;
  uint32_t ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tv.tv_nsec &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; tv.tv_sec;
  ret &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; (ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; (ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Although the string is fried in the same way, the seed is changed! Since the seed is 32 bits long, maybe I can just exhaust it. However it takes 5 seconds to &lt;code&gt;strfry&lt;/code&gt; a 257-byte long string for 0x140000 times, it is not feasible to brute force with the challenge implementation. Let&#39;s read how random numbers are generated.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// stdlib/random_r.c
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;__initstate_r&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; seed, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;arg_state, size_t n,
	       &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; random_data &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;buf)
{
  &lt;span style=&#34;color:#75715e&#34;&gt;// omitted...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; type;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; BREAK_3)
    type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; BREAK_4 &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; TYPE_3 : TYPE_4;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; BREAK_1)
    {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; BREAK_0)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; fail;

      type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TYPE_0;
    }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
    type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; BREAK_2 &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; TYPE_1 : TYPE_2;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; degree &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; random_poly_info.degrees[type];
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; separation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; random_poly_info.seps[type];

  buf&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rand_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; type;
  buf&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rand_sep &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; separation;
  buf&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rand_deg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; degree;
  int32_t &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;((int32_t &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) arg_state)[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];	&lt;span style=&#34;color:#75715e&#34;&gt;/* First location.  */&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;/* Must set END_PTR before srandom.  */&lt;/span&gt;
  buf&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;end_ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;state[degree];

  buf&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; state;

  __srandom_r (seed, buf);

  state[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TYPE_0;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (type &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; TYPE_0)
    state[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (buf&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rptr &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; state) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; MAX_TYPES &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; type;
  &lt;span style=&#34;color:#75715e&#34;&gt;// omitted...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;strfry&lt;/code&gt; uses a 32-byte state, which indicates that &lt;code&gt;TYPE_1&lt;/code&gt; PRNG is used. Seven 32-bit unsigned integer is derived from the seed (denote it as &lt;code&gt;s[0]&lt;/code&gt;, &lt;code&gt;s[1]&lt;/code&gt;, ..., &lt;code&gt;s[6]&lt;/code&gt;) and set the counter &lt;code&gt;c := 0&lt;/code&gt;. This is the equivalent Python code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GlibcRandom&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, seed):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;init_state(seed)
        [self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next() &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;)]

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;init_state&lt;/span&gt;(self, seed):
        state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [seed]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;):
            h, l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; seed &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;127773&lt;/span&gt;, seed &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;127773&lt;/span&gt;

            seed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;16807&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2836&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; h) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7fffffff&lt;/span&gt;
            state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(seed)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
            state,
            &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        ]
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;(self):
        s, t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state
        v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (s[(t&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; s[t &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffffffff&lt;/span&gt;
        v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

        s[(t&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; s[t &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]
        s[(t&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffffffff&lt;/span&gt;

        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [s, (t &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; v&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;part-iii-fastforwarding-the-states&#34;&gt;Part III: Fast-forwarding the states&lt;/h4&gt;

&lt;p&gt;Fast-forwarding the PRNG is easy. This is similar on the &lt;a href=&#34;https://b6a.black/posts/2020-09-08-confidencectf-team-trees/#42-fast-sequence-generation&#34;&gt;Team Trees&lt;/a&gt; challenge in CONFidence CTF this year. We can skip states with the matrix implementation (and I am able to skip the details for this part, too). After all, 5M seeds can be checked per second. Since we have only 15 seconds to recover the seed, we are unable to find the entire search space (only 1.75% of the seed space is checked). In average, we can recover the seed from the &lt;code&gt;strfry&lt;/code&gt; output in 15 seconds once every 60 times. Finally, if we are able to recover the seed, we can freely fry and unfry strings.&lt;/p&gt;

&lt;p&gt;After two hours, we have the flag: &lt;code&gt;DrgnS{Fr13d_57r1Ng5_4r3_tH3_Be5t_s7r1NgS!}&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;babykok-misc-215-points&#34;&gt;babykok (Misc, 215 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;GeoffreyY&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We simply have to solve some theorems using &lt;a href=&#34;https://coq.inria.fr/&#34;&gt;Coq&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Good thing I have written some &lt;a href=&#34;https://leanprover.github.io/&#34;&gt;lean&lt;/a&gt; before, so learning / writing Coq isn&#39;t that difficult.&lt;/p&gt;

&lt;p&gt;For the first part we have to solve the following 6 theorems in some random order.&lt;/p&gt;

&lt;p&gt;I&#39;d like to thank my teammate @ozetta for finding this powerful coq tactic &lt;code&gt;intuition&lt;/code&gt;, and @harrier_lcc for showing us his coq and how to use it.&lt;/p&gt;

&lt;div class=&#34;alert info&#34;&gt;
  This would&amp;rsquo;ve taken a lot longer if we didn&amp;rsquo;t watch him livestreaming playing around with his coq.
His coq is very very nah that&amp;rsquo;s it I&amp;rsquo;m done with the jokes.
&lt;/div&gt;
  
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-coq&#34; data-lang=&#34;coq&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;Theorem&lt;/span&gt; problem0&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;forall&lt;/span&gt; A B &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Prop&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; A &lt;span style=&#34;color:#f92672&#34;&gt;\/&lt;/span&gt; B &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; B &lt;span style=&#34;color:#f92672&#34;&gt;\/&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;intuition&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-coq&#34; data-lang=&#34;coq&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;Theorem&lt;/span&gt; problem1&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;forall&lt;/span&gt; A B C D &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Prop&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;A &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; B&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/\&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;C &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; D&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/\&lt;/span&gt; A &lt;span style=&#34;color:#f92672&#34;&gt;/\&lt;/span&gt; C &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; B &lt;span style=&#34;color:#f92672&#34;&gt;/\&lt;/span&gt; D&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;intuition&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-coq&#34; data-lang=&#34;coq&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;Theorem&lt;/span&gt; problem2&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;forall&lt;/span&gt; A B &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;((((&lt;/span&gt;A &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; B&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; B&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; B&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;intuition&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We actually have to do some work with the remaining 3 starter problems:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-coq&#34; data-lang=&#34;coq&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;Theorem&lt;/span&gt; problem3&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;forall&lt;/span&gt; b1 b2 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; negb &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;b1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; b2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;negb b1 &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; negb b2&lt;span style=&#34;color:#f92672&#34;&gt;)%&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;intros&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 1 subgoal &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 10&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  b1&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; b2 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  negb &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;b1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; b2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;negb b1 &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; negb b2&lt;span style=&#34;color:#f92672&#34;&gt;)%&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The general idea for all of these proofs is to apply &lt;code&gt;induction&lt;/code&gt; to split the proof into smaller, simple cases.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-coq&#34; data-lang=&#34;coq&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;induction&lt;/span&gt; b1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 2 subgoals &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 14&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  b2 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  negb &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;true &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; b2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;negb true &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; negb b2&lt;span style=&#34;color:#f92672&#34;&gt;)%&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;

subgoal 2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 15&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;is&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
 negb &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;false &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; b2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;negb false &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; negb b2&lt;span style=&#34;color:#f92672&#34;&gt;)%&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-coq&#34; data-lang=&#34;coq&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;Theorem&lt;/span&gt; problem4&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;forall&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;C &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Prop&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;T &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;Set&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;B &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; T &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Prop&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; T&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; C &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; B x&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; C &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; T&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; B x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;intros&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 1 subgoal &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 23&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  C &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Prop&lt;/span&gt;
  T &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;Set&lt;/span&gt;
  B &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; T &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Prop&lt;/span&gt;
  H &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; T&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; C &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; B x
  H0 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; C
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; T&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; B x

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;induction&lt;/span&gt; H&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 1 subgoal &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 30&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  C &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Prop&lt;/span&gt;
  T &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;Set&lt;/span&gt;
  B &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; T &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Prop&lt;/span&gt;
  x &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; T
  H &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; C &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; B x
  H0 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; C
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; x0 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; T&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; B x0

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;apply&lt;/span&gt; H &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; H0&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 1 subgoal &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 31&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  C &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Prop&lt;/span&gt;
  T &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;Set&lt;/span&gt;
  B &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; T &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Prop&lt;/span&gt;
  x &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; T
  H &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; C &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; B x
  H0 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; B x
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; x0 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; T&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; B x0

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 1 subgoal &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 34&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  C &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Prop&lt;/span&gt;
  T &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;Set&lt;/span&gt;
  B &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; T &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Prop&lt;/span&gt;
  x &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; T
  H &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; C &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; B x
  H0 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; B x
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  B x

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;assumption&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead of explicitly using &lt;code&gt;apply H in H0.&lt;/code&gt;, I&#39;ve now discovered that the following simpler proof also works:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-coq&#34; data-lang=&#34;coq&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;intros&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;induction&lt;/span&gt; H&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We have to deal with natural numbers for the final starter problem, which we can also solve using induction:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-coq&#34; data-lang=&#34;coq&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;Theorem&lt;/span&gt; problem5&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;forall&lt;/span&gt; m n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;intros&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;induction&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 2 subgoals &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 14&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  0 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 0

subgoal 2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 18&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;is&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
 S m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; S m

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 1 subgoal &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 18&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  m&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;
  IHm &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  S m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; S m

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;simpl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 1 subgoal &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 21&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  m&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;
  IHm &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  S &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; S m

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;rewrite&lt;/span&gt; IHm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 1 subgoal &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 22&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  m&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;
  IHm &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  S &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; S m

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are only 2 more problems after the starter 6.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-coq&#34; data-lang=&#34;coq&#34;&gt;nice warmup&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; lets &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; some math&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;Require&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;Import&lt;/span&gt; Arith&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Mult&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;Theorem&lt;/span&gt; math_problem&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;forall&lt;/span&gt; m n&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 2 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The idea with this one is simply to expand both sides, and let the theorem prover see that both sides have the same terms.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-coq&#34; data-lang=&#34;coq&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;intros&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;simpl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 1 subgoal &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 13&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  m&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;rewrite&lt;/span&gt; mult_plus_distr_r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;rewrite&lt;/span&gt; mult_plus_distr_r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 1 subgoal &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 15&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  m&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;rewrite&lt;/span&gt; mult_plus_distr_l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;rewrite&lt;/span&gt; mult_plus_distr_l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 1 subgoal &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 17&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  m&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;m &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;rewrite&lt;/span&gt; plus_assoc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;rewrite&lt;/span&gt; plus_assoc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 1 subgoal &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 19&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  m&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;rewrite&lt;/span&gt; plus_0_r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 1 subgoal &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 20&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  m&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; firstorder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;firstorder&lt;/code&gt; didn&#39;t work on my machine but worked on the server ¯\_(ツ)_/¯&lt;/p&gt;

&lt;p&gt;The final question took us a while:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-coq&#34; data-lang=&#34;coq&#34;&gt;gj&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; now something more interesting&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; can you prove my code works&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;Require&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;Import&lt;/span&gt; Le&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;Section&lt;/span&gt; last_stage&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;Variable&lt;/span&gt; A &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

  &lt;span style=&#34;color:#f92672&#34;&gt;Inductive&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Type&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; nil &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; cons &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;


  &lt;span style=&#34;color:#f92672&#34;&gt;Fixpoint&lt;/span&gt; nth &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;l &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; option A &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;l &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; cons x xs  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; Some x
      &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; S n&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; cons &lt;span style=&#34;color:#f92672&#34;&gt;_&lt;/span&gt; xs  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; nth xs n
      &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;_,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; None
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

  &lt;span style=&#34;color:#f92672&#34;&gt;Fixpoint&lt;/span&gt; length &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;l&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; l &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; nil &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; 0
      &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; cons &lt;span style=&#34;color:#f92672&#34;&gt;_&lt;/span&gt; xs &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; 1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; length xs
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;Theorem&lt;/span&gt; nth_in&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;forall&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;l&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; length l &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nth l n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The idea for this is induction on both &lt;code&gt;n&lt;/code&gt; and &lt;code&gt;l&lt;/code&gt;. It should be easy for the base cases of &lt;code&gt;n&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;, or &lt;code&gt;l&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;, and induction completes the rest of the proof.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-coq&#34; data-lang=&#34;coq&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;intros&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;revert&lt;/span&gt; H&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;revert&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 1 subgoal &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 15&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  A &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Type&lt;/span&gt;
  l &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;forall&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; length l &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nth l n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some a

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;induction&lt;/span&gt; l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 2 subgoals &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 19&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  A &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Type&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;forall&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; length nil &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nth nil n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some a

subgoal 2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 23&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;is&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
 &lt;span style=&#34;color:#66d9ef&#34;&gt;forall&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
 n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; length &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cons a l&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; a0 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nth &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cons a l&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some a0

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;inversion&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 1 subgoal &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 23&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  A &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Type&lt;/span&gt;
  a &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A
  l &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;
  IHl &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;forall&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; length l &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nth l n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some a
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;forall&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
  n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; length &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cons a l&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; a0 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nth &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cons a l&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some a0

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;induction&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 2 subgoals &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 50&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  A &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Type&lt;/span&gt;
  a &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A
  l &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;
  IHl &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;forall&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; length l &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nth l n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some a
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; length &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cons a l&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; a0 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nth &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cons a l&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some a0

subgoal 2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 53&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;is&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
 S n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; length &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cons a l&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; a0 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nth &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cons a l&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;S n&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some a0

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;simpl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 2 subgoals &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 84&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; S &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;length l&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; a0 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Some a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some a0
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;intro&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 2 subgoals &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 60&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; a0 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Some a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some a0
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 1 subgoal &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 53&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  A &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Type&lt;/span&gt;
  a &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A
  l &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;
  IHl &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;forall&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; length l &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nth l n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some a
  n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;
  IHn &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; length &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cons a l&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; a0 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nth &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cons a l&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some a0
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  S n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; length &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cons a l&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; a0 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nth &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cons a l&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;S n&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some a0

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;simpl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 1 subgoal &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 68&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  A &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Type&lt;/span&gt;
  a &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A
  l &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;
  IHl &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;forall&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; length l &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nth l n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some a
  n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;
  IHn &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; length &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cons a l&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; a0 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nth &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cons a l&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some a0
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  S n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; S &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;length l&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; a0 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nth l n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some a0

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; arith&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally we have the flag:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gj flag: DrgnS{xxxx_my_c0q_for_4_flag_17bcbc34b7c565a766e335}&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Google CTF 2020: Oracle</title>
      <link>https://b6a.black/posts/2020-08-25-google-ctf-oracle/</link>
      <pubDate>Tue, 25 Aug 2020 16:15:00 +0800</pubDate>
      
      <guid>https://b6a.black/posts/2020-08-25-google-ctf-oracle/</guid>
      <description>&lt;p&gt;I was teamed-up with @blackb6a on Google CTF this time. I have solved 7 challenges alone and 3 challenges with my teammates.&lt;/p&gt;

&lt;p&gt;In particular, &lt;em&gt;Oracle&lt;/em&gt; is a crypto challenge with 13 solves. It has got me spending 12 hours. All in all, it was a great experience in terms of learning, but my liver hurts. This piece of writeup may be &lt;em&gt;very&lt;/em&gt; computation intensive, just because I would like to make everything clear.&lt;/p&gt;

&lt;h2 id=&#34;challenge-summary&#34;&gt;Challenge Summary&lt;/h2&gt;

&lt;p&gt;There are two parts of the challenges. In the first part, we are required to recover an internal state for AEGIS-128L given the encryption oracle. For the second part, we are required to forge a ciphertext given an error oracle from decryption.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;h3 id=&#34;part-i-a-brief-summary-for-the-state-in-aegis128l&#34;&gt;Part I: A brief summary for the state in AEGIS-128L&lt;/h3&gt;

&lt;p&gt;AEGIS-128L has an internal state that is initially computed solely by the &lt;em&gt;key&lt;/em&gt; and the &lt;em&gt;IV&lt;/em&gt;. It is of 128 bytes, broken into eight 16-byte blocks. Let&#39;s $S_i$ is updated to $S_{i+1}$ given 32-byte payload $M$. Let&#39;s define $S_i = (s_{i, 0}, s_{i, 1}, ..., s_{i, 7})$ and $M = (m_0, m_1)$. We have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$s_{i+1, 0} \leftarrow \text{AESEnc}(s_{i, 7}, s_{i, 0}) \oplus m_0$,&lt;/li&gt;
&lt;li&gt;$s_{i+1, 4} \leftarrow \text{AESEnc}(s_{i, 3}, s_{i, 4}) \oplus m_1$, and&lt;/li&gt;
&lt;li&gt;$s_{i+1, j} \leftarrow \text{AESEnc}(s_{i, j-1}, s_{i, j})$ for $j = 1, 2, 3, 5, 6, 7$.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But what is &lt;code&gt;AESEnc&lt;/code&gt;? Let&#39;s see the implementation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;aes_enc&lt;/span&gt;(s: block, t: block) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; block:
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Performs the AESENC operation with tables.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
  t0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (te0[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te1[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te2[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te3[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;]])
  t1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (te0[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te1[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te2[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te3[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]])
  t2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (te0[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te1[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te2[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te3[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]])
  t3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (te0[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te1[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te2[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te3[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;]])
  s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _block_from_ints([t0, t1, t2, t3])
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _xor(s, t)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Well... we will go through this later. Let&#39;s introduce how keystreams are generated from the state. It is (relatively) simple. The keystream $(k_{i, 0}, k_{i, 1})$ for the $i$-th round is given by:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
k_{i, 0} = (s_{i, 2} \wedge s_{i, 3}) \oplus s_{i, 1} \oplus s_{i, 6}, \\
k_{i, 1} = (s_{i, 6} \wedge s_{i, 7}) \oplus s_{i, 5} \oplus s_{i, 2}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&#34;part-ii-recovering-part-of-the-state&#34;&gt;Part II: Recovering part of the state&lt;/h3&gt;

&lt;p&gt;Now we are given that key and IV are unchanged. This implies that the initial state, i.e., $s_{00}, s_{01}, ..., s_{09}$ are constants too.&lt;/p&gt;

&lt;p&gt;Suppose that we have two 96-byte messages $M^{(1)}$ and $M^{(2)}$ with only the first two blocks are different (Formally, if $M^{(k)} := (m^{(k)}_{00}, m^{(k)}_{01}, ..., m^{(k)}_{21}$), then $m^{(1)}_{ij} = m^{(2)}_{ij}$ if and only if $i \neq 0$).&lt;/p&gt;

&lt;p&gt;The following table summarizes which of the $s_{ij}$&#39;s that would be different (marked by an &lt;code&gt;!&lt;/code&gt;), when encrypting $M^{(1)}$ and $M^{(2)}$ respectively.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;$i$ \ $j$&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;!&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;!&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;!&lt;/td&gt;
&lt;td&gt;!&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;!&lt;/td&gt;
&lt;td&gt;!&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;What does this imply? Knowing that $s^{(1)}_{2,j} = s^{(2)}_{2,j}$ for $j = 2, 3, 6, 7$. Let&#39;s look closely on the last 32 bytes of the keystream:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
k^{(1)}_{20} \oplus k^{(2)}_{20}
&amp;= m^{(1)}_{20} \oplus c^{(1)}_{20} \oplus m^{(2)}_{20} \oplus c^{(2)}_{20} \\
&amp;= \left[ (s^{(1)}_{22} \wedge s^{(1)}_{23}) \oplus s^{(1)}_{21} \oplus s^{(1)}_{26} \right] \oplus \left[ (s^{(2)}_{22} \wedge s^{(2)}_{23}) \oplus s^{(2)}_{21} \oplus s^{(2)}_{26} \right] \\
&amp;= s^{(1)}_{21} \oplus s^{(2)}_{21}.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;And similarly $k^{(1)}_{21} \oplus k^{(2)}_{21} = s^{(1)}_{25} \oplus s^{(2)}_{25}$.&lt;/p&gt;

&lt;p&gt;Why is it useful? Let&#39;s define a new function, &lt;code&gt;p&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;(s: block) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; block:
  t0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (te0[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te1[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te2[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te3[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;]])
  t1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (te0[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te1[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te2[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te3[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]])
  t2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (te0[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te1[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te2[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te3[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]])
  t3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (te0[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te1[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te2[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te3[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;]])
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _block_from_ints([t0, t1, t2, t3])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Déjà vu? It is more or less the same with &lt;code&gt;AESEnc&lt;/code&gt;. We can state that &lt;code&gt;AESEnc(s, t) == p(s) ^ t&lt;/code&gt; too. Looking even more closely, one could observe that the first four bytes from &lt;code&gt;p&lt;/code&gt; solely depends on bytes 0, 5, 10 and 15 from &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Knowing this, we can further expand $k^{(1)}_{20} \oplus k^{(2)}_{20}$:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\begin{aligned}
k^{(1)}_{20} \oplus k^{(2)}_{20}
&amp;= s^{(1)}_{21} \oplus s^{(2)}_{21} \\
&amp;= \text{AESEnc}(s^{(1)}_{10}, s^{(1)}_{11}) \oplus \text{AESEnc}(s^{(2)}_{10}, s^{(2)}_{11}) \\
&amp;= p(s^{(1)}_{10}) \oplus s^{(1)}_{11} \oplus p(s^{(2)}_{10}) \oplus s^{(2)}_{11} \\
&amp;= p(s^{(1)}_{10}) \oplus p(s^{(2)}_{10}) \\
&amp;= p\left(\text{AESEnc}(s^{(1)}_{07}, s^{(1)}_{00}) \oplus m^{(1)}_{00}\right) \oplus p\left(\text{AESEnc}(s^{(2)}_{07}, s^{(2)}_{00}) \oplus m^{(2)}_{00}\right) \\
&amp;= p(x \oplus m^{(1)}_{00}) \oplus p(x \oplus m^{(2)}_{00}).
\end{aligned}\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;(We define $x := \text{AESEnc}(s_{07}, s_{00}) = s_{10} \oplus m^{(1)}_{00}$ for ease of reading.)&lt;/p&gt;

&lt;p&gt;And now the &lt;em&gt;only&lt;/em&gt; unknown is $x$. Can we solve it easily? Yes indeed: we can compute bytes 0, 5, 10, 15 of $x$ from the first four bytes of $k^{(1)}_{20} \oplus k^{(2)}_{20}$. Along with three more equalities from &lt;code&gt;p&lt;/code&gt;, we are able to recover $x$ completely. I used an meet-in-the-middle approach to solve for $x$ in five seconds.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://b6a.black/images/2020-08-25-googlectf/hm.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;But wait. There is a problem: I am able to find 65536 candidates (or even more) instead of 1, but I am &lt;em&gt;unable&lt;/em&gt; to eliminate the rest. The possible number of states will be growing exponentally! What can I do? The solution is actually simple: Just send $M^{(3)}$ and compute another solution set of $x$. After all, it is very likely that $x$ is the only element in the intersection of the two sets. With $x$, we are able to compute $s_{10}$ (respectively $s_{14}$).&lt;/p&gt;

&lt;h3 id=&#34;part-iii-finishing-the-first-part-of-the-challenge&#34;&gt;Part III: Finishing the first part of the challenge&lt;/h3&gt;

&lt;p&gt;We can extend the above idea to leak more. By sending two 128-byte messages with blocks 3 and 4 being different, we are able to recover $s_{20}$ and $s_{24}$. We are able to leak $s_{30}$ and $s_{34}$ with the same idea.&lt;/p&gt;

&lt;p&gt;Two more questions remain: How is it made possible in seven queries? And more importantly, how can we recover $s_{ij}$ for all $j$, for some $i$ (preferably $i = 0\ \text{or}\ 1$)?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Challenge 1.&lt;/strong&gt; Recover the above states in 7 queries.&lt;/p&gt;

&lt;p&gt;In short, we are encrypting these seven plaintexts (each &lt;code&gt;0&lt;/code&gt; represents 16 &lt;code&gt;\x00&lt;/code&gt;&#39;s, etc):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;0000000000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0000110000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0000220000&lt;/code&gt; - Derive $s_{10}$ and $s_{14}$ uniquely with (1) and (2)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0000001100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0000002200&lt;/code&gt; - Derive $s_{20}$ and $s_{24}$ uniquely with (1) and (4)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0000000011&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0000000022&lt;/code&gt; - Derive $s_{30}$ and $s_{34}$ uniquely with (1) and (6)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Challenge 2.&lt;/strong&gt; Recover $s_{1, j}$ for all $j$.&lt;/p&gt;

&lt;p&gt;From above, we are able to derive $s_{i, 0}$ and $s_{i, 4}$ for $i = 1, 2, 3$ with $m_{ij} = 0$. Hence, the state transition would be $s_{i+1, j} \leftarrow p(s_{i, j-1}) \oplus s_{ij}$ for all $i, j$. Equivalently $s_{i, j-1} = p^{-1}(s_{i+1, j} \oplus s_{ij})$.&lt;/p&gt;

&lt;p&gt;We are able to compute inverses of $p^{-1}$ easily. Solving system of linear equations would be all good, but I&#39;m doing it with meet-in-the-middle. Code reuse for the win! For now, let&#39;s visualize how $s_{1, j}$&#39;s can be derived.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-viz-dot&#34; data-lang=&#34;viz-dot&#34;&gt;digraph {
  rankdir=BT
  s₁₀[fillcolor=yellow,style=filled]
  s₁₄[fillcolor=yellow,style=filled]
  s₂₀[fillcolor=yellow,style=filled]
  s₂₄[fillcolor=yellow,style=filled]
  s₃₀[fillcolor=yellow,style=filled]
  s₃₄[fillcolor=yellow,style=filled]
  
  s₂₀ -&amp;gt; s₂₇
  s₃₀ -&amp;gt; s₂₇
  
  s₂₄ -&amp;gt; s₂₃
  s₃₄ -&amp;gt; s₂₃
  
  s₁₄ -&amp;gt; s₁₃
  s₂₄ -&amp;gt; s₁₃
  
  s₁₃ -&amp;gt; s₁₂
  s₂₃ -&amp;gt; s₁₂
  
  s₁₀ -&amp;gt; s₁₇
  s₂₀ -&amp;gt; s₁₇
  
  s₁₇ -&amp;gt; s₁₆
  s₂₇ -&amp;gt; s₁₆
  
  s₁₂ -&amp;gt; s₁₁
  s₁₃ -&amp;gt; s₁₁
  s₁₆ -&amp;gt; s₁₁
  
  s₁₆ -&amp;gt; s₁₅
  s₁₇ -&amp;gt; s₁₅
  s₁₂ -&amp;gt; s₁₅  
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After all, the first part of the challenge is done.&lt;/p&gt;

&lt;h3 id=&#34;part-iv-aegis128-vs-aegis128l&#34;&gt;Part IV: AEGIS-128 vs AEGIS-128L&lt;/h3&gt;

&lt;p&gt;For the second part, AEGIS-128 is used. The state is now 80 bytes (five 16-byte blocks). The payload size has been reduced to one block (let&#39;s denote it by $m$). This is how the state transited:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$s_{i+1, 0} \leftarrow p(s_{i, 4}) \oplus s_{i, 0} \oplus m$, and&lt;/li&gt;
&lt;li&gt;$s_{i+1, j} \leftarrow p(s_{i, j-1}) \oplus s_{i, j}$ for $1 \leq j \leq 4$.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Moreover, the keystream $k_i$ for the $i$-th round is also altered: $k_i = (s_{i, 2} \wedge s_{i, 3}) \oplus s_{i, 1} \oplus s_{i, 4}$.&lt;/p&gt;

&lt;h3 id=&#34;part-v-exploring-the-challenge&#34;&gt;Part V: Exploring the challenge&lt;/h3&gt;

&lt;p&gt;I have no idea what&#39;s going on, so I decided to recover the printable &lt;code&gt;secret_plaintext&lt;/code&gt; first.&lt;/p&gt;

&lt;p&gt;It is pretty easy, and is made possible because we are able to receive the error from the oracle. In particular, from &lt;code&gt;pt.decode(&amp;quot;ascii&amp;quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We are able to recover the plaintext with bit-flipping. To begin with, we can flip the whole ciphertext by &lt;code&gt;\x80&lt;/code&gt;. The first 32 bytes for the plaintext would be flipped by &lt;code&gt;\x80&lt;/code&gt; as well. If we send the flipped ciphertext (denote by $c_?$) to the oracle, we will obtain:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;UnicodeDecodeError: &amp;#39;ascii&amp;#39; codec can&amp;#39;t decode byte 0xe7 in position 0: ordinal not in range(128)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means that the first byte of the &lt;em&gt;flipped&lt;/em&gt; plaintext would be &lt;code&gt;\xe7&lt;/code&gt;. Hence, the first byte of the plaintext is &lt;code&gt;\x67&lt;/code&gt; (&lt;code&gt;g&lt;/code&gt;). We then flip the first byte of $c_?$ by &lt;code&gt;\x80&lt;/code&gt; and send it to the oracle, we will be receiving another error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;UnicodeDecodeError: &amp;#39;ascii&amp;#39; codec can&amp;#39;t decode byte 0xc6 in position 1: ordinal not in range(128)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This recovers the second byte - &lt;code&gt;x46&lt;/code&gt; (&lt;code&gt;F&lt;/code&gt;). Since the secret plaintext is 96-byte long, we can recover it with 96 oracle calls.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;REMAINING ORACLE CALLS: 231 - 96 = 135.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With a plaintext recovered, it is time for us to try to recover the internal state. Can we devise a similar strategy that is similar to the first part of the challenge? Formally, what will happen if we have two 48-byte messages $M^{(1)} := (m^{(1)}_0, m^{(1)}_1, m^{(1)}_2)$ and $M^{(2)} := (m^{(2)}_0, m^{(2)}_1, m^{(2)}_2)$ with only the first block being different. Then the last 16 bytes in the keystream will be:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
k^{(1)}_2 \oplus k^{(2)}_2
&amp;= \left[ (s^{(1)}_{22} \wedge s^{(1)}_{23}) \oplus s^{(1)}_{21} \oplus s^{(1)}_{24} \right] \oplus \left[ (s^{(2)}_{22} \wedge s^{(2)}_{23}) \oplus s^{(2)}_{21} \oplus s^{(2)}_{24} \right] \\
&amp;= s^{(1)}_{21} \oplus s^{(2)}_{21} \\
&amp;= p(s^{(1)}_{10}) \oplus s^{(1)}_{11} \oplus p(s^{(2)}_{10}) \oplus s^{(2)}_{11} \\
&amp;= p(s^{(1)}_{10}) \oplus p(s^{(2)}_{10}) \\
&amp;= p\left(\text{AESEnc}(s^{(1)}_{04}, s^{(1)}_{00}) \oplus m^{(1)}_1\right) \oplus p\left(\text{AESEnc}(s^{(2)}_{04}, s^{(2)}_{00}) \oplus m^{(2)}_1\right) \\
&amp;= p(x \oplus m^{(1)}_0) \oplus p(x \oplus m^{(2)}_0).
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Hereby denote $x := \text{AESEnc}(s_{04}, s_{00}) = s_{10} \oplus m^{(1)}_0$. Simply put, if we have the ciphertexts for $M^{(1)}$ and $M^{(2)}$ (denote it as $C^{(k)} = (c^{(k)}_0, c^{(k)}_1, c^{(k)}_2)$), we are able to recover one-fifths of the state if this happens.&lt;/p&gt;

&lt;p&gt;How are we able to do it? Well actually, we have recovered the secret plaintext above. We can flip the first block of the ciphertext arbitrarily (to $C_?$).&lt;/p&gt;

&lt;p&gt;However, since $k^{(2)}_2$ is altered, the third block of the message would be updated. Luckily we are able to recover the message in 17 oracle calls. Here&#39;s how:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Sends $C_?$. We will obtain something like this:
&lt;code&gt;UnicodeDecodeError: &#39;ascii&#39; codec can&#39;t decode byte 0xe8 in position 34...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Flips the 35th byte by &lt;code&gt;\xe8&lt;/code&gt; in $C_?$. Sends the patched $C_?$:
&lt;code&gt;UnicodeDecodeError: &#39;ascii&#39; codec can&#39;t decode byte 0xcb in position 35...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Flips the 36th byte by &lt;code&gt;\xcb&lt;/code&gt; in $C_?$. Repeat the process until we receive &lt;strong&gt;OK&lt;/strong&gt;, meaning that the plaintext is now ASCII-encoded.&lt;/li&gt;
&lt;li&gt;For now, we have recovered a subset of message bytes. We then flip the unknown bytes by &lt;code&gt;\x80&lt;/code&gt; (for example, bytes 33 and 34) to throw errors from the oracle.&lt;/li&gt;
&lt;li&gt;Repeat step 1 until all unknown bytes are recovered.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In short, we spent 16 oracle calls to recover the message, and one oracle call to indicate us to flip all the bytes those were originally printable. We are then able to recover a possible set of $s_{10}$ with 65536 entries (or more). We can spend another 17 queries to find the actual $s_{10}$, however.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;REMAINING ORACLE CALLS: 135 - 17&amp;times;2 = 101.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With the same idea, we can recover $s_{20}, s_{30}, s_{40}$ with 17&amp;times;6 queries. This would allow us to recover $s_{10}, s_{11}, ..., s_{14}$ and hence forging arbitrary messages (along with a slightly longer AD).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;REMAINING ORACLE CALLS: 101 - 17&amp;times;6 = -1.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Shoot - we are one query short. Since we are able to recover one byte of the plaintext in each of the queries, so it doesn&#39;t hurt to sacrifice one oracle calls by guessing one byte. So... in theory, we are able to finish the challenge with once every 256 times.&lt;/p&gt;

&lt;p&gt;Luckily, if we are given a incorrect plaintext (actually keystream), we are unable to recover a single $s_*$. That&#39;s pretty good, we are able to solve the challenge every time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;REMAINING ORACLE CALLS: -1 + 1 = :tada:.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With the exploit script written, I am able to reach the very end locally. Congratulations to me!&lt;/p&gt;

&lt;h3 id=&#34;part-iv-wait-arent-we-done&#34;&gt;Part IV: Wait... Aren&#39;t we done?&lt;/h3&gt;

&lt;p&gt;No... When I am interacting to the server, I am &lt;em&gt;always&lt;/em&gt; disconnected while sending one of the 231 oracle calls. Asking the organizers in IRC, knowing that there was an 1-minute timeout - it was later increased to 10 minutes. Unfortunately, my solution runs for around 5 minutes. I have two choices:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Wait until the challenge has a 10-minute timeout, or&lt;/li&gt;
&lt;li&gt;Optimize the script and have it completed in one minute.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Seeing that there are already few teams solving the challenge, I think (2) would be fun.&lt;/p&gt;

&lt;h4 id=&#34;61-reducing-online-complexity&#34;&gt;6.1. Reducing online complexity&lt;/h4&gt;

&lt;p&gt;For inputs that does not require immediate feedbacks, we can send them at the same time. This is an example when I am recovering &lt;code&gt;secret_plaintext&lt;/code&gt; in the second part.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Before optimization&lt;/span&gt;
test_ciphertext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bytes([c&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x80&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ciphertext])
m0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt;):
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b64encode(test_ciphertext))
    test_ciphertext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cxor(test_ciphertext, i, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80&lt;/span&gt;)
    p, mc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; try_decrypt_read(r)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; i
    m0 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; bytes([mc&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x80&lt;/span&gt;])

&lt;span style=&#34;color:#75715e&#34;&gt;# After optimization&lt;/span&gt;
test_ciphertext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bytes([c&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x80&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ciphertext])
m0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt;):
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b64encode(test_ciphertext))
    test_ciphertext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cxor(test_ciphertext, i, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt;):
    p, mc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; try_decrypt_read(r)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; i
    m0 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; bytes([mc&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x80&lt;/span&gt;])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;62-reducing-offline-complexity&#34;&gt;6.2. Reducing offline complexity&lt;/h4&gt;

&lt;p&gt;For example, this is the method I implemented to solve for $x$ from $p(x \oplus a) \oplus p(x \oplus b) = c$ - it takes one second each time:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;px_subsolve&lt;/span&gt;(a_sub, b_sub, c_sub):
    &lt;span style=&#34;color:#75715e&#34;&gt;# Given a_sub, b_sub, c_sub (4 bytes), find x_sub such that&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# te0[(x_sub ^ a_sub)[0]] ^ te1[(x_sub ^ a_sub)[1]] ^ te2[(x_sub ^ a_sub)[2]] ^ te3[(x_sub ^ a_sub)[3]]&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# ^ te0[(x_sub ^ a_sub)[0]] ^ te1[(x_sub ^ a_sub)[1]] ^ te2[(x_sub ^ a_sub)[2]] ^ te3[(x_sub ^ a_sub)[3]]&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# = c_sub&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;# Reformulating:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# te0[(x_sub ^ a_sub)[0]] ^ te1[(x_sub ^ a_sub)[1]] ^ te0[(x_sub ^ a_sub)[0]] ^ te1[(x_sub ^ a_sub)[1]] ^ c_sub&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# = te2[(x_sub ^ a_sub)[2]] ^ te3[(x_sub ^ a_sub)[3]] ^ te2[(x_sub ^ a_sub)[2]] ^ te3[(x_sub ^ a_sub)[3]]&lt;/span&gt;
    lhss &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x0, x1 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; itertools&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;product(range(&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;), repeat&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;):
        &lt;span style=&#34;color:#75715e&#34;&gt;# LHS&lt;/span&gt;
        xs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [be0[x0&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;a_sub[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]], be0[x0&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;b_sub[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]], be1[x1&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;a_sub[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]], be1[x1&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;b_sub[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]], c_sub]
        y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reduce(_xor, xs)
        lhss[y] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lhss&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(y, []) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [(x0, x1)]
        
    solns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x2, x3 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; itertools&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;product(range(&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;), repeat&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;):
        &lt;span style=&#34;color:#75715e&#34;&gt;# RHS&lt;/span&gt;
        xs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [be2[x2&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;a_sub[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]], be2[x2&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;b_sub[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]], be3[x3&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;a_sub[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]], be3[x3&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;b_sub[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]]]
        y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reduce(_xor, xs)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x0, x1 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lhss&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(y, []):
            solns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(bytes([x0, x1, x2, x3]))
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; solns&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, if we force &lt;code&gt;a_sub == b&#39;\0&#39;*4&lt;/code&gt; and &lt;code&gt;b_sub == b&#39;\1&#39;*4 or b_sub == b&#39;\2&#39;*4&lt;/code&gt;, the right hand side can be precomputed. We are able to solve for $x$ once every 0.2 second.&lt;/p&gt;

&lt;p&gt;At last - we are able to get the flag in 30 seconds locally and around 55 seconds online! :tada:&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&#34;credits&#34;&gt;Credits&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Thanks @harrier_lcc who noticed that my &lt;em&gt;lever&lt;/em&gt; did not hurt. Playing Minecraft too much, I misspelt liver.&lt;/li&gt;
&lt;li&gt;Thanks @hellman1908 for pointing that we are able to bruteforce byte by byte instead of bruteforcing columns, since that we can apply &lt;code&gt;MixColumns&lt;/code&gt; inverse.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
